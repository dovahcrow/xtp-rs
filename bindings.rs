/* automatically generated by rust-bindgen 0.59.1 */

#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const __USE_ANSI: u32 = 1;
pub const _ISOC95_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _BSD_SOURCE: u32 = 1;
pub const _SVID_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_ISOCXX11: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_XOPEN2K8XSI: u32 = 1;
pub const __USE_XOPEN2KXSI: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_BSD: u32 = 1;
pub const __USE_SVID: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201103;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 17;
pub const __GLIBC_HAVE_LONG_LONG: u32 = 1;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const _BITS_WCHAR_H: u32 = 1;
pub const __WCHAR_MIN: i32 = -2147483648;
pub const __WCHAR_MAX: u32 = 2147483647;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WCHAR_MIN: i32 = -2147483648;
pub const WCHAR_MAX: u32 = 2147483647;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const MAX_TGW_CNT_PER_PBU: u32 = 10;
pub const XTP_VERSION_LEN: u32 = 16;
pub const XTP_TRADING_DAY_LEN: u32 = 9;
pub const XTP_TICKER_LEN: u32 = 16;
pub const XTP_TICKER_NAME_LEN: u32 = 64;
pub const XTP_LOCAL_ORDER_LEN: u32 = 11;
pub const XTP_ORDER_EXCH_LEN: u32 = 17;
pub const XTP_EXEC_ID_LEN: u32 = 18;
pub const XTP_BRANCH_PBU_LEN: u32 = 7;
pub const XTP_ACCOUNT_NAME_LEN: u32 = 16;
pub const XTP_CREDIT_DEBT_ID_LEN: u32 = 33;
pub const XTP_INET_ADDRESS_STR_LEN: u32 = 64;
pub const XTP_MAC_ADDRESS_LEN: u32 = 16;
pub const XTP_HARDDISK_SN_LEN: u32 = 24;
pub const XTP_MACOS_SNO_LEN: u32 = 21;
pub const XTP_STRATEGE_LEG_NUM: u32 = 4;
pub const XTP_STRATEGY_ID_LEN: u32 = 10;
pub const XTP_STRATEGY_NAME_LEN: u32 = 32;
pub const XTP_SECONDARY_ORDER_ID_LEN: u32 = 18;
pub const XTP_CNTRT_COMB_STRA_LIST_LEN: u32 = 2048;
pub const XTP_COMBINED_EXECUTION_LEG_NUM: u32 = 2;
pub const XTP_SIDE_BUY: u32 = 1;
pub const XTP_SIDE_SELL: u32 = 2;
pub const XTP_SIDE_PURCHASE: u32 = 7;
pub const XTP_SIDE_REDEMPTION: u32 = 8;
pub const XTP_SIDE_SPLIT: u32 = 9;
pub const XTP_SIDE_MERGE: u32 = 10;
pub const XTP_SIDE_COVER: u32 = 11;
pub const XTP_SIDE_FREEZE: u32 = 12;
pub const XTP_SIDE_MARGIN_TRADE: u32 = 21;
pub const XTP_SIDE_SHORT_SELL: u32 = 22;
pub const XTP_SIDE_REPAY_MARGIN: u32 = 23;
pub const XTP_SIDE_REPAY_STOCK: u32 = 24;
pub const XTP_SIDE_STOCK_REPAY_STOCK: u32 = 26;
pub const XTP_SIDE_SURSTK_TRANS: u32 = 27;
pub const XTP_SIDE_GRTSTK_TRANSIN: u32 = 28;
pub const XTP_SIDE_GRTSTK_TRANSOUT: u32 = 29;
pub const XTP_SIDE_OPT_COMBINE: u32 = 31;
pub const XTP_SIDE_OPT_SPLIT: u32 = 32;
pub const XTP_SIDE_OPT_SPLIT_FORCE: u32 = 33;
pub const XTP_SIDE_OPT_SPLIT_FORCE_EXCH: u32 = 34;
pub const XTP_SIDE_UNKNOWN: u32 = 50;
pub const XTP_POSITION_EFFECT_INIT: u32 = 0;
pub const XTP_POSITION_EFFECT_OPEN: u32 = 1;
pub const XTP_POSITION_EFFECT_CLOSE: u32 = 2;
pub const XTP_POSITION_EFFECT_FORCECLOSE: u32 = 3;
pub const XTP_POSITION_EFFECT_CLOSETODAY: u32 = 4;
pub const XTP_POSITION_EFFECT_CLOSEYESTERDAY: u32 = 5;
pub const XTP_POSITION_EFFECT_FORCEOFF: u32 = 6;
pub const XTP_POSITION_EFFECT_LOCALFORCECLOSE: u32 = 7;
pub const XTP_POSITION_EFFECT_CREDIT_FORCE_COVER: u32 = 8;
pub const XTP_POSITION_EFFECT_CREDIT_FORCE_CLEAR: u32 = 9;
pub const XTP_POSITION_EFFECT_CREDIT_FORCE_DEBT: u32 = 10;
pub const XTP_POSITION_EFFECT_CREDIT_FORCE_UNCOND: u32 = 11;
pub const XTP_POSITION_EFFECT_UNKNOWN: u32 = 12;
pub const XTP_TRDT_COMMON: u8 = 48u8;
pub const XTP_TRDT_CASH: u8 = 49u8;
pub const XTP_TRDT_PRIMARY: u8 = 50u8;
pub const XTP_TRDT_CROSS_MKT_CASH: u8 = 51u8;
pub const XTP_TRDT_HK_MKT_CASH: u8 = 52u8;
pub const XTP_TRDT_NON_SHSZ_MKT_CASH: u8 = 53u8;
pub const XTP_ORDT_Normal: u8 = 48u8;
pub const XTP_ORDT_DeriveFromQuote: u8 = 49u8;
pub const XTP_ORDT_DeriveFromCombination: u8 = 50u8;
pub const XTP_ORDT_Combination: u8 = 51u8;
pub const XTP_ORDT_ConditionalOrder: u8 = 52u8;
pub const XTP_ORDT_Swap: u8 = 53u8;
pub const XTP_ERR_MSG_LEN: u32 = 124;
pub const XTP_ACCOUNT_PASSWORD_LEN: u32 = 64;
pub const XTP_STRATEGY_STATE_CREATING: u32 = 0;
pub const XTP_STRATEGY_STATE_CREATED: u32 = 1;
pub const XTP_STRATEGY_STATE_STARTING: u32 = 2;
pub const XTP_STRATEGY_STATE_STARTED: u32 = 3;
pub const XTP_STRATEGY_STATE_STOPPING: u32 = 4;
pub const XTP_STRATEGY_STATE_STOPPED: u32 = 5;
pub const XTP_STRATEGY_STATE_DESTROYING: u32 = 6;
pub const XTP_STRATEGY_STATE_DESTROYED: u32 = 7;
pub const XTP_STRATEGY_STATE_ERROR: u32 = 8;
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
#[doc = " \u{7248}\u{672c}\u{53f7}\u{7c7b}\u{578b}"]
pub type XTPVersionType = [::std::os::raw::c_char; 16usize];
#[repr(u32)]
#[doc = ""]
#[doc = "@brief XTP_LOG_LEVEL\u{662f}\u{65e5}\u{5fd7}\u{8f93}\u{51fa}\u{7ea7}\u{522b}\u{7c7b}\u{578b}"]
#[doc = ""]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum XTP_LOG_LEVEL {
    #[doc = "<\u{4e25}\u{91cd}\u{9519}\u{8bef}\u{7ea7}\u{522b}"]
    XTP_LOG_LEVEL_FATAL = 0,
    #[doc = "<\u{9519}\u{8bef}\u{7ea7}\u{522b}"]
    XTP_LOG_LEVEL_ERROR = 1,
    #[doc = "<\u{8b66}\u{544a}\u{7ea7}\u{522b}"]
    XTP_LOG_LEVEL_WARNING = 2,
    #[doc = "<info\u{7ea7}\u{522b}"]
    XTP_LOG_LEVEL_INFO = 3,
    #[doc = "<debug\u{7ea7}\u{522b}"]
    XTP_LOG_LEVEL_DEBUG = 4,
    #[doc = "<trace\u{7ea7}\u{522b}"]
    XTP_LOG_LEVEL_TRACE = 5,
}
#[repr(u32)]
#[doc = ""]
#[doc = "@brief XTP_PROTOCOL_TYPE\u{662f}\u{901a}\u{8baf}\u{4f20}\u{8f93}\u{534f}\u{8bae}\u{65b9}\u{5f0f}"]
#[doc = ""]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum XTP_PROTOCOL_TYPE {
    #[doc = "<\u{91c7}\u{7528}TCP\u{65b9}\u{5f0f}\u{4f20}\u{8f93}"]
    XTP_PROTOCOL_TCP = 1,
    #[doc = "<\u{91c7}\u{7528}UDP\u{65b9}\u{5f0f}\u{4f20}\u{8f93}(\u{4ec5}\u{884c}\u{60c5}\u{63a5}\u{53e3}\u{652f}\u{6301})"]
    XTP_PROTOCOL_UDP = 2,
}
#[repr(u32)]
#[doc = ""]
#[doc = "@brief XTP_EXCHANGE_TYPE\u{662f}\u{4ea4}\u{6613}\u{6240}\u{7c7b}\u{578b}\u{ff0c}\u{884c}\u{60c5}\u{91cc}\u{4f7f}\u{7528}"]
#[doc = ""]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum XTP_EXCHANGE_TYPE {
    #[doc = "<\u{4e0a}\u{8bc1}"]
    XTP_EXCHANGE_SH = 1,
    #[doc = "<\u{6df1}\u{8bc1}"]
    XTP_EXCHANGE_SZ = 2,
    #[doc = "<\u{4e0d}\u{5b58}\u{5728}\u{7684}\u{4ea4}\u{6613}\u{6240}\u{7c7b}\u{578b}"]
    XTP_EXCHANGE_UNKNOWN = 3,
}
#[repr(u32)]
#[doc = ""]
#[doc = "@brief XTP_MARKET_TYPE\u{5e02}\u{573a}\u{7c7b}\u{578b}\u{ff0c}\u{4ea4}\u{6613}\u{91cc}\u{4f7f}\u{7528}"]
#[doc = ""]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum XTP_MARKET_TYPE {
    #[doc = "<\u{521d}\u{59cb}\u{5316}\u{503c}\u{6216}\u{8005}\u{672a}\u{77e5}"]
    XTP_MKT_INIT = 0,
    #[doc = "<\u{6df1}\u{5733}A\u{80a1}"]
    XTP_MKT_SZ_A = 1,
    #[doc = "<\u{4e0a}\u{6d77}A\u{80a1}"]
    XTP_MKT_SH_A = 2,
    #[doc = "<\u{672a}\u{77e5}\u{4ea4}\u{6613}\u{5e02}\u{573a}\u{7c7b}\u{578b}"]
    XTP_MKT_UNKNOWN = 3,
}
#[repr(u32)]
#[doc = ""]
#[doc = "@brief XTP_PRICE_TYPE\u{662f}\u{4ef7}\u{683c}\u{7c7b}\u{578b}"]
#[doc = ""]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum XTP_PRICE_TYPE {
    #[doc = "<\u{9650}\u{4ef7}\u{5355}-\u{6caa} / \u{6df1} / \u{6caa}\u{671f}\u{6743} / \u{6df1}\u{671f}\u{6743} \u{ff08}\u{9664}\u{666e}\u{901a}\u{80a1}\u{7968}\u{4e1a}\u{52a1}\u{5916}\u{ff0c}\u{5176}\u{4f59}\u{672a}\u{7279}\u{6307}\u{7684}\u{4e1a}\u{52a1}\u{5747}\u{4f7f}\u{7528}\u{6b64}\u{79cd}\u{7c7b}\u{578b}\u{ff09}"]
    XTP_PRICE_LIMIT = 1,
    #[doc = "<\u{5373}\u{65f6}\u{6210}\u{4ea4}\u{5269}\u{4f59}\u{8f6c}\u{64a4}\u{9500}\u{ff0c}\u{5e02}\u{4ef7}\u{5355}-\u{6df1} / \u{6caa}\u{671f}\u{6743} / \u{6df1}\u{671f}\u{6743}"]
    XTP_PRICE_BEST_OR_CANCEL = 2,
    #[doc = "<\u{6700}\u{4f18}\u{4e94}\u{6863}\u{5373}\u{65f6}\u{6210}\u{4ea4}\u{5269}\u{4f59}\u{8f6c}\u{9650}\u{4ef7}\u{ff0c}\u{5e02}\u{4ef7}\u{5355}-\u{6caa}"]
    XTP_PRICE_BEST5_OR_LIMIT = 3,
    #[doc = "<\u{6700}\u{4f18}5\u{6863}\u{5373}\u{65f6}\u{6210}\u{4ea4}\u{5269}\u{4f59}\u{8f6c}\u{64a4}\u{9500}\u{ff0c}\u{5e02}\u{4ef7}\u{5355}-\u{6caa}\u{6df1} / \u{6df1}\u{671f}\u{6743}"]
    XTP_PRICE_BEST5_OR_CANCEL = 4,
    #[doc = "<\u{5168}\u{90e8}\u{6210}\u{4ea4}\u{6216}\u{64a4}\u{9500},\u{5e02}\u{4ef7}\u{5355}-\u{6df1} / \u{6caa}\u{671f}\u{6743} / \u{6df1}\u{671f}\u{6743}"]
    XTP_PRICE_ALL_OR_CANCEL = 5,
    #[doc = "<\u{672c}\u{65b9}\u{6700}\u{4f18}\u{ff0c}\u{5e02}\u{4ef7}\u{5355}-\u{6df1} / \u{6df1}\u{671f}\u{6743} / \u{6caa}\u{79d1}\u{521b}\u{677f}"]
    XTP_PRICE_FORWARD_BEST = 6,
    #[doc = "<\u{5bf9}\u{65b9}\u{6700}\u{4f18}\u{5269}\u{4f59}\u{8f6c}\u{9650}\u{4ef7}\u{ff0c}\u{5e02}\u{4ef7}\u{5355}-\u{6df1} / \u{6caa}\u{671f}\u{6743} / \u{6df1}\u{671f}\u{6743} / \u{6caa}\u{79d1}\u{521b}\u{677f}"]
    XTP_PRICE_REVERSE_BEST_LIMIT = 7,
    #[doc = "<\u{671f}\u{6743}\u{9650}\u{4ef7}\u{7533}\u{62a5}FOK"]
    XTP_PRICE_LIMIT_OR_CANCEL = 8,
    #[doc = "<\u{672a}\u{77e5}\u{6216}\u{8005}\u{65e0}\u{6548}\u{4ef7}\u{683c}\u{7c7b}\u{578b}"]
    XTP_PRICE_TYPE_UNKNOWN = 9,
}
#[repr(u32)]
#[doc = ""]
#[doc = "@brief XTP_ORDER_ACTION_STATUS_TYPE\u{662f}\u{62a5}\u{5355}\u{64cd}\u{4f5c}\u{72b6}\u{6001}\u{7c7b}\u{578b}"]
#[doc = ""]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum XTP_ORDER_ACTION_STATUS_TYPE {
    #[doc = "<\u{5df2}\u{7ecf}\u{63d0}\u{4ea4}"]
    XTP_ORDER_ACTION_STATUS_SUBMITTED = 1,
    #[doc = "<\u{5df2}\u{7ecf}\u{63a5}\u{53d7}"]
    XTP_ORDER_ACTION_STATUS_ACCEPTED = 2,
    #[doc = "<\u{5df2}\u{7ecf}\u{88ab}\u{62d2}\u{7edd}"]
    XTP_ORDER_ACTION_STATUS_REJECTED = 3,
}
#[repr(u32)]
#[doc = ""]
#[doc = "@brief XTP_ORDER_STATUS_TYPE\u{662f}\u{62a5}\u{5355}\u{72b6}\u{6001}\u{7c7b}\u{578b}"]
#[doc = ""]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum XTP_ORDER_STATUS_TYPE {
    #[doc = "<\u{521d}\u{59cb}\u{5316}"]
    XTP_ORDER_STATUS_INIT = 0,
    #[doc = "<\u{5168}\u{90e8}\u{6210}\u{4ea4}"]
    XTP_ORDER_STATUS_ALLTRADED = 1,
    #[doc = "<\u{90e8}\u{5206}\u{6210}\u{4ea4}"]
    XTP_ORDER_STATUS_PARTTRADEDQUEUEING = 2,
    #[doc = "<\u{90e8}\u{5206}\u{64a4}\u{5355}"]
    XTP_ORDER_STATUS_PARTTRADEDNOTQUEUEING = 3,
    #[doc = "<\u{672a}\u{6210}\u{4ea4}"]
    XTP_ORDER_STATUS_NOTRADEQUEUEING = 4,
    #[doc = "<\u{5df2}\u{64a4}\u{5355}"]
    XTP_ORDER_STATUS_CANCELED = 5,
    #[doc = "<\u{5df2}\u{62d2}\u{7edd}"]
    XTP_ORDER_STATUS_REJECTED = 6,
    #[doc = "<\u{672a}\u{77e5}\u{8ba2}\u{5355}\u{72b6}\u{6001}"]
    XTP_ORDER_STATUS_UNKNOWN = 7,
}
#[repr(u32)]
#[doc = ""]
#[doc = "@brief XTP_ORDER_SUBMIT_STATUS_TYPE\u{662f}\u{62a5}\u{5355}\u{63d0}\u{4ea4}\u{72b6}\u{6001}\u{7c7b}\u{578b}"]
#[doc = ""]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum XTP_ORDER_SUBMIT_STATUS_TYPE {
    #[doc = "<\u{8ba2}\u{5355}\u{5df2}\u{7ecf}\u{63d0}\u{4ea4}"]
    XTP_ORDER_SUBMIT_STATUS_INSERT_SUBMITTED = 1,
    #[doc = "<\u{8ba2}\u{5355}\u{5df2}\u{7ecf}\u{88ab}\u{63a5}\u{53d7}"]
    XTP_ORDER_SUBMIT_STATUS_INSERT_ACCEPTED = 2,
    #[doc = "<\u{8ba2}\u{5355}\u{5df2}\u{7ecf}\u{88ab}\u{62d2}\u{7edd}"]
    XTP_ORDER_SUBMIT_STATUS_INSERT_REJECTED = 3,
    #[doc = "<\u{64a4}\u{5355}\u{5df2}\u{7ecf}\u{63d0}\u{4ea4}"]
    XTP_ORDER_SUBMIT_STATUS_CANCEL_SUBMITTED = 4,
    #[doc = "<\u{64a4}\u{5355}\u{5df2}\u{7ecf}\u{88ab}\u{62d2}\u{7edd}"]
    XTP_ORDER_SUBMIT_STATUS_CANCEL_REJECTED = 5,
    #[doc = "<\u{64a4}\u{5355}\u{5df2}\u{7ecf}\u{88ab}\u{63a5}\u{53d7}"]
    XTP_ORDER_SUBMIT_STATUS_CANCEL_ACCEPTED = 6,
}
#[repr(u32)]
#[doc = ""]
#[doc = "@brief XTP_TE_RESUME_TYPE\u{662f}\u{516c}\u{6709}\u{6d41}\u{ff08}\u{8ba2}\u{5355}\u{54cd}\u{5e94}\u{3001}\u{6210}\u{4ea4}\u{56de}\u{62a5}\u{ff09}\u{91cd}\u{4f20}\u{65b9}\u{5f0f}"]
#[doc = ""]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum XTP_TE_RESUME_TYPE {
    #[doc = "<\u{4ece}\u{672c}\u{4ea4}\u{6613}\u{65e5}\u{5f00}\u{59cb}\u{91cd}\u{4f20}"]
    XTP_TERT_RESTART = 0,
    #[doc = "<\u{4ece}\u{4ece}\u{4e0a}\u{6b21}\u{6536}\u{5230}\u{7684}\u{7eed}\u{4f20}\u{ff08}\u{6682}\u{672a}\u{652f}\u{6301}\u{ff09}"]
    XTP_TERT_RESUME = 1,
    #[doc = "<\u{53ea}\u{4f20}\u{9001}\u{767b}\u{5f55}\u{540e}\u{516c}\u{6709}\u{6d41}\u{ff08}\u{8ba2}\u{5355}\u{54cd}\u{5e94}\u{3001}\u{6210}\u{4ea4}\u{56de}\u{62a5}\u{ff09}\u{7684}\u{5185}\u{5bb9}"]
    XTP_TERT_QUICK = 2,
}
#[repr(u32)]
#[doc = ""]
#[doc = "@brief ETF_REPLACE_TYPE\u{73b0}\u{91d1}\u{66ff}\u{4ee3}\u{6807}\u{8bc6}\u{5b9a}\u{4e49}"]
#[doc = ""]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ETF_REPLACE_TYPE {
    #[doc = "<\u{7981}\u{6b62}\u{73b0}\u{91d1}\u{66ff}\u{4ee3}"]
    ERT_CASH_FORBIDDEN = 0,
    #[doc = "<\u{53ef}\u{4ee5}\u{73b0}\u{91d1}\u{66ff}\u{4ee3}"]
    ERT_CASH_OPTIONAL = 1,
    #[doc = "<\u{5fc5}\u{987b}\u{73b0}\u{91d1}\u{66ff}\u{4ee3}"]
    ERT_CASH_MUST = 2,
    #[doc = "<\u{6df1}\u{5e02}\u{9000}\u{8865}\u{73b0}\u{91d1}\u{66ff}\u{4ee3}"]
    ERT_CASH_RECOMPUTE_INTER_SZ = 3,
    #[doc = "<\u{6df1}\u{5e02}\u{5fc5}\u{987b}\u{73b0}\u{91d1}\u{66ff}\u{4ee3}"]
    ERT_CASH_MUST_INTER_SZ = 4,
    #[doc = "<\u{975e}\u{6caa}\u{6df1}\u{5e02}\u{573a}\u{6210}\u{5206}\u{8bc1}\u{5238}\u{9000}\u{8865}\u{73b0}\u{91d1}\u{66ff}\u{4ee3}\u{ff08}\u{4e0d}\u{9002}\u{7528}\u{4e8e}\u{8de8}\u{6caa}\u{6df1}\u{6e2f}ETF\u{4ea7}\u{54c1}\u{ff09}"]
    ERT_CASH_RECOMPUTE_INTER_OTHER = 5,
    #[doc = "<\u{8868}\u{793a}\u{975e}\u{6caa}\u{6df1}\u{5e02}\u{573a}\u{6210}\u{4efd}\u{8bc1}\u{5238}\u{5fc5}\u{987b}\u{73b0}\u{91d1}\u{66ff}\u{4ee3}\u{ff08}\u{4e0d}\u{9002}\u{7528}\u{4e8e}\u{8de8}\u{6caa}\u{6df1}\u{6e2f}ETF\u{4ea7}\u{54c1}\u{ff09}"]
    ERT_CASH_MUST_INTER_OTHER = 6,
    ERT_CASH_RECOMPUTE_INTER_HK = 7,
    #[doc = "\u{6e2f}\u{5e02}\u{9000}\u{8865}\u{73b0}\u{91d1}\u{66ff}\u{4ee3}\u{ff08}\u{4ec5}\u{9002}\u{7528}\u{4e8e}\u{8de8}\u{6caa}\u{6df1}\u{6e2f}ETF\u{4ea7}\u{54c1}\u{ff09}"]
    ERT_CASH_MUST_INTER_HK = 8,
    #[doc = "<\u{65e0}\u{6548}\u{503c}"]
    EPT_INVALID = 9,
}
#[repr(u32)]
#[doc = ""]
#[doc = "@brief XTP_TICKER_TYPE\u{8bc1}\u{5238}\u{7c7b}\u{578b}"]
#[doc = ""]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum XTP_TICKER_TYPE {
    #[doc = "<\u{666e}\u{901a}\u{80a1}\u{7968}"]
    XTP_TICKER_TYPE_STOCK = 0,
    #[doc = "<\u{6307}\u{6570}"]
    XTP_TICKER_TYPE_INDEX = 1,
    #[doc = "<\u{57fa}\u{91d1}"]
    XTP_TICKER_TYPE_FUND = 2,
    #[doc = "<\u{503a}\u{5238}"]
    XTP_TICKER_TYPE_BOND = 3,
    #[doc = "<\u{671f}\u{6743}"]
    XTP_TICKER_TYPE_OPTION = 4,
    #[doc = "<\u{79d1}\u{521b}\u{677f}\u{80a1}\u{7968}\u{ff08}\u{4e0a}\u{6d77}\u{ff09}"]
    XTP_TICKER_TYPE_TECH_STOCK = 5,
    #[doc = "<\u{672a}\u{77e5}\u{7c7b}\u{578b}"]
    XTP_TICKER_TYPE_UNKNOWN = 6,
}
#[repr(u32)]
#[doc = ""]
#[doc = "@brief XTP_BUSINESS_TYPE\u{8bc1}\u{5238}\u{4e1a}\u{52a1}\u{7c7b}\u{578b}"]
#[doc = ""]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum XTP_BUSINESS_TYPE {
    #[doc = "<\u{666e}\u{901a}\u{80a1}\u{7968}\u{4e1a}\u{52a1}\u{ff08}\u{80a1}\u{7968}\u{4e70}\u{5356}\u{ff0c}ETF\u{4e70}\u{5356}\u{ff0c}\u{6caa}\u{5e02}\u{4ea4}\u{6613}\u{578b}\u{8d27}\u{5e01}\u{57fa}\u{91d1}\u{7b49}\u{ff09}"]
    XTP_BUSINESS_TYPE_CASH = 0,
    #[doc = "<\u{65b0}\u{80a1}\u{7533}\u{8d2d}\u{4e1a}\u{52a1}\u{ff08}\u{5bf9}\u{5e94}\u{7684}price type\u{9700}\u{9009}\u{62e9}\u{9650}\u{4ef7}\u{7c7b}\u{578b}\u{ff09}"]
    XTP_BUSINESS_TYPE_IPOS = 1,
    #[doc = "<\u{56de}\u{8d2d}\u{4e1a}\u{52a1}\u{ff08}\u{56fd}\u{503a}\u{9006}\u{56de}\u{8d2d}\u{4e1a}\u{52a1}\u{5bf9}\u{5e94}\u{7684}price type\u{586b}\u{4e3a}\u{9650}\u{4ef7}\u{ff0c}side\u{586b}\u{4e3a}\u{5356}\u{ff09}"]
    XTP_BUSINESS_TYPE_REPO = 2,
    #[doc = "<ETF\u{7533}\u{8d4e}\u{4e1a}\u{52a1}"]
    XTP_BUSINESS_TYPE_ETF = 3,
    #[doc = "<\u{878d}\u{8d44}\u{878d}\u{5238}\u{4e1a}\u{52a1}"]
    XTP_BUSINESS_TYPE_MARGIN = 4,
    #[doc = "<\u{8f6c}\u{6258}\u{7ba1}\u{ff08}\u{672a}\u{652f}\u{6301}\u{ff09}"]
    XTP_BUSINESS_TYPE_DESIGNATION = 5,
    #[doc = "<\u{914d}\u{80a1}\u{4e1a}\u{52a1}\u{ff08}\u{5bf9}\u{5e94}\u{7684}price type\u{9700}\u{9009}\u{62e9}\u{9650}\u{4ef7}\u{7c7b}\u{578b},side\u{586b}\u{4e3a}\u{4e70}\u{ff09}"]
    XTP_BUSINESS_TYPE_ALLOTMENT = 6,
    #[doc = "<\u{5206}\u{7ea7}\u{57fa}\u{91d1}\u{7533}\u{8d4e}\u{4e1a}\u{52a1}"]
    XTP_BUSINESS_TYPE_STRUCTURED_FUND_PURCHASE_REDEMPTION = 7,
    #[doc = "<\u{5206}\u{7ea7}\u{57fa}\u{91d1}\u{62c6}\u{5206}\u{5408}\u{5e76}\u{4e1a}\u{52a1}"]
    XTP_BUSINESS_TYPE_STRUCTURED_FUND_SPLIT_MERGE = 8,
    #[doc = "<\u{8d27}\u{5e01}\u{57fa}\u{91d1}\u{7533}\u{8d4e}\u{4e1a}\u{52a1}\u{ff08}\u{6682}\u{672a}\u{652f}\u{6301}\u{ff0c}\u{6caa}\u{5e02}\u{4ea4}\u{6613}\u{578b}\u{8d27}\u{5e01}\u{57fa}\u{91d1}\u{7684}\u{4e70}\u{5356}\u{8bf7}\u{4f7f}\u{7528}\u{666e}\u{901a}\u{80a1}\u{7968}\u{4e1a}\u{52a1}\u{ff09}"]
    XTP_BUSINESS_TYPE_MONEY_FUND = 9,
    #[doc = "<\u{671f}\u{6743}\u{4e1a}\u{52a1}"]
    XTP_BUSINESS_TYPE_OPTION = 10,
    #[doc = "<\u{884c}\u{6743}"]
    XTP_BUSINESS_TYPE_EXECUTE = 11,
    #[doc = "<\u{9501}\u{5b9a}\u{89e3}\u{9501}\u{ff0c}\u{6682}\u{4e0d}\u{652f}\u{6301}"]
    XTP_BUSINESS_TYPE_FREEZE = 12,
    #[doc = "<\u{671f}\u{6743}\u{7ec4}\u{5408}\u{7b56}\u{7565} \u{7ec4}\u{5408}\u{548c}\u{62c6}\u{5206}\u{4e1a}\u{52a1}"]
    XTP_BUSINESS_TYPE_OPTION_COMBINE = 13,
    #[doc = "<\u{671f}\u{6743}\u{884c}\u{6743}\u{5408}\u{5e76}\u{4e1a}\u{52a1}"]
    XTP_BUSINESS_TYPE_EXECUTE_COMBINE = 14,
    #[doc = "<\u{672a}\u{77e5}\u{7c7b}\u{578b}"]
    XTP_BUSINESS_TYPE_UNKNOWN = 15,
}
#[repr(u32)]
#[doc = ""]
#[doc = "@brief XTP_ACCOUNT_TYPE\u{8d26}\u{6237}\u{7c7b}\u{578b}"]
#[doc = ""]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum XTP_ACCOUNT_TYPE {
    #[doc = "<\u{666e}\u{901a}\u{8d26}\u{6237}"]
    XTP_ACCOUNT_NORMAL = 0,
    #[doc = "<\u{4fe1}\u{7528}\u{8d26}\u{6237}"]
    XTP_ACCOUNT_CREDIT = 1,
    #[doc = "<\u{884d}\u{751f}\u{54c1}\u{8d26}\u{6237}"]
    XTP_ACCOUNT_DERIVE = 2,
    #[doc = "<\u{672a}\u{77e5}\u{8d26}\u{6237}\u{7c7b}\u{578b}"]
    XTP_ACCOUNT_UNKNOWN = 3,
}
#[repr(u32)]
#[doc = ""]
#[doc = "@brief XTP_FUND_TRANSFER_TYPE\u{662f}\u{8d44}\u{91d1}\u{6d41}\u{8f6c}\u{65b9}\u{5411}\u{7c7b}\u{578b}"]
#[doc = ""]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum XTP_FUND_TRANSFER_TYPE {
    #[doc = "<\u{8f6c}\u{51fa} \u{4ece}XTP\u{8f6c}\u{51fa}\u{5230}\u{67dc}\u{53f0}"]
    XTP_FUND_TRANSFER_OUT = 0,
    #[doc = "<\u{8f6c}\u{5165} \u{4ece}\u{67dc}\u{53f0}\u{8f6c}\u{5165}XTP"]
    XTP_FUND_TRANSFER_IN = 1,
    #[doc = "<\u{8de8}\u{8282}\u{70b9}\u{8f6c}\u{51fa} \u{4ece}\u{672c}XTP\u{8282}\u{70b9}1\u{ff0c}\u{8f6c}\u{51fa}\u{5230}\u{5bf9}\u{7aef}XTP\u{8282}\u{70b9}2\u{ff0c}XTP\u{670d}\u{52a1}\u{5668}\u{4e4b}\u{95f4}\u{5212}\u{62e8}\u{ff0c}\u{53ea}\u{80fd}\u{201c}\u{4e00}\u{8d26}\u{53f7}\u{4e24}\u{4e2d}\u{5fc3}\u{201d}\u{8de8}\u{8282}\u{70b9}\u{7528}\u{6237}\u{4f7f}\u{7528}"]
    XTP_FUND_INTER_TRANSFER_OUT = 2,
    #[doc = "<\u{8de8}\u{8282}\u{70b9}\u{8f6c}\u{5165} \u{4ece}\u{5bf9}\u{7aef}XTP\u{8282}\u{70b9}2\u{ff0c}\u{8f6c}\u{5165}\u{5230}\u{672c}XTP\u{8282}\u{70b9}1\u{ff0c}XTP\u{670d}\u{52a1}\u{5668}\u{4e4b}\u{95f4}\u{5212}\u{62e8}\u{ff0c}\u{53ea}\u{80fd}\u{201c}\u{4e00}\u{8d26}\u{53f7}\u{4e24}\u{4e2d}\u{5fc3}\u{201d}\u{8de8}\u{8282}\u{70b9}\u{7528}\u{6237}\u{4f7f}\u{7528}"]
    XTP_FUND_INTER_TRANSFER_IN = 3,
    #[doc = "<\u{672a}\u{77e5}\u{7c7b}\u{578b}"]
    XTP_FUND_TRANSFER_UNKNOWN = 4,
}
#[repr(u32)]
#[doc = ""]
#[doc = "@brief XTP_FUND_QUERY_TYPE\u{662f}\u{67dc}\u{53f0}\u{8d44}\u{91d1}\u{67e5}\u{8be2}\u{7c7b}\u{578b}"]
#[doc = ""]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum XTP_FUND_QUERY_TYPE {
    #[doc = "<\u{67e5}\u{8be2}\u{91d1}\u{8bc1}\u{4e3b}\u{67dc}\u{53f0}\u{53ef}\u{8f6c}\u{8d44}\u{91d1}"]
    XTP_FUND_QUERY_JZ = 0,
    #[doc = "<\u{67e5}\u{8be2}\u{4e00}\u{8d26}\u{53f7}\u{4e24}\u{4e2d}\u{5fc3}\u{8bbe}\u{7f6e}\u{65f6}\u{ff0c}\u{5bf9}\u{65b9}\u{8282}\u{70b9}\u{7684}\u{8d44}\u{91d1}"]
    XTP_FUND_QUERY_INTERNAL = 1,
    #[doc = "<\u{672a}\u{77e5}\u{7c7b}\u{578b}"]
    XTP_FUND_QUERY_UNKNOWN = 2,
}
#[repr(u32)]
#[doc = ""]
#[doc = "@brief XTP_FUND_OPER_STATUS\u{67dc}\u{53f0}\u{8d44}\u{91d1}\u{64cd}\u{4f5c}\u{7ed3}\u{679c}"]
#[doc = ""]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum XTP_FUND_OPER_STATUS {
    #[doc = "<XTP\u{5df2}\u{6536}\u{5230}\u{ff0c}\u{6b63}\u{5728}\u{5904}\u{7406}\u{4e2d}"]
    XTP_FUND_OPER_PROCESSING = 0,
    #[doc = "<\u{6210}\u{529f}"]
    XTP_FUND_OPER_SUCCESS = 1,
    #[doc = "<\u{5931}\u{8d25}"]
    XTP_FUND_OPER_FAILED = 2,
    #[doc = "<\u{5df2}\u{63d0}\u{4ea4}\u{5230}\u{96c6}\u{4e2d}\u{67dc}\u{53f0}\u{5904}\u{7406}"]
    XTP_FUND_OPER_SUBMITTED = 3,
    #[doc = "<\u{672a}\u{77e5}"]
    XTP_FUND_OPER_UNKNOWN = 4,
}
#[repr(u32)]
#[doc = ""]
#[doc = "@brief XTP_DEBT_EXTEND_OPER_STATUS\u{67dc}\u{53f0}\u{8d1f}\u{503a}\u{5c55}\u{671f}\u{64cd}\u{4f5c}\u{72b6}\u{6001}"]
#[doc = ""]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum XTP_DEBT_EXTEND_OPER_STATUS {
    #[doc = "<XTP\u{5df2}\u{6536}\u{5230}\u{ff0c}\u{6b63}\u{5728}\u{5904}\u{7406}\u{4e2d}"]
    XTP_DEBT_EXTEND_OPER_PROCESSING = 0,
    #[doc = "<\u{5df2}\u{63d0}\u{4ea4}\u{5230}\u{96c6}\u{4e2d}\u{67dc}\u{53f0}\u{5904}\u{7406}"]
    XTP_DEBT_EXTEND_OPER_SUBMITTED = 1,
    #[doc = "<\u{6210}\u{529f}"]
    XTP_DEBT_EXTEND_OPER_SUCCESS = 2,
    #[doc = "<\u{5931}\u{8d25}"]
    XTP_DEBT_EXTEND_OPER_FAILED = 3,
    #[doc = "<\u{672a}\u{77e5}"]
    XTP_DEBT_EXTEND_OPER_UNKNOWN = 4,
}
#[repr(u32)]
#[doc = ""]
#[doc = "@brief XTP_SPLIT_MERGE_STATUS\u{662f}\u{4e00}\u{4e2a}\u{57fa}\u{91d1}\u{5f53}\u{5929}\u{62c6}\u{5206}\u{5408}\u{5e76}\u{72b6}\u{6001}\u{7c7b}\u{578b}"]
#[doc = ""]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum XTP_SPLIT_MERGE_STATUS {
    #[doc = "<\u{5141}\u{8bb8}\u{62c6}\u{5206}\u{548c}\u{5408}\u{5e76}"]
    XTP_SPLIT_MERGE_STATUS_ALLOW = 0,
    #[doc = "<\u{53ea}\u{5141}\u{8bb8}\u{62c6}\u{5206}\u{ff0c}\u{4e0d}\u{5141}\u{8bb8}\u{5408}\u{5e76}"]
    XTP_SPLIT_MERGE_STATUS_ONLY_SPLIT = 1,
    #[doc = "<\u{53ea}\u{5141}\u{8bb8}\u{5408}\u{5e76}\u{ff0c}\u{4e0d}\u{5141}\u{8bb8}\u{62c6}\u{5206}"]
    XTP_SPLIT_MERGE_STATUS_ONLY_MERGE = 2,
    #[doc = "<\u{4e0d}\u{5141}\u{8bb8}\u{62c6}\u{5206}\u{5408}\u{5e76}"]
    XTP_SPLIT_MERGE_STATUS_FORBIDDEN = 3,
}
#[repr(u32)]
#[doc = ""]
#[doc = "@brief XTP_TBT_TYPE\u{662f}\u{4e00}\u{4e2a}\u{9010}\u{7b14}\u{56de}\u{62a5}\u{7c7b}\u{578b}"]
#[doc = ""]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum XTP_TBT_TYPE {
    #[doc = "<\u{9010}\u{7b14}\u{59d4}\u{6258}"]
    XTP_TBT_ENTRUST = 1,
    #[doc = "<\u{9010}\u{7b14}\u{6210}\u{4ea4}"]
    XTP_TBT_TRADE = 2,
    #[doc = "<\u{9010}\u{7b14}\u{72b6}\u{6001}\u{8ba2}\u{5355}\u{ff0c}2.2.32\u{7248}\u{672c}\u{65b0}\u{589e}\u{5b57}\u{6bb5}\u{ff0c}\u{4e3a}\u{4e0a}\u{6d77}\u{65b0}\u{503a}\u{5238}Level2\u{884c}\u{60c5}\u{4e2d}\u{72ec}\u{6709}"]
    XTP_TBT_STATE = 3,
}
#[repr(u32)]
#[doc = ""]
#[doc = "@brief XTP_QUOTE_DATA_TYPE\u{662f}\u{884c}\u{60c5}\u{6570}\u{636e}\u{7c7b}\u{578b} \u{9010}\u{7b14}\u{ff0c}\u{5feb}\u{7167}\u{7b49}"]
#[doc = ""]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum XTP_QUOTE_REBUILD_DATA_TYPE {
    #[doc = "<\u{672a}\u{77e5}\u{7c7b}\u{578b}"]
    XTP_QUOTE_REBUILD_UNKNOW = 0,
    #[doc = "<\u{5feb}\u{7167}\u{7c7b}\u{578b}"]
    XTP_QUOTE_REBUILD_MD = 1,
    #[doc = "<\u{9010}\u{7b14}\u{7c7b}\u{578b}"]
    XTP_QUOTE_REBUILD_TBT = 2,
}
#[repr(u32)]
#[doc = ""]
#[doc = "@brief XTP_REBUILD_RET_TYPE \u{5b9e}\u{65f6}\u{884c}\u{60c5}\u{56de}\u{8865}\u{8fd4}\u{56de}\u{7ed3}\u{679c}\u{7c7b}\u{578b}"]
#[doc = ""]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum XTP_REBUILD_RET_TYPE {
    #[doc = "<\u{5168}\u{90e8}\u{6570}\u{636e}"]
    XTP_REBUILD_RET_COMPLETE = 1,
    #[doc = "<\u{90e8}\u{5206}\u{6570}\u{636e}"]
    XTP_REBUILD_RET_PARTLY = 2,
    #[doc = "<\u{6ca1}\u{6709}\u{6570}\u{636e}"]
    XTP_REBUILD_RET_NO_DATA = 3,
    #[doc = "<\u{53c2}\u{6570}\u{9519}\u{8bef}"]
    XTP_REBUILD_RET_PARAM_ERR = 4,
    #[doc = "<\u{8bf7}\u{6c42}\u{9891}\u{7e41}"]
    XTP_REBUILD_RET_FREQUENTLY = 5,
}
#[repr(u32)]
#[doc = ""]
#[doc = "@brief XTP_OPT_CALL_OR_PUT_TYPE\u{662f}\u{4e00}\u{4e2a}\u{8ba4}\u{6cbd}\u{6216}\u{8ba4}\u{8d2d}\u{7c7b}\u{578b}"]
#[doc = ""]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum XTP_OPT_CALL_OR_PUT_TYPE {
    #[doc = "<\u{8ba4}\u{8d2d}"]
    XTP_OPT_CALL = 1,
    #[doc = "<\u{8ba4}\u{6cbd}"]
    XTP_OPT_PUT = 2,
}
#[repr(u32)]
#[doc = ""]
#[doc = "@brief XTP_OPT_EXERCISE_TYPE_TYPE\u{662f}\u{4e00}\u{4e2a}\u{884c}\u{6743}\u{65b9}\u{5f0f}\u{7c7b}\u{578b}"]
#[doc = ""]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum XTP_OPT_EXERCISE_TYPE_TYPE {
    #[doc = "<\u{6b27}\u{5f0f}"]
    XTP_OPT_EXERCISE_TYPE_EUR = 1,
    #[doc = "<\u{7f8e}\u{5f0f}"]
    XTP_OPT_EXERCISE_TYPE_AME = 2,
}
#[repr(u32)]
#[doc = ""]
#[doc = "@brief XTP_POSITION_DIRECTION_TYPE\u{662f}\u{4e00}\u{4e2a}\u{6301}\u{4ed3}\u{65b9}\u{5411}\u{7c7b}\u{578b}"]
#[doc = ""]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum XTP_POSITION_DIRECTION_TYPE {
    #[doc = "<\u{51c0}"]
    XTP_POSITION_DIRECTION_NET = 0,
    #[doc = "<\u{591a}\u{ff08}\u{671f}\u{6743}\u{5219}\u{4e3a}\u{6743}\u{5229}\u{65b9}\u{ff09}"]
    XTP_POSITION_DIRECTION_LONG = 1,
    #[doc = "<\u{7a7a}\u{ff08}\u{671f}\u{6743}\u{5219}\u{4e3a}\u{4e49}\u{52a1}\u{65b9}\u{ff09}"]
    XTP_POSITION_DIRECTION_SHORT = 2,
    #[doc = "<\u{5907}\u{5151}\u{ff08}\u{671f}\u{6743}\u{5219}\u{4e3a}\u{5907}\u{5151}\u{4e49}\u{52a1}\u{65b9}\u{ff09}"]
    XTP_POSITION_DIRECTION_COVERED = 3,
}
#[repr(u32)]
#[doc = ""]
#[doc = "@brief XTP_OPT_COVERED_OR_UNCOVERED\u{662f}\u{5426}\u{5907}\u{5151}\u{7684}\u{6807}\u{7b7e}"]
#[doc = ""]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum XTP_OPT_COVERED_OR_UNCOVERED {
    #[doc = "<\u{975e}\u{5907}\u{5151}"]
    XTP_POSITION_UNCOVERED = 0,
    #[doc = "<\u{5907}\u{5151}"]
    XTP_POSITION_COVERED = 1,
}
#[repr(u32)]
#[doc = ""]
#[doc = "@brief XTP_CRD_CASH_REPAY_STATUS\u{662f}\u{4e00}\u{4e2a}\u{878d}\u{8d44}\u{878d}\u{5238}\u{76f4}\u{63a5}\u{8fd8}\u{6b3e}\u{72b6}\u{6001}\u{7c7b}\u{578b}"]
#[doc = ""]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum XTP_CRD_CR_STATUS {
    #[doc = "< \u{521d}\u{59cb}\u{3001}\u{672a}\u{5904}\u{7406}\u{72b6}\u{6001}"]
    XTP_CRD_CR_INIT = 0,
    #[doc = "< \u{5df2}\u{6210}\u{529f}\u{5904}\u{7406}\u{72b6}\u{6001}"]
    XTP_CRD_CR_SUCCESS = 1,
    #[doc = "< \u{5904}\u{7406}\u{5931}\u{8d25}\u{72b6}\u{6001}"]
    XTP_CRD_CR_FAILED = 2,
}
#[repr(u32)]
#[doc = ""]
#[doc = "@brief XTP_OPT_POSITION_TYPE\u{662f}\u{4e00}\u{4e2a}\u{671f}\u{6743}\u{6301}\u{4ed3}\u{7c7b}\u{578b}"]
#[doc = ""]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum XTP_OPT_POSITION_TYPE {
    #[doc = "< \u{5355}\u{5408}\u{7ea6}\u{6301}\u{4ed3}"]
    XTP_OPT_POSITION_TYPE_CONTRACT = 0,
    #[doc = "< \u{7ec4}\u{5408}\u{7b56}\u{7565}\u{6301}\u{4ed3}"]
    XTP_OPT_POSITION_TYPE_COMBINED = 1,
}
#[repr(u32)]
#[doc = ""]
#[doc = "@brief XTP_ORDER_TYPE\u{662f}\u{4e00}\u{4e2a}\u{8ba2}\u{5355}\u{7684}\u{7c7b}\u{578b}"]
#[doc = ""]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum XTP_ORDER_DETAIL_TYPE {
    #[doc = "< \u{65b0}\u{8ba2}\u{5355}"]
    XTP_ORDER_DETAIL_TYPE_NEW_ORDER = 0,
    #[doc = "< \u{65b0}\u{8ba2}\u{5355}\u{64a4}\u{5355}"]
    XTP_ORDER_DETAIL_TYPE_CANCEL_ORDER = 1,
    #[doc = "< \u{7ec4}\u{5408}\u{8ba2}\u{5355}"]
    XTP_ORDER_DETAIL_TYPE_OPT_COMB_NEW_ORDER = 2,
    #[doc = "< \u{7ec4}\u{5408}\u{8ba2}\u{5355}\u{64a4}\u{5355}"]
    XTP_ORDER_DETAIL_TYPE_OPT_COMB_CANCEL_ORDER = 3,
}
#[repr(u32)]
#[doc = ""]
#[doc = "@brief XTPTerminalType\u{662f}\u{4e00}\u{79cd}\u{7ec8}\u{7aef}\u{7c7b}\u{578b}\u{679a}\u{4e3e}\u{ff0c}\u{4ec5}\u{4f9b}\u{6388}\u{6743}\u{7cfb}\u{7edf}\u{4f7f}\u{7528}"]
#[doc = ""]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum XTPTerminalType {
    #[doc = "<\"PC\",PC-windows\u{53ca}MacOS"]
    XTP_TERMINAL_PC = 1,
    #[doc = "<\"MA\",Mobile-Android"]
    XTP_TERMINAL_ANDROID = 2,
    #[doc = "<\"MI\",Mobile-Ios"]
    XTP_TERMINAL_IOS = 3,
    #[doc = "<\"MW\",Mobile-Windows Phone"]
    XTP_TERMINAL_WP = 4,
    #[doc = "<\"WP\",\u{65e0}\u{76d8}\u{7ad9}"]
    XTP_TERMINAL_STATION = 5,
    #[doc = "<\"TO\",\u{7535}\u{8bdd}\u{59d4}\u{6258}"]
    XTP_TERMINAL_TEL = 6,
    #[doc = "<\"OH\",PC-linux\u{53ca}\u{5176}\u{4ed6}\u{7ec8}\u{7aef}"]
    XTP_TERMINAL_PC_LINUX = 7,
}
#[repr(u32)]
#[doc = ""]
#[doc = "@brief XTP_EXPIRE_DATE_TYPE\u{662f}\u{4e00}\u{4e2a}\u{671f}\u{6743}\u{7ec4}\u{5408}\u{7b56}\u{7565}\u{5408}\u{7ea6}\u{5230}\u{671f}\u{65e5}\u{8981}\u{6c42}\u{7c7b}\u{578b}"]
#[doc = ""]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum XTP_EXPIRE_DATE_TYPE {
    #[doc = "< \u{76f8}\u{540c}\u{5230}\u{671f}\u{65e5}"]
    XTP_EXP_DATE_SAME = 0,
    #[doc = "< \u{4e0d}\u{540c}\u{5230}\u{671f}\u{65e5}"]
    XTP_EXP_DATE_DIFF = 1,
    #[doc = "< \u{65e0}\u{5230}\u{671f}\u{65e5}\u{8981}\u{6c42}"]
    XTP_EXP_DATE_NON = 2,
}
#[repr(u32)]
#[doc = ""]
#[doc = "@brief XTP_UNDERLYING_TYPE\u{662f}\u{4e00}\u{4e2a}\u{671f}\u{6743}\u{7ec4}\u{5408}\u{7b56}\u{7565}\u{6807}\u{7684}\u{8981}\u{6c42}\u{7c7b}\u{578b}"]
#[doc = ""]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum XTP_UNDERLYING_TYPE {
    #[doc = "<\u{76f8}\u{540c}\u{6807}\u{7684}"]
    XTP_UNDERLYING_SAME = 0,
    #[doc = "<\u{4e0d}\u{540c}\u{6807}\u{7684}"]
    XTP_UNDERLYING_DIFF = 1,
    #[doc = "<\u{65e0}\u{6807}\u{7684}\u{8981}\u{6c42}"]
    XTP_UNDERLYING_NON = 2,
}
#[repr(u32)]
#[doc = ""]
#[doc = "@brief XTP_AUTO_SPLIT_TYPE\u{662f}\u{4e00}\u{4e2a}\u{671f}\u{6743}\u{7ec4}\u{5408}\u{7b56}\u{7565}\u{81ea}\u{52a8}\u{89e3}\u{9664}\u{679a}\u{4e3e}\u{7c7b}\u{578b}"]
#[doc = ""]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum XTP_AUTO_SPLIT_TYPE {
    #[doc = "<\u{5230}\u{671f}\u{65e5}\u{81ea}\u{52a8}\u{89e3}\u{9664}"]
    XTP_AUTO_SPLIT_EXPDAY = 0,
    #[doc = "<E-1\u{65e5}\u{81ea}\u{52a8}\u{89e3}\u{9664}"]
    XTP_AUTO_SPLIT_PREDAY = 1,
    #[doc = "<E-2\u{65e5}\u{81ea}\u{52a8}\u{89e3}\u{9664}"]
    XTP_AUTO_SPLIT_PRE2DAY = 2,
    #[doc = "<\u{65e0}\u{6548}\u{503c}"]
    XTP_AUTO_SPLIT_NON = 3,
}
#[doc = "\u{884c}\u{6743}\u{4ef7}\u{987a}\u{5e8f}\u{7c7b}\u{578b}\u{ff0c} \u{4ece}1\u{5f00}\u{59cb}\u{ff0c}1\u{8868}\u{793a}\u{884c}\u{6743}\u{4ef7}\u{6700}\u{9ad8}\u{ff0c}2\u{6b21}\u{4e4b}\u{3002}\u{5982}\u{679c}\u{884c}\u{6743}\u{4ef7}\u{76f8}\u{540c}\u{ff0c}\u{5219}\u{586b}\u{5199}\u{76f8}\u{540c}\u{6570}\u{5b57}\u{ff0c}\u{7528}A\u{8868}\u{793a}\u{884c}\u{6743}\u{4ef7}\u{5927}\u{4e8e}\u{7b49}\u{4e8e}B\u{ff0c}B\u{5927}\u{4e8e}\u{7b49}\u{4e8e}C\u{4f9d}\u{6b21}\u{7c7b}\u{63a8}\u{ff08}C\u{3001}D\u{ff09}"]
pub type TXTPExerciseSeqType = ::std::os::raw::c_char;
#[repr(u32)]
#[doc = ""]
#[doc = "@brief XTP_QUALIFICATION_TYPE\u{662f}\u{4e00}\u{4e2a}\u{8bc1}\u{5238}\u{9002}\u{5f53}\u{6027}\u{679a}\u{4e3e}\u{7c7b}\u{578b}"]
#[doc = ""]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum XTP_QUALIFICATION_TYPE {
    #[doc = "<\u{516c}\u{4f17}\u{6295}\u{8d44}\u{8005}\u{ff0c}\u{5408}\u{683c}\u{6295}\u{8d44}\u{8005}\u{4e0e}\u{673a}\u{6784}\u{6295}\u{8d44}\u{8005}\u{5747}\u{53ef}"]
    XTP_QUALIFICATION_PUBLIC = 0,
    #[doc = "<\u{4ec5}\u{5408}\u{683c}\u{6295}\u{8d44}\u{8005}\u{4e0e}\u{516c}\u{4f17}\u{6295}\u{8d44}\u{8005}"]
    XTP_QUALIFICATION_COMMON = 1,
    #[doc = "<\u{4ec5}\u{9650}\u{673a}\u{6784}\u{6295}\u{8d44}\u{8005}"]
    XTP_QUALIFICATION_ORGANIZATION = 2,
    #[doc = "<\u{672a}\u{77e5}\u{ff0c}\u{671f}\u{6743}\u{7b49}\u{53ef}\u{80fd}\u{4e3a}\u{6b64}\u{79cd}\u{7c7b}\u{578b}"]
    XTP_QUALIFICATION_UNKNOWN = 3,
}
#[repr(u32)]
#[doc = ""]
#[doc = "@brief XTP_SECURITY_TYPE\u{662f}\u{4e00}\u{4e2a}\u{8bc1}\u{5238}\u{8be6}\u{7ec6}\u{5206}\u{7c7b}\u{679a}\u{4e3e}\u{7c7b}\u{578b}"]
#[doc = ""]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum XTP_SECURITY_TYPE {
    #[doc = " \u{4e3b}\u{677f}\u{80a1}\u{7968}"]
    XTP_SECURITY_MAIN_BOARD = 0,
    #[doc = " \u{4e2d}\u{5c0f}\u{677f}\u{80a1}\u{7968}"]
    XTP_SECURITY_SECOND_BOARD = 1,
    #[doc = " \u{521b}\u{4e1a}\u{677f}\u{80a1}\u{7968}"]
    XTP_SECURITY_STARTUP_BOARD = 2,
    #[doc = " \u{6307}\u{6570}"]
    XTP_SECURITY_INDEX = 3,
    #[doc = " \u{79d1}\u{521b}\u{677f}\u{80a1}\u{7968}(\u{4e0a}\u{6d77})"]
    XTP_SECURITY_TECH_BOARD = 4,
    #[doc = " \u{56fd}\u{503a}"]
    XTP_SECURITY_STATE_BOND = 5,
    #[doc = " \u{4f01}\u{4e1a}\u{503a}"]
    XTP_SECURITY_ENTERPRICE_BOND = 6,
    #[doc = " \u{516c}\u{53f8}\u{503a}"]
    XTP_SECURITY_COMPANEY_BOND = 7,
    #[doc = " \u{8f6c}\u{6362}\u{503a}\u{5238}"]
    XTP_SECURITY_CONVERTABLE_BOND = 8,
    #[doc = " \u{56fd}\u{503a}\u{9006}\u{56de}\u{8d2d}"]
    XTP_SECURITY_NATIONAL_BOND_REVERSE_REPO = 12,
    #[doc = " \u{672c}\u{5e02}\u{573a}\u{80a1}\u{7968} ETF"]
    XTP_SECURITY_ETF_SINGLE_MARKET_STOCK = 14,
    #[doc = " \u{8de8}\u{5e02}\u{573a}\u{80a1}\u{7968} ETF"]
    XTP_SECURITY_ETF_INTER_MARKET_STOCK = 15,
    #[doc = " \u{8de8}\u{5e02}\u{573a}\u{80a1}\u{7968} ETF"]
    XTP_SECURITY_ETF_CROSS_BORDER_STOCK = 16,
    #[doc = " \u{672c}\u{5e02}\u{573a}\u{5b9e}\u{7269}\u{503a}\u{5238} ETF"]
    XTP_SECURITY_ETF_SINGLE_MARKET_BOND = 17,
    #[doc = " \u{9ec4}\u{91d1} ETF"]
    XTP_SECURITY_ETF_GOLD = 19,
    #[doc = " \u{5206}\u{7ea7}\u{57fa}\u{91d1}\u{5b50}\u{57fa}\u{91d1}"]
    XTP_SECURITY_STRUCTURED_FUND_CHILD = 24,
    #[doc = " \u{6df1}\u{4ea4}\u{6240}\u{4ec5}\u{7533}\u{8d4e}\u{57fa}\u{91d1}"]
    XTP_SECURITY_SZSE_RECREATION_FUND = 26,
    #[doc = " \u{4e2a}\u{80a1}\u{671f}\u{6743}"]
    XTP_SECURITY_STOCK_OPTION = 29,
    #[doc = " ETF\u{671f}\u{6743}"]
    XTP_SECURITY_ETF_OPTION = 30,
    #[doc = " \u{914d}\u{80a1}"]
    XTP_SECURITY_ALLOTMENT = 100,
    #[doc = " \u{4e0a}\u{4ea4}\u{6240}\u{7533}\u{8d4e}\u{578b}\u{8d27}\u{5e01}\u{57fa}\u{91d1}"]
    XTP_SECURITY_MONETARY_FUND_SHCR = 110,
    #[doc = " \u{4e0a}\u{4ea4}\u{6240}\u{4ea4}\u{6613}\u{578b}\u{8d27}\u{5e01}\u{57fa}\u{91d1}"]
    XTP_SECURITY_MONETARY_FUND_SHTR = 111,
    #[doc = " \u{6df1}\u{4ea4}\u{6240}\u{8d27}\u{5e01}\u{57fa}\u{91d1}"]
    XTP_SECURITY_MONETARY_FUND_SZ = 112,
    #[doc = " \u{5176}\u{4ed6}"]
    XTP_SECURITY_OTHERS = 255,
}
#[repr(u32)]
#[doc = ""]
#[doc = "@brief XTP_POSITION_SECURITY_TYPE\u{662f}\u{4e00}\u{4e2a}\u{6301}\u{4ed3}\u{8bc1}\u{5238}\u{679a}\u{4e3e}\u{7c7b}\u{578b}"]
#[doc = ""]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum XTP_POSITION_SECURITY_TYPE {
    #[doc = "<\u{666e}\u{901a}\u{6301}\u{4ed3}"]
    XTP_POSITION_SECURITY_NORMAL = 0,
    #[doc = "<\u{914d}\u{552e}\u{7c7b}\u{578b}\u{7684}\u{6301}\u{4ed3}\u{ff0c}\u{5305}\u{542b}\u{914d}\u{80a1}\u{3001}\u{914d}\u{503a}\u{7b49}"]
    XTP_POSITION_SECURITY_PLACEMENT = 1,
    #[doc = "<\u{672a}\u{77e5}\u{7c7b}\u{578b}"]
    XTP_POSITION_SECURITY_UNKNOWN = 2,
}
#[repr(u32)]
#[doc = ""]
#[doc = "@brief XTP_SECURITY_STATUS\u{662f}\u{4e00}\u{4e2a}\u{8bc1}\u{5238}\u{72b6}\u{6001}\u{679a}\u{4e3e}\u{7c7b}\u{578b}"]
#[doc = ""]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum XTP_SECURITY_STATUS {
    #[doc = "< \u{98ce}\u{9669}\u{8b66}\u{793a}\u{677f}"]
    XTP_SECURITY_STATUS_ST = 0,
    #[doc = "< \u{9996}\u{65e5}\u{4e0a}\u{5e02}"]
    XTP_SECURITY_STATUS_N_IPO = 1,
    #[doc = "< \u{666e}\u{901a}"]
    XTP_SECURITY_STATUS_COMMON = 2,
    #[doc = "< \u{6062}\u{590d}\u{4e0a}\u{5e02}"]
    XTP_SECURITY_STATUS_RESUME = 3,
    #[doc = "< \u{9000}\u{5e02}\u{6574}\u{7406}\u{671f}"]
    XTP_SECURITY_STATUS_DELISTING = 10,
    #[doc = "< \u{5176}\u{4ed6}"]
    XTP_SECURITY_STATUS_OTHERS = 255,
}
#[doc = "\u{54cd}\u{5e94}\u{4fe1}\u{606f}"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPRspInfoStruct {
    #[doc = "\u{9519}\u{8bef}\u{4ee3}\u{7801}"]
    pub error_id: i32,
    #[doc = "\u{9519}\u{8bef}\u{4fe1}\u{606f}"]
    pub error_msg: [::std::os::raw::c_char; 124usize],
}
#[test]
fn bindgen_test_layout_XTPRspInfoStruct() {
    assert_eq!(
        ::std::mem::size_of::<XTPRspInfoStruct>(),
        128usize,
        concat!("Size of: ", stringify!(XTPRspInfoStruct))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPRspInfoStruct>(),
        4usize,
        concat!("Alignment of ", stringify!(XTPRspInfoStruct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPRspInfoStruct>())).error_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPRspInfoStruct),
            "::",
            stringify!(error_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPRspInfoStruct>())).error_msg as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPRspInfoStruct),
            "::",
            stringify!(error_msg)
        )
    );
}
impl Default for XTPRspInfoStruct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "\u{54cd}\u{5e94}\u{4fe1}\u{606f}"]
pub type XTPRI = XTPRspInfoStruct;
#[doc = "\u{6307}\u{5b9a}\u{7684}\u{5408}\u{7ea6}"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPSpecificTickerStruct {
    #[doc = "\u{4ea4}\u{6613}\u{6240}\u{4ee3}\u{7801}"]
    pub exchange_id: XTP_EXCHANGE_TYPE,
    #[doc = "\u{5408}\u{7ea6}\u{4ee3}\u{7801}\u{ff08}\u{4e0d}\u{5305}\u{542b}\u{4ea4}\u{6613}\u{6240}\u{4fe1}\u{606f}\u{ff09}\u{4f8b}\u{5982}\"600000\"\u{ff0c}\u{4e0d}\u{5e26}\u{7a7a}\u{683c}\u{ff0c}\u{4ee5}'\\0'\u{7ed3}\u{5c3e}"]
    pub ticker: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_XTPSpecificTickerStruct() {
    assert_eq!(
        ::std::mem::size_of::<XTPSpecificTickerStruct>(),
        20usize,
        concat!("Size of: ", stringify!(XTPSpecificTickerStruct))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPSpecificTickerStruct>(),
        4usize,
        concat!("Alignment of ", stringify!(XTPSpecificTickerStruct))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPSpecificTickerStruct>())).exchange_id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPSpecificTickerStruct),
            "::",
            stringify!(exchange_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPSpecificTickerStruct>())).ticker as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPSpecificTickerStruct),
            "::",
            stringify!(ticker)
        )
    );
}
impl Default for XTPSpecificTickerStruct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "\u{6307}\u{5b9a}\u{7684}\u{5408}\u{7ea6}"]
pub type XTPST = XTPSpecificTickerStruct;
#[doc = "\u{80a1}\u{7968}\u{3001}\u{57fa}\u{91d1} \u{7b49}\u{989d}\u{5916}\u{6570}\u{636e}"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct XTPMarketDataStockExData {
    #[doc = "\u{59d4}\u{6258}\u{4e70}\u{5165}\u{603b}\u{91cf}(SH,SZ)"]
    pub total_bid_qty: i64,
    #[doc = "\u{59d4}\u{6258}\u{5356}\u{51fa}\u{603b}\u{91cf}(SH,SZ)"]
    pub total_ask_qty: i64,
    #[doc = "\u{52a0}\u{6743}\u{5e73}\u{5747}\u{59d4}\u{4e70}\u{4ef7}\u{683c}(SH,SZ)"]
    pub ma_bid_price: f64,
    #[doc = "\u{52a0}\u{6743}\u{5e73}\u{5747}\u{59d4}\u{5356}\u{4ef7}\u{683c}(SH,SZ)"]
    pub ma_ask_price: f64,
    #[doc = "\u{503a}\u{5238}\u{52a0}\u{6743}\u{5e73}\u{5747}\u{59d4}\u{4e70}\u{4ef7}\u{683c}(SH)"]
    pub ma_bond_bid_price: f64,
    #[doc = "\u{503a}\u{5238}\u{52a0}\u{6743}\u{5e73}\u{5747}\u{59d4}\u{5356}\u{4ef7}\u{683c}(SH)"]
    pub ma_bond_ask_price: f64,
    #[doc = "\u{503a}\u{5238}\u{5230}\u{671f}\u{6536}\u{76ca}\u{7387}(SH)"]
    pub yield_to_maturity: f64,
    #[doc = "\u{57fa}\u{91d1}\u{5b9e}\u{65f6}\u{53c2}\u{8003}\u{51c0}\u{503c}(SH,SZ)"]
    pub iopv: f64,
    #[doc = "ETF\u{7533}\u{8d2d}\u{7b14}\u{6570}(SH)"]
    pub etf_buy_count: i32,
    #[doc = "ETF\u{8d4e}\u{56de}\u{7b14}\u{6570}(SH)"]
    pub etf_sell_count: i32,
    #[doc = "ETF\u{7533}\u{8d2d}\u{6570}\u{91cf}(SH)"]
    pub etf_buy_qty: f64,
    #[doc = "ETF\u{7533}\u{8d2d}\u{91d1}\u{989d}(SH)"]
    pub etf_buy_money: f64,
    #[doc = "ETF\u{8d4e}\u{56de}\u{6570}\u{91cf}(SH)"]
    pub etf_sell_qty: f64,
    #[doc = "ETF\u{8d4e}\u{56de}\u{91d1}\u{989d}(SH)"]
    pub etf_sell_money: f64,
    #[doc = "\u{6743}\u{8bc1}\u{6267}\u{884c}\u{7684}\u{603b}\u{6570}\u{91cf}(SH)"]
    pub total_warrant_exec_qty: f64,
    #[doc = "\u{6743}\u{8bc1}\u{8dcc}\u{505c}\u{4ef7}\u{683c}\u{ff08}\u{5143}\u{ff09}(SH)"]
    pub warrant_lower_price: f64,
    #[doc = "\u{6743}\u{8bc1}\u{6da8}\u{505c}\u{4ef7}\u{683c}\u{ff08}\u{5143}\u{ff09}(SH)"]
    pub warrant_upper_price: f64,
    #[doc = "\u{4e70}\u{5165}\u{64a4}\u{5355}\u{7b14}\u{6570}(SH)"]
    pub cancel_buy_count: i32,
    #[doc = "\u{5356}\u{51fa}\u{64a4}\u{5355}\u{7b14}\u{6570}(SH)"]
    pub cancel_sell_count: i32,
    #[doc = "\u{4e70}\u{5165}\u{64a4}\u{5355}\u{6570}\u{91cf}(SH)"]
    pub cancel_buy_qty: f64,
    #[doc = "\u{5356}\u{51fa}\u{64a4}\u{5355}\u{6570}\u{91cf}(SH)"]
    pub cancel_sell_qty: f64,
    #[doc = "\u{4e70}\u{5165}\u{64a4}\u{5355}\u{91d1}\u{989d}(SH)"]
    pub cancel_buy_money: f64,
    #[doc = "\u{5356}\u{51fa}\u{64a4}\u{5355}\u{91d1}\u{989d}(SH)"]
    pub cancel_sell_money: f64,
    #[doc = "\u{4e70}\u{5165}\u{603b}\u{7b14}\u{6570}(SH)"]
    pub total_buy_count: i64,
    #[doc = "\u{5356}\u{51fa}\u{603b}\u{7b14}\u{6570}(SH)"]
    pub total_sell_count: i64,
    #[doc = "\u{4e70}\u{5165}\u{59d4}\u{6258}\u{6210}\u{4ea4}\u{6700}\u{5927}\u{7b49}\u{5f85}\u{65f6}\u{95f4}(SH)"]
    pub duration_after_buy: i32,
    #[doc = "\u{5356}\u{51fa}\u{59d4}\u{6258}\u{6210}\u{4ea4}\u{6700}\u{5927}\u{7b49}\u{5f85}\u{65f6}\u{95f4}(SH)"]
    pub duration_after_sell: i32,
    #[doc = "\u{4e70}\u{65b9}\u{59d4}\u{6258}\u{4ef7}\u{4f4d}\u{6570}(SH)"]
    pub num_bid_orders: i32,
    #[doc = "\u{5356}\u{65b9}\u{59d4}\u{6258}\u{4ef7}\u{4f4d}\u{6570}(SH)"]
    pub num_ask_orders: i32,
    #[doc = "\u{57fa}\u{91d1}T-1\u{65e5}\u{51c0}\u{503c}(SZ)"]
    pub pre_iopv: f64,
    #[doc = "\u{9884}\u{7559}"]
    pub r1: i64,
    #[doc = "\u{9884}\u{7559}"]
    pub r2: i64,
}
#[test]
fn bindgen_test_layout_XTPMarketDataStockExData() {
    assert_eq!(
        ::std::mem::size_of::<XTPMarketDataStockExData>(),
        224usize,
        concat!("Size of: ", stringify!(XTPMarketDataStockExData))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPMarketDataStockExData>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPMarketDataStockExData))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).total_bid_qty as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(total_bid_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).total_ask_qty as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(total_ask_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).ma_bid_price as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(ma_bid_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).ma_ask_price as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(ma_ask_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).ma_bond_bid_price as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(ma_bond_bid_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).ma_bond_ask_price as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(ma_bond_ask_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).yield_to_maturity as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(yield_to_maturity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStockExData>())).iopv as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(iopv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).etf_buy_count as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(etf_buy_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).etf_sell_count as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(etf_sell_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).etf_buy_qty as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(etf_buy_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).etf_buy_money as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(etf_buy_money)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).etf_sell_qty as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(etf_sell_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).etf_sell_money as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(etf_sell_money)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).total_warrant_exec_qty as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(total_warrant_exec_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).warrant_lower_price as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(warrant_lower_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).warrant_upper_price as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(warrant_upper_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).cancel_buy_count as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(cancel_buy_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).cancel_sell_count as *const _
                as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(cancel_sell_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).cancel_buy_qty as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(cancel_buy_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).cancel_sell_qty as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(cancel_sell_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).cancel_buy_money as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(cancel_buy_money)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).cancel_sell_money as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(cancel_sell_money)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).total_buy_count as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(total_buy_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).total_sell_count as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(total_sell_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).duration_after_buy as *const _
                as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(duration_after_buy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).duration_after_sell as *const _
                as usize
        },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(duration_after_sell)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).num_bid_orders as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(num_bid_orders)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).num_ask_orders as *const _ as usize
        },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(num_ask_orders)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).pre_iopv as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(pre_iopv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStockExData>())).r1 as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(r1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStockExData>())).r2 as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(r2)
        )
    );
}
#[doc = "\u{503a}\u{5238}\u{989d}\u{5916}\u{6570}\u{636e}"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct XTPMarketDataBondExData {
    #[doc = "\u{59d4}\u{6258}\u{4e70}\u{5165}\u{603b}\u{91cf}(SH,SZ)"]
    pub total_bid_qty: i64,
    #[doc = "\u{59d4}\u{6258}\u{5356}\u{51fa}\u{603b}\u{91cf}(SH,SZ)"]
    pub total_ask_qty: i64,
    #[doc = "\u{52a0}\u{6743}\u{5e73}\u{5747}\u{59d4}\u{4e70}\u{4ef7}\u{683c}(SH,SZ)"]
    pub ma_bid_price: f64,
    #[doc = "\u{52a0}\u{6743}\u{5e73}\u{5747}\u{59d4}\u{5356}\u{4ef7}\u{683c}(SH,SZ)"]
    pub ma_ask_price: f64,
    #[doc = "\u{503a}\u{5238}\u{52a0}\u{6743}\u{5e73}\u{5747}\u{59d4}\u{4e70}\u{4ef7}\u{683c}(SH)"]
    pub ma_bond_bid_price: f64,
    #[doc = "\u{503a}\u{5238}\u{52a0}\u{6743}\u{5e73}\u{5747}\u{59d4}\u{5356}\u{4ef7}\u{683c}(SH)"]
    pub ma_bond_ask_price: f64,
    #[doc = "\u{503a}\u{5238}\u{5230}\u{671f}\u{6536}\u{76ca}\u{7387}(SH)"]
    pub yield_to_maturity: f64,
    #[doc = "\u{5339}\u{914d}\u{6210}\u{4ea4}\u{6700}\u{8fd1}\u{4ef7}(SZ)"]
    pub match_lastpx: f64,
    #[doc = "\u{503a}\u{5238}\u{52a0}\u{6743}\u{5e73}\u{5747}\u{4ef7}\u{683c}(SH)"]
    pub ma_bond_price: f64,
    #[doc = "\u{9884}\u{7559}"]
    pub r2: f64,
    #[doc = "\u{9884}\u{7559}"]
    pub r3: f64,
    #[doc = "\u{9884}\u{7559}"]
    pub r4: f64,
    #[doc = "\u{9884}\u{7559}"]
    pub r5: f64,
    #[doc = "\u{9884}\u{7559}"]
    pub r6: f64,
    #[doc = "\u{9884}\u{7559}"]
    pub r7: f64,
    #[doc = "\u{9884}\u{7559}"]
    pub r8: f64,
    #[doc = "\u{4e70}\u{5165}\u{64a4}\u{5355}\u{7b14}\u{6570}(SH)"]
    pub cancel_buy_count: i32,
    #[doc = "\u{5356}\u{51fa}\u{64a4}\u{5355}\u{7b14}\u{6570}(SH)"]
    pub cancel_sell_count: i32,
    #[doc = "\u{4e70}\u{5165}\u{64a4}\u{5355}\u{6570}\u{91cf}(SH)"]
    pub cancel_buy_qty: f64,
    #[doc = "\u{5356}\u{51fa}\u{64a4}\u{5355}\u{6570}\u{91cf}(SH)"]
    pub cancel_sell_qty: f64,
    #[doc = "\u{4e70}\u{5165}\u{64a4}\u{5355}\u{91d1}\u{989d}(SH)"]
    pub cancel_buy_money: f64,
    #[doc = "\u{5356}\u{51fa}\u{64a4}\u{5355}\u{91d1}\u{989d}(SH)"]
    pub cancel_sell_money: f64,
    #[doc = "\u{4e70}\u{5165}\u{603b}\u{7b14}\u{6570}(SH)"]
    pub total_buy_count: i64,
    #[doc = "\u{5356}\u{51fa}\u{603b}\u{7b14}\u{6570}(SH)"]
    pub total_sell_count: i64,
    #[doc = "\u{4e70}\u{5165}\u{59d4}\u{6258}\u{6210}\u{4ea4}\u{6700}\u{5927}\u{7b49}\u{5f85}\u{65f6}\u{95f4}(SH)"]
    pub duration_after_buy: i32,
    #[doc = "\u{5356}\u{51fa}\u{59d4}\u{6258}\u{6210}\u{4ea4}\u{6700}\u{5927}\u{7b49}\u{5f85}\u{65f6}\u{95f4}(SH)"]
    pub duration_after_sell: i32,
    #[doc = "\u{4e70}\u{65b9}\u{59d4}\u{6258}\u{4ef7}\u{4f4d}\u{6570}(SH)"]
    pub num_bid_orders: i32,
    #[doc = "\u{5356}\u{65b9}\u{59d4}\u{6258}\u{4ef7}\u{4f4d}\u{6570}(SH)"]
    pub num_ask_orders: i32,
    #[doc = "\u{65f6}\u{6bb5}(SHL2)\u{ff0c}L1\u{5feb}\u{7167}\u{6570}\u{636e}\u{6ca1}\u{6709}\u{6b64}\u{5b57}\u{6bb5}\u{ff0c}\u{5177}\u{4f53}\u{5b57}\u{6bb5}\u{8bf4}\u{660e}\u{53c2}\u{9605}\u{300a}\u{4e0a}\u{6d77}\u{65b0}\u{503a}\u{5238}Level2\u{884c}\u{60c5}\u{8bf4}\u{660e}.doc\u{300b}\u{6587}\u{6863}"]
    pub instrument_status: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout_XTPMarketDataBondExData() {
    assert_eq!(
        ::std::mem::size_of::<XTPMarketDataBondExData>(),
        208usize,
        concat!("Size of: ", stringify!(XTPMarketDataBondExData))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPMarketDataBondExData>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPMarketDataBondExData))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataBondExData>())).total_bid_qty as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataBondExData),
            "::",
            stringify!(total_bid_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataBondExData>())).total_ask_qty as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataBondExData),
            "::",
            stringify!(total_ask_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataBondExData>())).ma_bid_price as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataBondExData),
            "::",
            stringify!(ma_bid_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataBondExData>())).ma_ask_price as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataBondExData),
            "::",
            stringify!(ma_ask_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataBondExData>())).ma_bond_bid_price as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataBondExData),
            "::",
            stringify!(ma_bond_bid_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataBondExData>())).ma_bond_ask_price as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataBondExData),
            "::",
            stringify!(ma_bond_ask_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataBondExData>())).yield_to_maturity as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataBondExData),
            "::",
            stringify!(yield_to_maturity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataBondExData>())).match_lastpx as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataBondExData),
            "::",
            stringify!(match_lastpx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataBondExData>())).ma_bond_price as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataBondExData),
            "::",
            stringify!(ma_bond_price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataBondExData>())).r2 as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataBondExData),
            "::",
            stringify!(r2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataBondExData>())).r3 as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataBondExData),
            "::",
            stringify!(r3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataBondExData>())).r4 as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataBondExData),
            "::",
            stringify!(r4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataBondExData>())).r5 as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataBondExData),
            "::",
            stringify!(r5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataBondExData>())).r6 as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataBondExData),
            "::",
            stringify!(r6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataBondExData>())).r7 as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataBondExData),
            "::",
            stringify!(r7)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataBondExData>())).r8 as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataBondExData),
            "::",
            stringify!(r8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataBondExData>())).cancel_buy_count as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataBondExData),
            "::",
            stringify!(cancel_buy_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataBondExData>())).cancel_sell_count as *const _
                as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataBondExData),
            "::",
            stringify!(cancel_sell_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataBondExData>())).cancel_buy_qty as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataBondExData),
            "::",
            stringify!(cancel_buy_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataBondExData>())).cancel_sell_qty as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataBondExData),
            "::",
            stringify!(cancel_sell_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataBondExData>())).cancel_buy_money as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataBondExData),
            "::",
            stringify!(cancel_buy_money)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataBondExData>())).cancel_sell_money as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataBondExData),
            "::",
            stringify!(cancel_sell_money)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataBondExData>())).total_buy_count as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataBondExData),
            "::",
            stringify!(total_buy_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataBondExData>())).total_sell_count as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataBondExData),
            "::",
            stringify!(total_sell_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataBondExData>())).duration_after_buy as *const _
                as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataBondExData),
            "::",
            stringify!(duration_after_buy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataBondExData>())).duration_after_sell as *const _
                as usize
        },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataBondExData),
            "::",
            stringify!(duration_after_sell)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataBondExData>())).num_bid_orders as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataBondExData),
            "::",
            stringify!(num_bid_orders)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataBondExData>())).num_ask_orders as *const _ as usize
        },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataBondExData),
            "::",
            stringify!(num_ask_orders)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataBondExData>())).instrument_status as *const _
                as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataBondExData),
            "::",
            stringify!(instrument_status)
        )
    );
}
#[doc = " \u{671f}\u{6743}\u{989d}\u{5916}\u{6570}\u{636e}"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct XTPMarketDataOptionExData {
    #[doc = "\u{6ce2}\u{6bb5}\u{6027}\u{4e2d}\u{65ad}\u{53c2}\u{8003}\u{4ef7}(SH)"]
    pub auction_price: f64,
    #[doc = "\u{6ce2}\u{6bb5}\u{6027}\u{4e2d}\u{65ad}\u{96c6}\u{5408}\u{7ade}\u{4ef7}\u{865a}\u{62df}\u{5339}\u{914d}\u{91cf}(SH)"]
    pub auction_qty: i64,
    #[doc = "\u{6700}\u{8fd1}\u{8be2}\u{4ef7}\u{65f6}\u{95f4}(SH)"]
    pub last_enquiry_time: i64,
}
#[test]
fn bindgen_test_layout_XTPMarketDataOptionExData() {
    assert_eq!(
        ::std::mem::size_of::<XTPMarketDataOptionExData>(),
        24usize,
        concat!("Size of: ", stringify!(XTPMarketDataOptionExData))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPMarketDataOptionExData>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPMarketDataOptionExData))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataOptionExData>())).auction_price as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataOptionExData),
            "::",
            stringify!(auction_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataOptionExData>())).auction_qty as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataOptionExData),
            "::",
            stringify!(auction_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataOptionExData>())).last_enquiry_time as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataOptionExData),
            "::",
            stringify!(last_enquiry_time)
        )
    );
}
#[repr(u32)]
#[doc = ""]
#[doc = "@brief XTP_MARKETDATA_TYPE\u{662f}\u{884c}\u{60c5}\u{5feb}\u{7167}\u{6570}\u{636e}\u{7c7b}\u{578b}\u{ff0c}2.2.32\u{4ee5}\u{524d}\u{7248}\u{672c}\u{6240}\u{7528}"]
#[doc = ""]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum XTP_MARKETDATA_TYPE {
    XTP_MARKETDATA_ACTUAL = 0,
    XTP_MARKETDATA_OPTION = 1,
}
#[repr(u32)]
#[doc = ""]
#[doc = "@brief XTP_MARKETDATA_TYPE_V2\u{662f}\u{884c}\u{60c5}\u{5feb}\u{7167}\u{6570}\u{636e}\u{7c7b}\u{578b}\u{ff0c}2.2.32\u{7248}\u{672c}\u{65b0}\u{589e}\u{5b57}\u{6bb5}"]
#[doc = ""]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum XTP_MARKETDATA_TYPE_V2 {
    XTP_MARKETDATA_V2_INDEX = 0,
    XTP_MARKETDATA_V2_OPTION = 1,
    XTP_MARKETDATA_V2_ACTUAL = 2,
    XTP_MARKETDATA_V2_BOND = 3,
}
#[doc = "\u{884c}\u{60c5}"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XTPMarketDataStruct {
    #[doc = "\u{4ea4}\u{6613}\u{6240}\u{4ee3}\u{7801}"]
    pub exchange_id: XTP_EXCHANGE_TYPE,
    #[doc = "\u{5408}\u{7ea6}\u{4ee3}\u{7801}\u{ff08}\u{4e0d}\u{5305}\u{542b}\u{4ea4}\u{6613}\u{6240}\u{4fe1}\u{606f}\u{ff09}\u{ff0c}\u{4e0d}\u{5e26}\u{7a7a}\u{683c}\u{ff0c}\u{4ee5}'\\0'\u{7ed3}\u{5c3e}"]
    pub ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "\u{6700}\u{65b0}\u{4ef7}"]
    pub last_price: f64,
    #[doc = "\u{6628}\u{6536}\u{76d8}"]
    pub pre_close_price: f64,
    #[doc = "\u{4eca}\u{5f00}\u{76d8}"]
    pub open_price: f64,
    #[doc = "\u{6700}\u{9ad8}\u{4ef7}"]
    pub high_price: f64,
    #[doc = "\u{6700}\u{4f4e}\u{4ef7}"]
    pub low_price: f64,
    #[doc = "\u{4eca}\u{6536}\u{76d8}"]
    pub close_price: f64,
    #[doc = "\u{6628}\u{65e5}\u{6301}\u{4ed3}\u{91cf}(\u{5f20})(\u{76ee}\u{524d}\u{672a}\u{586b}\u{5199})"]
    pub pre_total_long_positon: i64,
    #[doc = "\u{6301}\u{4ed3}\u{91cf}(\u{5f20})"]
    pub total_long_positon: i64,
    #[doc = "\u{6628}\u{65e5}\u{7ed3}\u{7b97}\u{4ef7}\u{ff08}SH\u{ff09}"]
    pub pre_settl_price: f64,
    #[doc = "\u{4eca}\u{65e5}\u{7ed3}\u{7b97}\u{4ef7}\u{ff08}SH\u{ff09}"]
    pub settl_price: f64,
    #[doc = "\u{6da8}\u{505c}\u{4ef7}"]
    pub upper_limit_price: f64,
    #[doc = "\u{8dcc}\u{505c}\u{4ef7}"]
    pub lower_limit_price: f64,
    #[doc = "\u{9884}\u{7559}"]
    pub pre_delta: f64,
    #[doc = "\u{9884}\u{7559}"]
    pub curr_delta: f64,
    #[doc = " \u{65f6}\u{95f4}\u{7c7b}\u{ff0c}\u{683c}\u{5f0f}\u{4e3a}YYYYMMDDHHMMSSsss"]
    pub data_time: i64,
    #[doc = "\u{6570}\u{91cf}\u{ff0c}\u{4e3a}\u{603b}\u{6210}\u{4ea4}\u{91cf}\u{ff08}\u{5355}\u{4f4d}\u{80a1}\u{ff0c}\u{4e0e}\u{4ea4}\u{6613}\u{6240}\u{4e00}\u{81f4}\u{ff09}"]
    pub qty: i64,
    #[doc = "\u{6210}\u{4ea4}\u{91d1}\u{989d}\u{ff0c}\u{4e3a}\u{603b}\u{6210}\u{4ea4}\u{91d1}\u{989d}\u{ff08}\u{5355}\u{4f4d}\u{5143}\u{ff0c}\u{4e0e}\u{4ea4}\u{6613}\u{6240}\u{4e00}\u{81f4}\u{ff09}"]
    pub turnover: f64,
    #[doc = "\u{9884}\u{7559}(\u{65e0}\u{610f}\u{4e49})"]
    pub avg_price: f64,
    #[doc = "\u{5341}\u{6863}\u{7533}\u{4e70}\u{4ef7}"]
    pub bid: [f64; 10usize],
    #[doc = "\u{5341}\u{6863}\u{7533}\u{5356}\u{4ef7}"]
    pub ask: [f64; 10usize],
    #[doc = "\u{5341}\u{6863}\u{7533}\u{4e70}\u{91cf}"]
    pub bid_qty: [i64; 10usize],
    #[doc = "\u{5341}\u{6863}\u{7533}\u{5356}\u{91cf}"]
    pub ask_qty: [i64; 10usize],
    #[doc = "\u{6210}\u{4ea4}\u{7b14}\u{6570}"]
    pub trades_count: i64,
    #[doc = "\u{5f53}\u{524d}\u{4ea4}\u{6613}\u{72b6}\u{6001}\u{8bf4}\u{660e}\u{ff0c}\u{53c2}\u{9605}\u{300a}XTP API\u{5e38}\u{89c1}\u{95ee}\u{9898}.doc\u{300b}\u{6587}\u{6863}"]
    pub ticker_status: [::std::os::raw::c_char; 8usize],
    pub __bindgen_anon_1: XTPMarketDataStruct__bindgen_ty_1,
    #[doc = "\u{51b3}\u{5b9a}\u{4e86}union\u{662f}\u{54ea}\u{79cd}\u{6570}\u{636e}\u{7c7b}\u{578b} (2.2.32\u{7248}\u{672c}\u{4ee5}\u{524d}\u{6240}\u{7528}\u{5b57}\u{6bb5}\u{ff0c}\u{4ec5}\u{4e3a}\u{4e86}\u{4fdd}\u{6301}\u{517c}\u{5bb9}\u{ff0c}\u{4e0d}\u{5efa}\u{8bae}\u{4f7f}\u{7528}\u{8be5}\u{5b57}\u{6bb5})"]
    pub data_type: XTP_MARKETDATA_TYPE,
    #[doc = "\u{51b3}\u{5b9a}\u{4e86}union\u{662f}\u{54ea}\u{79cd}\u{6570}\u{636e}\u{7c7b}\u{578b}\u{ff08}2.2.32\u{7248}\u{672c}\u{65b0}\u{589e}\u{5b57}\u{6bb5}\u{ff0c}\u{66f4}\u{8be6}\u{7ec6}\u{533a}\u{5206}\u{4e86}\u{884c}\u{60c5}\u{5feb}\u{7167}\u{6570}\u{636e}\u{7c7b}\u{578b}\u{ff09}"]
    pub data_type_v2: XTP_MARKETDATA_TYPE_V2,
}
#[doc = "\u{6570}\u{636e}"]
#[repr(C)]
#[derive(Copy, Clone)]
pub union XTPMarketDataStruct__bindgen_ty_1 {
    pub stk: XTPMarketDataStockExData,
    pub opt: XTPMarketDataOptionExData,
    pub bond: XTPMarketDataBondExData,
}
#[test]
fn bindgen_test_layout_XTPMarketDataStruct__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<XTPMarketDataStruct__bindgen_ty_1>(),
        224usize,
        concat!("Size of: ", stringify!(XTPMarketDataStruct__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPMarketDataStruct__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XTPMarketDataStruct__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStruct__bindgen_ty_1>())).stk as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct__bindgen_ty_1),
            "::",
            stringify!(stk)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStruct__bindgen_ty_1>())).opt as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct__bindgen_ty_1),
            "::",
            stringify!(opt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStruct__bindgen_ty_1>())).bond as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct__bindgen_ty_1),
            "::",
            stringify!(bond)
        )
    );
}
impl Default for XTPMarketDataStruct__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_XTPMarketDataStruct() {
    assert_eq!(
        ::std::mem::size_of::<XTPMarketDataStruct>(),
        736usize,
        concat!("Size of: ", stringify!(XTPMarketDataStruct))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPMarketDataStruct>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPMarketDataStruct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStruct>())).exchange_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(exchange_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStruct>())).ticker as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(ticker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStruct>())).last_price as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(last_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStruct>())).pre_close_price as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(pre_close_price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStruct>())).open_price as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(open_price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStruct>())).high_price as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(high_price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStruct>())).low_price as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(low_price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStruct>())).close_price as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(close_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStruct>())).pre_total_long_positon as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(pre_total_long_positon)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStruct>())).total_long_positon as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(total_long_positon)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStruct>())).pre_settl_price as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(pre_settl_price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStruct>())).settl_price as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(settl_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStruct>())).upper_limit_price as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(upper_limit_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStruct>())).lower_limit_price as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(lower_limit_price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStruct>())).pre_delta as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(pre_delta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStruct>())).curr_delta as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(curr_delta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStruct>())).data_time as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(data_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStruct>())).qty as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(qty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStruct>())).turnover as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(turnover)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStruct>())).avg_price as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(avg_price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStruct>())).bid as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(bid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStruct>())).ask as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(ask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStruct>())).bid_qty as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(bid_qty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStruct>())).ask_qty as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(ask_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStruct>())).trades_count as *const _ as usize
        },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(trades_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStruct>())).ticker_status as *const _ as usize
        },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(ticker_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStruct>())).data_type as *const _ as usize },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(data_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStruct>())).data_type_v2 as *const _ as usize
        },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(data_type_v2)
        )
    );
}
impl Default for XTPMarketDataStruct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "\u{884c}\u{60c5}"]
pub type XTPMD = XTPMarketDataStruct;
#[doc = "\u{80a1}\u{7968}\u{884c}\u{60c5}\u{9759}\u{6001}\u{4fe1}\u{606f}"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQuoteStaticInfo {
    #[doc = "\u{4ea4}\u{6613}\u{6240}\u{4ee3}\u{7801}"]
    pub exchange_id: XTP_EXCHANGE_TYPE,
    #[doc = "\u{5408}\u{7ea6}\u{4ee3}\u{7801}\u{ff08}\u{4e0d}\u{5305}\u{542b}\u{4ea4}\u{6613}\u{6240}\u{4fe1}\u{606f}\u{ff09}\u{ff0c}\u{4e0d}\u{5e26}\u{7a7a}\u{683c}\u{ff0c}\u{4ee5}'\\0'\u{7ed3}\u{5c3e}"]
    pub ticker: [::std::os::raw::c_char; 16usize],
    #[doc = " \u{5408}\u{7ea6}\u{540d}\u{79f0}"]
    pub ticker_name: [::std::os::raw::c_char; 64usize],
    #[doc = " \u{5408}\u{7ea6}\u{7c7b}\u{578b}"]
    pub ticker_type: XTP_TICKER_TYPE,
    #[doc = "\u{6628}\u{6536}\u{76d8}"]
    pub pre_close_price: f64,
    #[doc = "\u{6da8}\u{505c}\u{677f}\u{4ef7}"]
    pub upper_limit_price: f64,
    #[doc = "\u{8dcc}\u{505c}\u{677f}\u{4ef7}"]
    pub lower_limit_price: f64,
    #[doc = "\u{6700}\u{5c0f}\u{53d8}\u{52a8}\u{4ef7}\u{4f4d}"]
    pub price_tick: f64,
    #[doc = " \u{5408}\u{7ea6}\u{6700}\u{5c0f}\u{4ea4}\u{6613}\u{91cf}(\u{4e70})"]
    pub buy_qty_unit: i32,
    #[doc = " \u{5408}\u{7ea6}\u{6700}\u{5c0f}\u{4ea4}\u{6613}\u{91cf}(\u{5356})"]
    pub sell_qty_unit: i32,
}
#[test]
fn bindgen_test_layout_XTPQuoteStaticInfo() {
    assert_eq!(
        ::std::mem::size_of::<XTPQuoteStaticInfo>(),
        128usize,
        concat!("Size of: ", stringify!(XTPQuoteStaticInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQuoteStaticInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPQuoteStaticInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQuoteStaticInfo>())).exchange_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteStaticInfo),
            "::",
            stringify!(exchange_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQuoteStaticInfo>())).ticker as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteStaticInfo),
            "::",
            stringify!(ticker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQuoteStaticInfo>())).ticker_name as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteStaticInfo),
            "::",
            stringify!(ticker_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQuoteStaticInfo>())).ticker_type as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteStaticInfo),
            "::",
            stringify!(ticker_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQuoteStaticInfo>())).pre_close_price as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteStaticInfo),
            "::",
            stringify!(pre_close_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQuoteStaticInfo>())).upper_limit_price as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteStaticInfo),
            "::",
            stringify!(upper_limit_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQuoteStaticInfo>())).lower_limit_price as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteStaticInfo),
            "::",
            stringify!(lower_limit_price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQuoteStaticInfo>())).price_tick as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteStaticInfo),
            "::",
            stringify!(price_tick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQuoteStaticInfo>())).buy_qty_unit as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteStaticInfo),
            "::",
            stringify!(buy_qty_unit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQuoteStaticInfo>())).sell_qty_unit as *const _ as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteStaticInfo),
            "::",
            stringify!(sell_qty_unit)
        )
    );
}
impl Default for XTPQuoteStaticInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "\u{80a1}\u{7968}\u{884c}\u{60c5}\u{9759}\u{6001}\u{4fe1}\u{606f}"]
pub type XTPQSI = XTPQuoteStaticInfo;
#[doc = "\u{8ba2}\u{5355}\u{8584}"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrderBookStruct {
    #[doc = "\u{4ea4}\u{6613}\u{6240}\u{4ee3}\u{7801}"]
    pub exchange_id: XTP_EXCHANGE_TYPE,
    #[doc = "\u{5408}\u{7ea6}\u{4ee3}\u{7801}\u{ff08}\u{4e0d}\u{5305}\u{542b}\u{4ea4}\u{6613}\u{6240}\u{4fe1}\u{606f}\u{ff09}\u{ff0c}\u{4e0d}\u{5e26}\u{7a7a}\u{683c}\u{ff0c}\u{4ee5}'\\0'\u{7ed3}\u{5c3e}"]
    pub ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "\u{6700}\u{65b0}\u{4ef7}"]
    pub last_price: f64,
    #[doc = "\u{6570}\u{91cf}\u{ff0c}\u{4e3a}\u{603b}\u{6210}\u{4ea4}\u{91cf}"]
    pub qty: i64,
    #[doc = "\u{6210}\u{4ea4}\u{91d1}\u{989d}\u{ff0c}\u{4e3a}\u{603b}\u{6210}\u{4ea4}\u{91d1}\u{989d}"]
    pub turnover: f64,
    #[doc = "\u{6210}\u{4ea4}\u{7b14}\u{6570}"]
    pub trades_count: i64,
    #[doc = "\u{5341}\u{6863}\u{7533}\u{4e70}\u{4ef7}"]
    pub bid: [f64; 10usize],
    #[doc = "\u{5341}\u{6863}\u{7533}\u{5356}\u{4ef7}"]
    pub ask: [f64; 10usize],
    #[doc = "\u{5341}\u{6863}\u{7533}\u{4e70}\u{91cf}"]
    pub bid_qty: [i64; 10usize],
    #[doc = "\u{5341}\u{6863}\u{7533}\u{5356}\u{91cf}"]
    pub ask_qty: [i64; 10usize],
    #[doc = " \u{65f6}\u{95f4}\u{7c7b}"]
    pub data_time: i64,
}
#[test]
fn bindgen_test_layout_OrderBookStruct() {
    assert_eq!(
        ::std::mem::size_of::<OrderBookStruct>(),
        384usize,
        concat!("Size of: ", stringify!(OrderBookStruct))
    );
    assert_eq!(
        ::std::mem::align_of::<OrderBookStruct>(),
        8usize,
        concat!("Alignment of ", stringify!(OrderBookStruct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrderBookStruct>())).exchange_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OrderBookStruct),
            "::",
            stringify!(exchange_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrderBookStruct>())).ticker as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(OrderBookStruct),
            "::",
            stringify!(ticker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrderBookStruct>())).last_price as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(OrderBookStruct),
            "::",
            stringify!(last_price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrderBookStruct>())).qty as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(OrderBookStruct),
            "::",
            stringify!(qty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrderBookStruct>())).turnover as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(OrderBookStruct),
            "::",
            stringify!(turnover)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrderBookStruct>())).trades_count as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(OrderBookStruct),
            "::",
            stringify!(trades_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrderBookStruct>())).bid as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(OrderBookStruct),
            "::",
            stringify!(bid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrderBookStruct>())).ask as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(OrderBookStruct),
            "::",
            stringify!(ask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrderBookStruct>())).bid_qty as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(OrderBookStruct),
            "::",
            stringify!(bid_qty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrderBookStruct>())).ask_qty as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(OrderBookStruct),
            "::",
            stringify!(ask_qty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrderBookStruct>())).data_time as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(OrderBookStruct),
            "::",
            stringify!(data_time)
        )
    );
}
impl Default for OrderBookStruct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "\u{8ba2}\u{5355}\u{8584}"]
pub type XTPOB = OrderBookStruct;
#[doc = "\u{9010}\u{7b14}\u{59d4}\u{6258}"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct XTPTickByTickEntrust {
    #[doc = "\u{9891}\u{9053}\u{4ee3}\u{7801}"]
    pub channel_no: i32,
    #[doc = "SH: \u{59d4}\u{6258}\u{5e8f}\u{53f7}(\u{59d4}\u{6258}\u{5355}\u{72ec}\u{7f16}\u{53f7}, \u{540c}\u{4e00}channel_no\u{5185}\u{8fde}\u{7eed})"]
    #[doc = "SZ: \u{59d4}\u{6258}\u{5e8f}\u{53f7}(\u{59d4}\u{6258}\u{6210}\u{4ea4}\u{7edf}\u{4e00}\u{7f16}\u{53f7}, \u{540c}\u{4e00}channel_no\u{5185}\u{8fde}\u{7eed})"]
    pub seq: i64,
    #[doc = "\u{59d4}\u{6258}\u{4ef7}\u{683c}"]
    pub price: f64,
    #[doc = "SH: \u{5269}\u{4f59}\u{59d4}\u{6258}\u{6570}\u{91cf}(balance)"]
    #[doc = "SZ: \u{59d4}\u{6258}\u{6570}\u{91cf}"]
    pub qty: i64,
    #[doc = "SH: 'B':\u{4e70}; 'S':\u{5356}"]
    #[doc = "SZ: '1':\u{4e70}; '2':\u{5356}; 'G':\u{501f}\u{5165}; 'F':\u{51fa}\u{501f}"]
    pub side: ::std::os::raw::c_char,
    #[doc = "SH: 'A': \u{589e}\u{52a0}; 'D': \u{5220}\u{9664}"]
    #[doc = "SZ: \u{8ba2}\u{5355}\u{7c7b}\u{522b}: '1': \u{5e02}\u{4ef7}; '2': \u{9650}\u{4ef7}; 'U': \u{672c}\u{65b9}\u{6700}\u{4f18}"]
    pub ord_type: ::std::os::raw::c_char,
    #[doc = "SH: \u{539f}\u{59cb}\u{8ba2}\u{5355}\u{53f7}"]
    #[doc = "SZ: \u{65e0}\u{610f}\u{4e49}"]
    pub order_no: i64,
}
#[test]
fn bindgen_test_layout_XTPTickByTickEntrust() {
    assert_eq!(
        ::std::mem::size_of::<XTPTickByTickEntrust>(),
        48usize,
        concat!("Size of: ", stringify!(XTPTickByTickEntrust))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPTickByTickEntrust>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPTickByTickEntrust))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickByTickEntrust>())).channel_no as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickEntrust),
            "::",
            stringify!(channel_no)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickByTickEntrust>())).seq as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickEntrust),
            "::",
            stringify!(seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickByTickEntrust>())).price as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickEntrust),
            "::",
            stringify!(price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickByTickEntrust>())).qty as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickEntrust),
            "::",
            stringify!(qty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickByTickEntrust>())).side as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickEntrust),
            "::",
            stringify!(side)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickByTickEntrust>())).ord_type as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickEntrust),
            "::",
            stringify!(ord_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickByTickEntrust>())).order_no as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickEntrust),
            "::",
            stringify!(order_no)
        )
    );
}
#[doc = "\u{9010}\u{7b14}\u{6210}\u{4ea4}"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct XTPTickByTickTrade {
    #[doc = "\u{9891}\u{9053}\u{4ee3}\u{7801}"]
    pub channel_no: i32,
    #[doc = "SH: \u{6210}\u{4ea4}\u{5e8f}\u{53f7}(\u{6210}\u{4ea4}\u{5355}\u{72ec}\u{7f16}\u{53f7}, \u{540c}\u{4e00}channel_no\u{5185}\u{8fde}\u{7eed})"]
    #[doc = "SZ: \u{6210}\u{4ea4}\u{5e8f}\u{53f7}(\u{59d4}\u{6258}\u{6210}\u{4ea4}\u{7edf}\u{4e00}\u{7f16}\u{53f7}, \u{540c}\u{4e00}channel_no\u{5185}\u{8fde}\u{7eed})"]
    pub seq: i64,
    #[doc = "\u{6210}\u{4ea4}\u{4ef7}\u{683c}"]
    pub price: f64,
    #[doc = "\u{6210}\u{4ea4}\u{91cf}"]
    pub qty: i64,
    #[doc = "\u{6210}\u{4ea4}\u{91d1}\u{989d}(\u{4ec5}\u{9002}\u{7528}\u{4e0a}\u{4ea4}\u{6240})"]
    pub money: f64,
    #[doc = "\u{4e70}\u{65b9}\u{8ba2}\u{5355}\u{53f7}"]
    pub bid_no: i64,
    #[doc = "\u{5356}\u{65b9}\u{8ba2}\u{5355}\u{53f7}"]
    pub ask_no: i64,
    #[doc = " SH: \u{5185}\u{5916}\u{76d8}\u{6807}\u{8bc6}('B':\u{4e3b}\u{52a8}\u{4e70}; 'S':\u{4e3b}\u{52a8}\u{5356}; 'N':\u{672a}\u{77e5})"]
    #[doc = " SZ: \u{6210}\u{4ea4}\u{6807}\u{8bc6}('4':\u{64a4}; 'F':\u{6210}\u{4ea4})"]
    pub trade_flag: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_XTPTickByTickTrade() {
    assert_eq!(
        ::std::mem::size_of::<XTPTickByTickTrade>(),
        64usize,
        concat!("Size of: ", stringify!(XTPTickByTickTrade))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPTickByTickTrade>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPTickByTickTrade))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickByTickTrade>())).channel_no as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickTrade),
            "::",
            stringify!(channel_no)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickByTickTrade>())).seq as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickTrade),
            "::",
            stringify!(seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickByTickTrade>())).price as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickTrade),
            "::",
            stringify!(price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickByTickTrade>())).qty as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickTrade),
            "::",
            stringify!(qty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickByTickTrade>())).money as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickTrade),
            "::",
            stringify!(money)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickByTickTrade>())).bid_no as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickTrade),
            "::",
            stringify!(bid_no)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickByTickTrade>())).ask_no as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickTrade),
            "::",
            stringify!(ask_no)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickByTickTrade>())).trade_flag as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickTrade),
            "::",
            stringify!(trade_flag)
        )
    );
}
#[doc = "\u{9010}\u{7b14}\u{72b6}\u{6001}\u{8ba2}\u{5355}"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct XTPTickByTickStatus {
    #[doc = "\u{9891}\u{9053}\u{4ee3}\u{7801}"]
    pub channel_no: i32,
    #[doc = "\u{540c}\u{4e00}channel_no\u{5185}\u{8fde}\u{7eed}"]
    pub seq: i64,
    #[doc = "\u{72b6}\u{6001}\u{4fe1}\u{606f}"]
    pub flag: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout_XTPTickByTickStatus() {
    assert_eq!(
        ::std::mem::size_of::<XTPTickByTickStatus>(),
        24usize,
        concat!("Size of: ", stringify!(XTPTickByTickStatus))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPTickByTickStatus>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPTickByTickStatus))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickByTickStatus>())).channel_no as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickStatus),
            "::",
            stringify!(channel_no)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickByTickStatus>())).seq as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickStatus),
            "::",
            stringify!(seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickByTickStatus>())).flag as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickStatus),
            "::",
            stringify!(flag)
        )
    );
}
#[doc = "\u{9010}\u{7b14}\u{6570}\u{636e}\u{4fe1}\u{606f}"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XTPTickByTickStruct {
    #[doc = "\u{4ea4}\u{6613}\u{6240}\u{4ee3}\u{7801}"]
    pub exchange_id: XTP_EXCHANGE_TYPE,
    #[doc = "\u{5408}\u{7ea6}\u{4ee3}\u{7801}\u{ff08}\u{4e0d}\u{5305}\u{542b}\u{4ea4}\u{6613}\u{6240}\u{4fe1}\u{606f}\u{ff09}\u{ff0c}\u{4e0d}\u{5e26}\u{7a7a}\u{683c}\u{ff0c}\u{4ee5}'\\0'\u{7ed3}\u{5c3e}"]
    pub ticker: [::std::os::raw::c_char; 16usize],
    #[doc = " SH: \u{4e1a}\u{52a1}\u{5e8f}\u{53f7}\u{ff08}\u{59d4}\u{6258}\u{6210}\u{4ea4}\u{7edf}\u{4e00}\u{7f16}\u{53f7}\u{ff0c}\u{540c}\u{4e00}\u{4e2a}channel_no\u{5185}\u{8fde}\u{7eed}\u{ff0c}\u{6b64}seq\u{533a}\u{522b}\u{4e8e}\u{8054}\u{5408}\u{4f53}\u{5185}\u{7684}seq\u{ff0c}channel_no\u{7b49}\u{540c}\u{4e8e}\u{8054}\u{5408}\u{4f53}\u{5185}\u{7684}channel_no\u{ff09}"]
    #[doc = " SZ: \u{65e0}\u{610f}\u{4e49}"]
    pub seq: i64,
    #[doc = "\u{59d4}\u{6258}\u{65f6}\u{95f4} or \u{6210}\u{4ea4}\u{65f6}\u{95f4}"]
    pub data_time: i64,
    #[doc = "\u{59d4}\u{6258} or \u{6210}\u{4ea4}"]
    pub type_: XTP_TBT_TYPE,
    pub __bindgen_anon_1: XTPTickByTickStruct__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union XTPTickByTickStruct__bindgen_ty_1 {
    pub entrust: XTPTickByTickEntrust,
    pub trade: XTPTickByTickTrade,
    pub state: XTPTickByTickStatus,
}
#[test]
fn bindgen_test_layout_XTPTickByTickStruct__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<XTPTickByTickStruct__bindgen_ty_1>(),
        64usize,
        concat!("Size of: ", stringify!(XTPTickByTickStruct__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPTickByTickStruct__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XTPTickByTickStruct__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPTickByTickStruct__bindgen_ty_1>())).entrust as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickStruct__bindgen_ty_1),
            "::",
            stringify!(entrust)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPTickByTickStruct__bindgen_ty_1>())).trade as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickStruct__bindgen_ty_1),
            "::",
            stringify!(trade)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPTickByTickStruct__bindgen_ty_1>())).state as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickStruct__bindgen_ty_1),
            "::",
            stringify!(state)
        )
    );
}
impl Default for XTPTickByTickStruct__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_XTPTickByTickStruct() {
    assert_eq!(
        ::std::mem::size_of::<XTPTickByTickStruct>(),
        112usize,
        concat!("Size of: ", stringify!(XTPTickByTickStruct))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPTickByTickStruct>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPTickByTickStruct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickByTickStruct>())).exchange_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickStruct),
            "::",
            stringify!(exchange_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickByTickStruct>())).ticker as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickStruct),
            "::",
            stringify!(ticker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickByTickStruct>())).seq as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickStruct),
            "::",
            stringify!(seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickByTickStruct>())).data_time as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickStruct),
            "::",
            stringify!(data_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickByTickStruct>())).type_ as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickStruct),
            "::",
            stringify!(type_)
        )
    );
}
impl Default for XTPTickByTickStruct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "\u{9010}\u{7b14}\u{6570}\u{636e}\u{4fe1}\u{606f}"]
pub type XTPTBT = XTPTickByTickStruct;
#[doc = "\u{4f9b}\u{67e5}\u{8be2}\u{7684}\u{6700}\u{65b0}\u{4fe1}\u{606f}"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPTickerPriceInfo {
    #[doc = "\u{4ea4}\u{6613}\u{6240}\u{4ee3}\u{7801}"]
    pub exchange_id: XTP_EXCHANGE_TYPE,
    #[doc = "\u{5408}\u{7ea6}\u{4ee3}\u{7801}\u{ff08}\u{4e0d}\u{5305}\u{542b}\u{4ea4}\u{6613}\u{6240}\u{4fe1}\u{606f}\u{ff09}\u{ff0c}\u{4e0d}\u{5e26}\u{7a7a}\u{683c}\u{ff0c}\u{4ee5}'\\0'\u{7ed3}\u{5c3e}"]
    pub ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "\u{6700}\u{65b0}\u{4ef7}"]
    pub last_price: f64,
}
#[test]
fn bindgen_test_layout_XTPTickerPriceInfo() {
    assert_eq!(
        ::std::mem::size_of::<XTPTickerPriceInfo>(),
        32usize,
        concat!("Size of: ", stringify!(XTPTickerPriceInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPTickerPriceInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPTickerPriceInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickerPriceInfo>())).exchange_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickerPriceInfo),
            "::",
            stringify!(exchange_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickerPriceInfo>())).ticker as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickerPriceInfo),
            "::",
            stringify!(ticker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickerPriceInfo>())).last_price as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickerPriceInfo),
            "::",
            stringify!(last_price)
        )
    );
}
impl Default for XTPTickerPriceInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "\u{4f9b}\u{67e5}\u{8be2}\u{7684}\u{6700}\u{65b0}\u{4fe1}\u{606f}"]
pub type XTPTPI = XTPTickerPriceInfo;
#[doc = "\u{80a1}\u{7968}\u{884c}\u{60c5}\u{5168}\u{91cf}\u{9759}\u{6001}\u{4fe1}\u{606f}"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQuoteFullInfo {
    #[doc = "<\u{4ea4}\u{6613}\u{6240}\u{4ee3}\u{7801}"]
    pub exchange_id: XTP_EXCHANGE_TYPE,
    #[doc = "<\u{8bc1}\u{5238}\u{4ee3}\u{7801}"]
    pub ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "<\u{8bc1}\u{5238}\u{540d}\u{79f0}"]
    pub ticker_name: [::std::os::raw::c_char; 64usize],
    #[doc = "<\u{5408}\u{7ea6}\u{8be6}\u{7ec6}\u{7c7b}\u{578b}"]
    pub security_type: XTP_SECURITY_TYPE,
    #[doc = "<\u{5408}\u{7ea6}\u{9002}\u{5f53}\u{6027}\u{7c7b}\u{522b}"]
    pub ticker_qualification_class: XTP_QUALIFICATION_TYPE,
    #[doc = "<\u{662f}\u{5426}\u{6ce8}\u{518c}\u{5236}(\u{4ec5}\u{9002}\u{7528}\u{521b}\u{4e1a}\u{677f}\u{80a1}\u{7968}\u{ff0c}\u{521b}\u{65b0}\u{4f01}\u{4e1a}\u{80a1}\u{7968}\u{53ca}\u{5b58}\u{6258}\u{51ed}\u{8bc1})"]
    pub is_registration: bool,
    #[doc = "<\u{662f}\u{5426}\u{5177}\u{6709}\u{534f}\u{8bae}\u{63a7}\u{5236}\u{67b6}\u{6784}(\u{4ec5}\u{9002}\u{7528}\u{521b}\u{4e1a}\u{677f}\u{80a1}\u{7968}\u{ff0c}\u{521b}\u{65b0}\u{4f01}\u{4e1a}\u{80a1}\u{7968}\u{53ca}\u{5b58}\u{6258}\u{51ed}\u{8bc1})"]
    pub is_VIE: bool,
    #[doc = "<\u{662f}\u{5426}\u{5c1a}\u{672a}\u{76c8}\u{5229}(\u{4ec5}\u{9002}\u{7528}\u{521b}\u{4e1a}\u{677f}\u{80a1}\u{7968}\u{ff0c}\u{521b}\u{65b0}\u{4f01}\u{4e1a}\u{80a1}\u{7968}\u{53ca}\u{5b58}\u{6258}\u{51ed}\u{8bc1})"]
    pub is_noprofit: bool,
    #[doc = "<\u{662f}\u{5426}\u{5b58}\u{5728}\u{6295}\u{7968}\u{6743}\u{5dee}\u{5f02}(\u{4ec5}\u{9002}\u{7528}\u{521b}\u{4e1a}\u{677f}\u{80a1}\u{7968}\u{ff0c}\u{521b}\u{65b0}\u{4f01}\u{4e1a}\u{80a1}\u{7968}\u{53ca}\u{5b58}\u{6258}\u{51ed}\u{8bc1})"]
    pub is_weighted_voting_rights: bool,
    #[doc = "<\u{662f}\u{5426}\u{6709}\u{6da8}\u{8dcc}\u{5e45}\u{9650}\u{5236}(\u{6ce8}\u{ff1a}\u{4e0d}\u{63d0}\u{4f9b}\u{5177}\u{4f53}\u{5e45}\u{5ea6}\u{ff0c}\u{53ef}\u{901a}\u{8fc7}\u{6da8}\u{8dcc}\u{505c}\u{4ef7}\u{548c}\u{6628}\u{6536}\u{4ef7}\u{6765}\u{8ba1}\u{7b97}\u{5e45}\u{5ea6})"]
    pub is_have_price_limit: bool,
    #[doc = "<\u{6da8}\u{505c}\u{4ef7}\u{ff08}\u{4ec5}\u{5728}\u{6709}\u{6da8}\u{8dcc}\u{5e45}\u{9650}\u{5236}\u{65f6}\u{6709}\u{6548}\u{ff09}"]
    pub upper_limit_price: f64,
    #[doc = "<\u{8dcc}\u{505c}\u{4ef7}\u{ff08}\u{4ec5}\u{5728}\u{6709}\u{6da8}\u{8dcc}\u{5e45}\u{9650}\u{5236}\u{65f6}\u{6709}\u{6548}\u{ff09}"]
    pub lower_limit_price: f64,
    #[doc = "<\u{6628}\u{6536}\u{4ef7}"]
    pub pre_close_price: f64,
    #[doc = "<\u{4ef7}\u{683c}\u{6700}\u{5c0f}\u{53d8}\u{52a8}\u{4ef7}\u{4f4d}"]
    pub price_tick: f64,
    #[doc = "<\u{9650}\u{4ef7}\u{4e70}\u{59d4}\u{6258}\u{6570}\u{91cf}\u{4e0a}\u{9650}"]
    pub bid_qty_upper_limit: i32,
    #[doc = "<\u{9650}\u{4ef7}\u{4e70}\u{59d4}\u{6258}\u{6570}\u{91cf}\u{4e0b}\u{9650}"]
    pub bid_qty_lower_limit: i32,
    #[doc = "<\u{9650}\u{4ef7}\u{4e70}\u{6570}\u{91cf}\u{5355}\u{4f4d}"]
    pub bid_qty_unit: i32,
    #[doc = "<\u{9650}\u{4ef7}\u{5356}\u{59d4}\u{6258}\u{6570}\u{91cf}\u{4e0a}\u{9650}"]
    pub ask_qty_upper_limit: i32,
    #[doc = "<\u{9650}\u{4ef7}\u{5356}\u{59d4}\u{6258}\u{6570}\u{91cf}\u{4e0b}\u{9650}"]
    pub ask_qty_lower_limit: i32,
    #[doc = "<\u{9650}\u{4ef7}\u{5356}\u{6570}\u{91cf}\u{5355}\u{4f4d}"]
    pub ask_qty_unit: i32,
    #[doc = "<\u{5e02}\u{4ef7}\u{4e70}\u{59d4}\u{6258}\u{6570}\u{91cf}\u{4e0a}\u{9650}"]
    pub market_bid_qty_upper_limit: i32,
    #[doc = "<\u{5e02}\u{4ef7}\u{4e70}\u{59d4}\u{6258}\u{6570}\u{91cf}\u{4e0b}\u{9650}"]
    pub market_bid_qty_lower_limit: i32,
    #[doc = "<\u{5e02}\u{4ef7}\u{4e70}\u{6570}\u{91cf}\u{5355}\u{4f4d}"]
    pub market_bid_qty_unit: i32,
    #[doc = "<\u{5e02}\u{4ef7}\u{5356}\u{59d4}\u{6258}\u{6570}\u{91cf}\u{4e0a}\u{9650}"]
    pub market_ask_qty_upper_limit: i32,
    #[doc = "<\u{5e02}\u{4ef7}\u{5356}\u{59d4}\u{6258}\u{6570}\u{91cf}\u{4e0a}\u{9650}"]
    pub market_ask_qty_lower_limit: i32,
    #[doc = "<\u{5e02}\u{4ef7}\u{5356}\u{6570}\u{91cf}\u{5355}\u{4f4d}"]
    pub market_ask_qty_unit: i32,
    #[doc = "<\u{8bc1}\u{5238}\u{72b6}\u{6001}"]
    pub security_status: XTP_SECURITY_STATUS,
    #[doc = "<\u{4fdd}\u{7559}\u{5b57}\u{6bb5}"]
    pub unknown1: u32,
    #[doc = "<\u{4fdd}\u{7559}\u{5b57}\u{6bb5}"]
    pub unknown: [u64; 3usize],
}
#[test]
fn bindgen_test_layout_XTPQuoteFullInfo() {
    assert_eq!(
        ::std::mem::size_of::<XTPQuoteFullInfo>(),
        216usize,
        concat!("Size of: ", stringify!(XTPQuoteFullInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQuoteFullInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPQuoteFullInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQuoteFullInfo>())).exchange_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteFullInfo),
            "::",
            stringify!(exchange_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQuoteFullInfo>())).ticker as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteFullInfo),
            "::",
            stringify!(ticker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQuoteFullInfo>())).ticker_name as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteFullInfo),
            "::",
            stringify!(ticker_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQuoteFullInfo>())).security_type as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteFullInfo),
            "::",
            stringify!(security_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQuoteFullInfo>())).ticker_qualification_class as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteFullInfo),
            "::",
            stringify!(ticker_qualification_class)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQuoteFullInfo>())).is_registration as *const _ as usize
        },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteFullInfo),
            "::",
            stringify!(is_registration)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQuoteFullInfo>())).is_VIE as *const _ as usize },
        93usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteFullInfo),
            "::",
            stringify!(is_VIE)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQuoteFullInfo>())).is_noprofit as *const _ as usize },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteFullInfo),
            "::",
            stringify!(is_noprofit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQuoteFullInfo>())).is_weighted_voting_rights as *const _
                as usize
        },
        95usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteFullInfo),
            "::",
            stringify!(is_weighted_voting_rights)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQuoteFullInfo>())).is_have_price_limit as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteFullInfo),
            "::",
            stringify!(is_have_price_limit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQuoteFullInfo>())).upper_limit_price as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteFullInfo),
            "::",
            stringify!(upper_limit_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQuoteFullInfo>())).lower_limit_price as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteFullInfo),
            "::",
            stringify!(lower_limit_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQuoteFullInfo>())).pre_close_price as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteFullInfo),
            "::",
            stringify!(pre_close_price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQuoteFullInfo>())).price_tick as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteFullInfo),
            "::",
            stringify!(price_tick)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQuoteFullInfo>())).bid_qty_upper_limit as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteFullInfo),
            "::",
            stringify!(bid_qty_upper_limit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQuoteFullInfo>())).bid_qty_lower_limit as *const _ as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteFullInfo),
            "::",
            stringify!(bid_qty_lower_limit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQuoteFullInfo>())).bid_qty_unit as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteFullInfo),
            "::",
            stringify!(bid_qty_unit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQuoteFullInfo>())).ask_qty_upper_limit as *const _ as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteFullInfo),
            "::",
            stringify!(ask_qty_upper_limit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQuoteFullInfo>())).ask_qty_lower_limit as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteFullInfo),
            "::",
            stringify!(ask_qty_lower_limit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQuoteFullInfo>())).ask_qty_unit as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteFullInfo),
            "::",
            stringify!(ask_qty_unit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQuoteFullInfo>())).market_bid_qty_upper_limit as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteFullInfo),
            "::",
            stringify!(market_bid_qty_upper_limit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQuoteFullInfo>())).market_bid_qty_lower_limit as *const _
                as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteFullInfo),
            "::",
            stringify!(market_bid_qty_lower_limit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQuoteFullInfo>())).market_bid_qty_unit as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteFullInfo),
            "::",
            stringify!(market_bid_qty_unit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQuoteFullInfo>())).market_ask_qty_upper_limit as *const _
                as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteFullInfo),
            "::",
            stringify!(market_ask_qty_upper_limit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQuoteFullInfo>())).market_ask_qty_lower_limit as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteFullInfo),
            "::",
            stringify!(market_ask_qty_lower_limit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQuoteFullInfo>())).market_ask_qty_unit as *const _ as usize
        },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteFullInfo),
            "::",
            stringify!(market_ask_qty_unit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQuoteFullInfo>())).security_status as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteFullInfo),
            "::",
            stringify!(security_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQuoteFullInfo>())).unknown1 as *const _ as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteFullInfo),
            "::",
            stringify!(unknown1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQuoteFullInfo>())).unknown as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteFullInfo),
            "::",
            stringify!(unknown)
        )
    );
}
impl Default for XTPQuoteFullInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "\u{80a1}\u{7968}\u{884c}\u{60c5}\u{5168}\u{91cf}\u{9759}\u{6001}\u{4fe1}\u{606f}"]
pub type XTPQFI = XTPQuoteFullInfo;
pub type size_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
#[doc = "\u{65b0}\u{8ba2}\u{5355}\u{8bf7}\u{6c42}"]
#[repr(C)]
pub struct XTPOrderInsertInfo {
    #[doc = "XTP\u{7cfb}\u{7edf}\u{8ba2}\u{5355}ID\u{ff0c}\u{65e0}\u{9700}\u{7528}\u{6237}\u{586b}\u{5199}\u{ff0c}\u{5728}XTP\u{7cfb}\u{7edf}\u{4e2d}\u{552f}\u{4e00}"]
    pub order_xtp_id: u64,
    #[doc = "\u{62a5}\u{5355}\u{5f15}\u{7528}\u{ff0c}\u{7531}\u{5ba2}\u{6237}\u{81ea}\u{5b9a}\u{4e49}"]
    pub order_client_id: u32,
    #[doc = "\u{5408}\u{7ea6}\u{4ee3}\u{7801} \u{5ba2}\u{6237}\u{7aef}\u{8bf7}\u{6c42}\u{4e0d}\u{5e26}\u{7a7a}\u{683c}\u{ff0c}\u{4ee5}'\\0'\u{7ed3}\u{5c3e}"]
    pub ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "\u{4ea4}\u{6613}\u{5e02}\u{573a}"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "\u{4ef7}\u{683c}"]
    pub price: f64,
    #[doc = "\u{6b62}\u{635f}\u{4ef7}\u{ff08}\u{4fdd}\u{7559}\u{5b57}\u{6bb5}\u{ff09}"]
    pub stop_price: f64,
    #[doc = "\u{6570}\u{91cf}(\u{80a1}\u{7968}\u{5355}\u{4f4d}\u{4e3a}\u{80a1}\u{ff0c}\u{9006}\u{56de}\u{8d2d}\u{5355}\u{4f4d}\u{4e3a}\u{5f20})"]
    pub quantity: i64,
    #[doc = "\u{62a5}\u{5355}\u{4ef7}\u{683c}"]
    pub price_type: XTP_PRICE_TYPE,
    pub __bindgen_anon_1: XTPOrderInsertInfo__bindgen_ty_1,
    #[doc = "\u{4e1a}\u{52a1}\u{7c7b}\u{578b}"]
    pub business_type: XTP_BUSINESS_TYPE,
}
#[repr(C)]
pub struct XTPOrderInsertInfo__bindgen_ty_1 {
    #[doc = "32\u{4f4d}\u{5b57}\u{6bb5}\u{ff0c}\u{7528}\u{6765}\u{517c}\u{5bb9}\u{8001}\u{7248}\u{672c}api\u{ff0c}\u{7528}\u{6237}\u{65e0}\u{9700}\u{5173}\u{5fc3}"]
    pub u32_: __BindgenUnionField<u32>,
    pub __bindgen_anon_1: __BindgenUnionField<XTPOrderInsertInfo__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: u32,
}
#[repr(C)]
pub struct XTPOrderInsertInfo__bindgen_ty_1__bindgen_ty_1 {
    #[doc = "\u{4e70}\u{5356}\u{65b9}\u{5411}"]
    pub side: XTP_SIDE_TYPE,
    #[doc = "\u{5f00}\u{5e73}\u{6807}\u{5fd7}"]
    pub position_effect: XTP_POSITION_EFFECT_TYPE,
    #[doc = "\u{9884}\u{7559}\u{5b57}\u{6bb5}1"]
    pub reserved1: u8,
    #[doc = "\u{9884}\u{7559}\u{5b57}\u{6bb5}2"]
    pub reserved2: u8,
}
#[test]
fn bindgen_test_layout_XTPOrderInsertInfo__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<XTPOrderInsertInfo__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(XTPOrderInsertInfo__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XTPOrderInsertInfo__bindgen_ty_1__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(XTPOrderInsertInfo__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOrderInsertInfo__bindgen_ty_1__bindgen_ty_1>())).side
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInsertInfo__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(side)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOrderInsertInfo__bindgen_ty_1__bindgen_ty_1>()))
                .position_effect as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInsertInfo__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(position_effect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOrderInsertInfo__bindgen_ty_1__bindgen_ty_1>())).reserved1
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInsertInfo__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOrderInsertInfo__bindgen_ty_1__bindgen_ty_1>())).reserved2
                as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInsertInfo__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(reserved2)
        )
    );
}
impl Default for XTPOrderInsertInfo__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_XTPOrderInsertInfo__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<XTPOrderInsertInfo__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(XTPOrderInsertInfo__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPOrderInsertInfo__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(XTPOrderInsertInfo__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOrderInsertInfo__bindgen_ty_1>())).u32_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInsertInfo__bindgen_ty_1),
            "::",
            stringify!(u32_)
        )
    );
}
impl Default for XTPOrderInsertInfo__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_XTPOrderInsertInfo() {
    assert_eq!(
        ::std::mem::size_of::<XTPOrderInsertInfo>(),
        72usize,
        concat!("Size of: ", stringify!(XTPOrderInsertInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPOrderInsertInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPOrderInsertInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInsertInfo>())).order_xtp_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInsertInfo),
            "::",
            stringify!(order_xtp_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOrderInsertInfo>())).order_client_id as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInsertInfo),
            "::",
            stringify!(order_client_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInsertInfo>())).ticker as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInsertInfo),
            "::",
            stringify!(ticker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInsertInfo>())).market as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInsertInfo),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInsertInfo>())).price as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInsertInfo),
            "::",
            stringify!(price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInsertInfo>())).stop_price as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInsertInfo),
            "::",
            stringify!(stop_price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInsertInfo>())).quantity as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInsertInfo),
            "::",
            stringify!(quantity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInsertInfo>())).price_type as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInsertInfo),
            "::",
            stringify!(price_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOrderInsertInfo>())).business_type as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInsertInfo),
            "::",
            stringify!(business_type)
        )
    );
}
impl Default for XTPOrderInsertInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "\u{64a4}\u{5355}\u{5931}\u{8d25}\u{54cd}\u{5e94}\u{6d88}\u{606f}"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct XTPOrderCancelInfo {
    #[doc = "\u{64a4}\u{5355}XTPID"]
    pub order_cancel_xtp_id: u64,
    #[doc = "\u{539f}\u{59cb}\u{8ba2}\u{5355}XTPID"]
    pub order_xtp_id: u64,
}
#[test]
fn bindgen_test_layout_XTPOrderCancelInfo() {
    assert_eq!(
        ::std::mem::size_of::<XTPOrderCancelInfo>(),
        16usize,
        concat!("Size of: ", stringify!(XTPOrderCancelInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPOrderCancelInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPOrderCancelInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOrderCancelInfo>())).order_cancel_xtp_id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderCancelInfo),
            "::",
            stringify!(order_cancel_xtp_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderCancelInfo>())).order_xtp_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderCancelInfo),
            "::",
            stringify!(order_xtp_id)
        )
    );
}
#[doc = "\u{62a5}\u{5355}\u{54cd}\u{5e94}\u{7ed3}\u{6784}\u{4f53}"]
#[repr(C)]
pub struct XTPOrderInfo {
    #[doc = "XTP\u{7cfb}\u{7edf}\u{8ba2}\u{5355}ID\u{ff0c}\u{5728}XTP\u{7cfb}\u{7edf}\u{4e2d}\u{552f}\u{4e00}"]
    pub order_xtp_id: u64,
    #[doc = "\u{62a5}\u{5355}\u{5f15}\u{7528}\u{ff0c}\u{7528}\u{6237}\u{81ea}\u{5b9a}\u{4e49}"]
    pub order_client_id: u32,
    #[doc = "\u{62a5}\u{5355}\u{64cd}\u{4f5c}\u{5f15}\u{7528}\u{ff0c}\u{7528}\u{6237}\u{81ea}\u{5b9a}\u{4e49}\u{ff08}\u{6682}\u{672a}\u{4f7f}\u{7528}\u{ff09}"]
    pub order_cancel_client_id: u32,
    #[doc = "\u{64a4}\u{5355}\u{5728}XTP\u{7cfb}\u{7edf}\u{4e2d}\u{7684}id\u{ff0c}\u{5728}XTP\u{7cfb}\u{7edf}\u{4e2d}\u{552f}\u{4e00}"]
    pub order_cancel_xtp_id: u64,
    #[doc = "\u{5408}\u{7ea6}\u{4ee3}\u{7801}"]
    pub ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "\u{4ea4}\u{6613}\u{5e02}\u{573a}"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "\u{4ef7}\u{683c}"]
    pub price: f64,
    #[doc = "\u{6570}\u{91cf}\u{ff0c}\u{6b64}\u{8ba2}\u{5355}\u{7684}\u{62a5}\u{5355}\u{6570}\u{91cf}"]
    pub quantity: i64,
    #[doc = "\u{62a5}\u{5355}\u{4ef7}\u{683c}\u{6761}\u{4ef6}"]
    pub price_type: XTP_PRICE_TYPE,
    pub __bindgen_anon_1: XTPOrderInfo__bindgen_ty_1,
    #[doc = "\u{4e1a}\u{52a1}\u{7c7b}\u{578b}"]
    pub business_type: XTP_BUSINESS_TYPE,
    #[doc = "\u{4eca}\u{6210}\u{4ea4}\u{6570}\u{91cf}\u{ff0c}\u{4e3a}\u{6b64}\u{8ba2}\u{5355}\u{7d2f}\u{8ba1}\u{6210}\u{4ea4}\u{6570}\u{91cf}"]
    pub qty_traded: i64,
    #[doc = "\u{5269}\u{4f59}\u{6570}\u{91cf}\u{ff0c}\u{5f53}\u{64a4}\u{5355}\u{6210}\u{529f}\u{65f6}\u{ff0c}\u{8868}\u{793a}\u{64a4}\u{5355}\u{6570}\u{91cf}"]
    pub qty_left: i64,
    #[doc = "\u{59d4}\u{6258}\u{65f6}\u{95f4}\u{ff0c}\u{683c}\u{5f0f}\u{4e3a}YYYYMMDDHHMMSSsss"]
    pub insert_time: i64,
    #[doc = "\u{6700}\u{540e}\u{4fee}\u{6539}\u{65f6}\u{95f4}\u{ff0c}\u{683c}\u{5f0f}\u{4e3a}YYYYMMDDHHMMSSsss"]
    pub update_time: i64,
    #[doc = "\u{64a4}\u{9500}\u{65f6}\u{95f4}\u{ff0c}\u{683c}\u{5f0f}\u{4e3a}YYYYMMDDHHMMSSsss"]
    pub cancel_time: i64,
    #[doc = "\u{6210}\u{4ea4}\u{91d1}\u{989d}\u{ff0c}\u{4e3a}\u{6b64}\u{8ba2}\u{5355}\u{7684}\u{6210}\u{4ea4}\u{603b}\u{91d1}\u{989d}"]
    pub trade_amount: f64,
    #[doc = "\u{672c}\u{5730}\u{62a5}\u{5355}\u{7f16}\u{53f7} OMS\u{751f}\u{6210}\u{7684}\u{5355}\u{53f7}\u{ff0c}\u{4e0d}\u{7b49}\u{540c}\u{4e8e}order_xtp_id\u{ff0c}\u{4e3a}\u{670d}\u{52a1}\u{5668}\u{4f20}\u{5230}\u{62a5}\u{76d8}\u{7684}\u{5355}\u{53f7}"]
    pub order_local_id: [::std::os::raw::c_char; 11usize],
    #[doc = "\u{62a5}\u{5355}\u{72b6}\u{6001}\u{ff0c}\u{8ba2}\u{5355}\u{54cd}\u{5e94}\u{4e2d}\u{6ca1}\u{6709}\u{90e8}\u{5206}\u{6210}\u{4ea4}\u{72b6}\u{6001}\u{7684}\u{63a8}\u{9001}\u{ff0c}\u{5728}\u{67e5}\u{8be2}\u{8ba2}\u{5355}\u{7ed3}\u{679c}\u{4e2d}\u{ff0c}\u{4f1a}\u{6709}\u{90e8}\u{5206}\u{6210}\u{4ea4}\u{72b6}\u{6001}"]
    pub order_status: XTP_ORDER_STATUS_TYPE,
    #[doc = "\u{62a5}\u{5355}\u{63d0}\u{4ea4}\u{72b6}\u{6001}\u{ff0c}OMS\u{5185}\u{90e8}\u{4f7f}\u{7528}\u{ff0c}\u{7528}\u{6237}\u{53ef}\u{7528}\u{6b64}\u{5b57}\u{6bb5}\u{6765}\u{533a}\u{5206}\u{64a4}\u{5355}\u{548c}\u{62a5}\u{5355}"]
    pub order_submit_status: XTP_ORDER_SUBMIT_STATUS_TYPE,
    #[doc = "\u{62a5}\u{5355}\u{7c7b}\u{578b}"]
    pub order_type: TXTPOrderTypeType,
}
#[repr(C)]
pub struct XTPOrderInfo__bindgen_ty_1 {
    #[doc = "32\u{4f4d}\u{5b57}\u{6bb5}\u{ff0c}\u{7528}\u{6765}\u{517c}\u{5bb9}\u{8001}\u{7248}\u{672c}api\u{ff0c}\u{7528}\u{6237}\u{65e0}\u{9700}\u{5173}\u{5fc3}"]
    pub u32_: __BindgenUnionField<u32>,
    pub __bindgen_anon_1: __BindgenUnionField<XTPOrderInfo__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: u32,
}
#[repr(C)]
pub struct XTPOrderInfo__bindgen_ty_1__bindgen_ty_1 {
    #[doc = "\u{4e70}\u{5356}\u{65b9}\u{5411}"]
    pub side: XTP_SIDE_TYPE,
    #[doc = "\u{5f00}\u{5e73}\u{6807}\u{5fd7}\u{ff0c}\u{671f}\u{6743}\u{7528}\u{6237}\u{5173}\u{6ce8}\u{5b57}\u{6bb5}\u{ff0c}\u{5176}\u{4f59}\u{7528}\u{6237}\u{586b}0\u{5373}\u{53ef}"]
    pub position_effect: XTP_POSITION_EFFECT_TYPE,
    #[doc = "\u{9884}\u{7559}\u{5b57}\u{6bb5}1"]
    pub reserved1: u8,
    #[doc = "\u{9884}\u{7559}\u{5b57}\u{6bb5}2"]
    pub reserved2: u8,
}
#[test]
fn bindgen_test_layout_XTPOrderInfo__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<XTPOrderInfo__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(XTPOrderInfo__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XTPOrderInfo__bindgen_ty_1__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(XTPOrderInfo__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOrderInfo__bindgen_ty_1__bindgen_ty_1>())).side as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(side)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOrderInfo__bindgen_ty_1__bindgen_ty_1>())).position_effect
                as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(position_effect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOrderInfo__bindgen_ty_1__bindgen_ty_1>())).reserved1
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOrderInfo__bindgen_ty_1__bindgen_ty_1>())).reserved2
                as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(reserved2)
        )
    );
}
impl Default for XTPOrderInfo__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_XTPOrderInfo__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<XTPOrderInfo__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(XTPOrderInfo__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPOrderInfo__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(XTPOrderInfo__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfo__bindgen_ty_1>())).u32_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo__bindgen_ty_1),
            "::",
            stringify!(u32_)
        )
    );
}
impl Default for XTPOrderInfo__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_XTPOrderInfo() {
    assert_eq!(
        ::std::mem::size_of::<XTPOrderInfo>(),
        152usize,
        concat!("Size of: ", stringify!(XTPOrderInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPOrderInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPOrderInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfo>())).order_xtp_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo),
            "::",
            stringify!(order_xtp_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfo>())).order_client_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo),
            "::",
            stringify!(order_client_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOrderInfo>())).order_cancel_client_id as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo),
            "::",
            stringify!(order_cancel_client_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOrderInfo>())).order_cancel_xtp_id as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo),
            "::",
            stringify!(order_cancel_xtp_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfo>())).ticker as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo),
            "::",
            stringify!(ticker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfo>())).market as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfo>())).price as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo),
            "::",
            stringify!(price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfo>())).quantity as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo),
            "::",
            stringify!(quantity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfo>())).price_type as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo),
            "::",
            stringify!(price_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfo>())).business_type as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo),
            "::",
            stringify!(business_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfo>())).qty_traded as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo),
            "::",
            stringify!(qty_traded)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfo>())).qty_left as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo),
            "::",
            stringify!(qty_left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfo>())).insert_time as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo),
            "::",
            stringify!(insert_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfo>())).update_time as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo),
            "::",
            stringify!(update_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfo>())).cancel_time as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo),
            "::",
            stringify!(cancel_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfo>())).trade_amount as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo),
            "::",
            stringify!(trade_amount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfo>())).order_local_id as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo),
            "::",
            stringify!(order_local_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfo>())).order_status as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo),
            "::",
            stringify!(order_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOrderInfo>())).order_submit_status as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo),
            "::",
            stringify!(order_submit_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfo>())).order_type as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo),
            "::",
            stringify!(order_type)
        )
    );
}
impl Default for XTPOrderInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "\u{62a5}\u{5355}\u{54cd}\u{5e94}\u{7ed3}\u{6784}\u{4f53}\u{ff0c}\u{65b0}\u{7248}\u{672c}"]
#[repr(C)]
pub struct XTPOrderInfoEx {
    #[doc = "XTP\u{7cfb}\u{7edf}\u{8ba2}\u{5355}ID\u{ff0c}\u{5728}XTP\u{7cfb}\u{7edf}\u{4e2d}\u{552f}\u{4e00}"]
    pub order_xtp_id: u64,
    #[doc = "\u{62a5}\u{5355}\u{5f15}\u{7528}\u{ff0c}\u{7528}\u{6237}\u{81ea}\u{5b9a}\u{4e49}"]
    pub order_client_id: u32,
    #[doc = "\u{62a5}\u{5355}\u{64cd}\u{4f5c}\u{5f15}\u{7528}\u{ff0c}\u{7528}\u{6237}\u{81ea}\u{5b9a}\u{4e49}\u{ff08}\u{6682}\u{672a}\u{4f7f}\u{7528}\u{ff09}"]
    pub order_cancel_client_id: u32,
    #[doc = "\u{64a4}\u{5355}\u{5728}XTP\u{7cfb}\u{7edf}\u{4e2d}\u{7684}id\u{ff0c}\u{5728}XTP\u{7cfb}\u{7edf}\u{4e2d}\u{552f}\u{4e00}"]
    pub order_cancel_xtp_id: u64,
    #[doc = "\u{5408}\u{7ea6}\u{4ee3}\u{7801}"]
    pub ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "\u{4ea4}\u{6613}\u{5e02}\u{573a}"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "\u{4ef7}\u{683c}"]
    pub price: f64,
    #[doc = "\u{6570}\u{91cf}\u{ff0c}\u{6b64}\u{8ba2}\u{5355}\u{7684}\u{62a5}\u{5355}\u{6570}\u{91cf}"]
    pub quantity: i64,
    #[doc = "\u{62a5}\u{5355}\u{4ef7}\u{683c}\u{6761}\u{4ef6}"]
    pub price_type: XTP_PRICE_TYPE,
    pub __bindgen_anon_1: XTPOrderInfoEx__bindgen_ty_1,
    #[doc = "\u{4e1a}\u{52a1}\u{7c7b}\u{578b}"]
    pub business_type: XTP_BUSINESS_TYPE,
    #[doc = "\u{4eca}\u{6210}\u{4ea4}\u{6570}\u{91cf}\u{ff0c}\u{4e3a}\u{6b64}\u{8ba2}\u{5355}\u{7d2f}\u{8ba1}\u{6210}\u{4ea4}\u{6570}\u{91cf}"]
    pub qty_traded: i64,
    #[doc = "\u{5269}\u{4f59}\u{6570}\u{91cf}\u{ff0c}\u{5f53}\u{64a4}\u{5355}\u{6210}\u{529f}\u{65f6}\u{ff0c}\u{8868}\u{793a}\u{64a4}\u{5355}\u{6570}\u{91cf}"]
    pub qty_left: i64,
    #[doc = "\u{59d4}\u{6258}\u{65f6}\u{95f4}\u{ff0c}\u{683c}\u{5f0f}\u{4e3a}YYYYMMDDHHMMSSsss"]
    pub insert_time: i64,
    #[doc = "\u{6700}\u{540e}\u{4fee}\u{6539}\u{65f6}\u{95f4}\u{ff0c}\u{683c}\u{5f0f}\u{4e3a}YYYYMMDDHHMMSSsss"]
    pub update_time: i64,
    #[doc = "\u{64a4}\u{9500}\u{65f6}\u{95f4}\u{ff0c}\u{683c}\u{5f0f}\u{4e3a}YYYYMMDDHHMMSSsss"]
    pub cancel_time: i64,
    #[doc = "\u{6210}\u{4ea4}\u{91d1}\u{989d}\u{ff0c}\u{4e3a}\u{6b64}\u{8ba2}\u{5355}\u{7684}\u{6210}\u{4ea4}\u{603b}\u{91d1}\u{989d}"]
    pub trade_amount: f64,
    #[doc = "\u{672c}\u{5730}\u{62a5}\u{5355}\u{7f16}\u{53f7} OMS\u{751f}\u{6210}\u{7684}\u{5355}\u{53f7}\u{ff0c}\u{4e0d}\u{7b49}\u{540c}\u{4e8e}order_xtp_id\u{ff0c}\u{4e3a}\u{670d}\u{52a1}\u{5668}\u{4f20}\u{5230}\u{62a5}\u{76d8}\u{7684}\u{5355}\u{53f7}"]
    pub order_local_id: [::std::os::raw::c_char; 11usize],
    #[doc = "\u{62a5}\u{5355}\u{72b6}\u{6001}\u{ff0c}\u{8ba2}\u{5355}\u{54cd}\u{5e94}\u{4e2d}\u{6ca1}\u{6709}\u{90e8}\u{5206}\u{6210}\u{4ea4}\u{72b6}\u{6001}\u{7684}\u{63a8}\u{9001}\u{ff0c}\u{5728}\u{67e5}\u{8be2}\u{8ba2}\u{5355}\u{7ed3}\u{679c}\u{4e2d}\u{ff0c}\u{4f1a}\u{6709}\u{90e8}\u{5206}\u{6210}\u{4ea4}\u{72b6}\u{6001}"]
    pub order_status: XTP_ORDER_STATUS_TYPE,
    #[doc = "\u{62a5}\u{5355}\u{63d0}\u{4ea4}\u{72b6}\u{6001}\u{ff0c}OMS\u{5185}\u{90e8}\u{4f7f}\u{7528}\u{ff0c}\u{7528}\u{6237}\u{65e0}\u{9700}\u{5173}\u{5fc3}"]
    pub order_submit_status: XTP_ORDER_SUBMIT_STATUS_TYPE,
    #[doc = "\u{62a5}\u{5355}\u{7c7b}\u{578b}"]
    pub order_type: TXTPOrderTypeType,
    #[doc = "\u{62a5}\u{5355}\u{7f16}\u{53f7} --\u{4ea4}\u{6613}\u{6240}\u{5355}\u{53f7}\u{ff0c}\u{4e0a}\u{4ea4}\u{6240}\u{4e3a}\u{7a7a}\u{ff0c}\u{6df1}\u{4ea4}\u{6240}\u{6709}\u{6b64}\u{5b57}\u{6bb5}"]
    pub order_exch_id: [::std::os::raw::c_char; 17usize],
    #[doc = "\u{8ba2}\u{5355}\u{7684}\u{9519}\u{8bef}\u{4fe1}\u{606f}"]
    pub order_err_t: XTPRI,
    #[doc = "\u{4fdd}\u{7559}\u{5b57}\u{6bb5}"]
    pub unknown: [u64; 2usize],
}
#[repr(C)]
pub struct XTPOrderInfoEx__bindgen_ty_1 {
    pub u32_: __BindgenUnionField<u32>,
    pub __bindgen_anon_1: __BindgenUnionField<XTPOrderInfoEx__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: u32,
}
#[repr(C)]
pub struct XTPOrderInfoEx__bindgen_ty_1__bindgen_ty_1 {
    #[doc = "\u{4e70}\u{5356}\u{65b9}\u{5411}"]
    pub side: XTP_SIDE_TYPE,
    #[doc = "\u{5f00}\u{5e73}\u{6807}\u{5fd7}"]
    pub position_effect: XTP_POSITION_EFFECT_TYPE,
    #[doc = "\u{9884}\u{7559}\u{5b57}\u{6bb5}1"]
    pub reserved1: u8,
    #[doc = "\u{9884}\u{7559}\u{5b57}\u{6bb5}2"]
    pub reserved2: u8,
}
#[test]
fn bindgen_test_layout_XTPOrderInfoEx__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<XTPOrderInfoEx__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(XTPOrderInfoEx__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XTPOrderInfoEx__bindgen_ty_1__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(XTPOrderInfoEx__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOrderInfoEx__bindgen_ty_1__bindgen_ty_1>())).side as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfoEx__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(side)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOrderInfoEx__bindgen_ty_1__bindgen_ty_1>())).position_effect
                as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfoEx__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(position_effect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOrderInfoEx__bindgen_ty_1__bindgen_ty_1>())).reserved1
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfoEx__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOrderInfoEx__bindgen_ty_1__bindgen_ty_1>())).reserved2
                as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfoEx__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(reserved2)
        )
    );
}
impl Default for XTPOrderInfoEx__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_XTPOrderInfoEx__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<XTPOrderInfoEx__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(XTPOrderInfoEx__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPOrderInfoEx__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(XTPOrderInfoEx__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOrderInfoEx__bindgen_ty_1>())).u32_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfoEx__bindgen_ty_1),
            "::",
            stringify!(u32_)
        )
    );
}
impl Default for XTPOrderInfoEx__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_XTPOrderInfoEx() {
    assert_eq!(
        ::std::mem::size_of::<XTPOrderInfoEx>(),
        312usize,
        concat!("Size of: ", stringify!(XTPOrderInfoEx))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPOrderInfoEx>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPOrderInfoEx))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfoEx>())).order_xtp_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfoEx),
            "::",
            stringify!(order_xtp_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfoEx>())).order_client_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfoEx),
            "::",
            stringify!(order_client_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOrderInfoEx>())).order_cancel_client_id as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfoEx),
            "::",
            stringify!(order_cancel_client_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOrderInfoEx>())).order_cancel_xtp_id as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfoEx),
            "::",
            stringify!(order_cancel_xtp_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfoEx>())).ticker as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfoEx),
            "::",
            stringify!(ticker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfoEx>())).market as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfoEx),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfoEx>())).price as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfoEx),
            "::",
            stringify!(price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfoEx>())).quantity as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfoEx),
            "::",
            stringify!(quantity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfoEx>())).price_type as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfoEx),
            "::",
            stringify!(price_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfoEx>())).business_type as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfoEx),
            "::",
            stringify!(business_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfoEx>())).qty_traded as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfoEx),
            "::",
            stringify!(qty_traded)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfoEx>())).qty_left as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfoEx),
            "::",
            stringify!(qty_left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfoEx>())).insert_time as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfoEx),
            "::",
            stringify!(insert_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfoEx>())).update_time as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfoEx),
            "::",
            stringify!(update_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfoEx>())).cancel_time as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfoEx),
            "::",
            stringify!(cancel_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfoEx>())).trade_amount as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfoEx),
            "::",
            stringify!(trade_amount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfoEx>())).order_local_id as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfoEx),
            "::",
            stringify!(order_local_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfoEx>())).order_status as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfoEx),
            "::",
            stringify!(order_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOrderInfoEx>())).order_submit_status as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfoEx),
            "::",
            stringify!(order_submit_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfoEx>())).order_type as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfoEx),
            "::",
            stringify!(order_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfoEx>())).order_exch_id as *const _ as usize },
        149usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfoEx),
            "::",
            stringify!(order_exch_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfoEx>())).order_err_t as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfoEx),
            "::",
            stringify!(order_err_t)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfoEx>())).unknown as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfoEx),
            "::",
            stringify!(unknown)
        )
    );
}
impl Default for XTPOrderInfoEx {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "\u{62a5}\u{5355}\u{6210}\u{4ea4}\u{7ed3}\u{6784}\u{4f53}"]
#[repr(C)]
pub struct XTPTradeReport {
    #[doc = "XTP\u{7cfb}\u{7edf}\u{8ba2}\u{5355}ID\u{ff0c}\u{6b64}\u{6210}\u{4ea4}\u{56de}\u{62a5}\u{76f8}\u{5173}\u{7684}\u{8ba2}\u{5355}ID\u{ff0c}\u{5728}XTP\u{7cfb}\u{7edf}\u{4e2d}\u{552f}\u{4e00}"]
    pub order_xtp_id: u64,
    #[doc = "\u{62a5}\u{5355}\u{5f15}\u{7528}"]
    pub order_client_id: u32,
    #[doc = "\u{5408}\u{7ea6}\u{4ee3}\u{7801}"]
    pub ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "\u{4ea4}\u{6613}\u{5e02}\u{573a}"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "\u{8ba2}\u{5355}\u{53f7}\u{ff0c}\u{5f15}\u{5165}XTPID\u{540e}\u{ff0c}\u{8be5}\u{5b57}\u{6bb5}\u{5b9e}\u{9645}\u{548c}order_xtp_id\u{91cd}\u{590d}\u{3002}\u{63a5}\u{53e3}\u{4e2d}\u{6682}\u{65f6}\u{4fdd}\u{7559}\u{3002}"]
    pub local_order_id: u64,
    #[doc = "\u{6210}\u{4ea4}\u{7f16}\u{53f7}\u{ff0c}\u{6df1}\u{4ea4}\u{6240}\u{552f}\u{4e00}\u{ff0c}\u{4e0a}\u{4ea4}\u{6240}\u{6bcf}\u{7b14}\u{4ea4}\u{6613}\u{552f}\u{4e00}\u{ff0c}\u{5f53}\u{53d1}\u{73b0}2\u{7b14}\u{6210}\u{4ea4}\u{56de}\u{62a5}\u{62e5}\u{6709}\u{76f8}\u{540c}\u{7684}exec_id\u{ff0c}\u{5219}\u{53ef}\u{4ee5}\u{8ba4}\u{4e3a}\u{6b64}\u{7b14}\u{4ea4}\u{6613}\u{81ea}\u{6210}\u{4ea4}"]
    pub exec_id: [::std::os::raw::c_char; 18usize],
    #[doc = "\u{4ef7}\u{683c}\u{ff0c}\u{6b64}\u{6b21}\u{6210}\u{4ea4}\u{7684}\u{4ef7}\u{683c}"]
    pub price: f64,
    #[doc = "\u{6570}\u{91cf}\u{ff0c}\u{6b64}\u{6b21}\u{6210}\u{4ea4}\u{7684}\u{6570}\u{91cf}\u{ff0c}\u{4e0d}\u{662f}\u{7d2f}\u{8ba1}\u{6570}\u{91cf}"]
    pub quantity: i64,
    #[doc = "\u{6210}\u{4ea4}\u{65f6}\u{95f4}\u{ff0c}\u{683c}\u{5f0f}\u{4e3a}YYYYMMDDHHMMSSsss"]
    pub trade_time: i64,
    #[doc = "\u{6210}\u{4ea4}\u{91d1}\u{989d}\u{ff0c}\u{6b64}\u{6b21}\u{6210}\u{4ea4}\u{7684}\u{603b}\u{91d1}\u{989d} = price*quantity"]
    pub trade_amount: f64,
    #[doc = "\u{6210}\u{4ea4}\u{5e8f}\u{53f7} --\u{56de}\u{62a5}\u{8bb0}\u{5f55}\u{53f7}\u{ff0c}\u{5bf9}\u{4e8e}\u{5355}\u{4e2a}\u{8d26}\u{6237}\u{6765}\u{8bf4}\u{ff0c}\u{6df1}\u{4ea4}\u{6240}\u{6bcf}\u{4e2a}\u{5e73}\u{53f0}\u{ff08}\u{4e0d}\u{540c}\u{4ea4}\u{6613}\u{54c1}\u{79cd}\u{ff09}\u{552f}\u{4e00}\u{ff0c}\u{4e0a}\u{4ea4}\u{6240}\u{552f}\u{4e00}\u{ff0c}\u{5bf9}\u{4e8e}\u{591a}\u{8d26}\u{6237}\u{6765}\u{8bf4}\u{ff0c}\u{4e0d}\u{552f}\u{4e00}"]
    pub report_index: u64,
    #[doc = "\u{62a5}\u{5355}\u{7f16}\u{53f7} --\u{4ea4}\u{6613}\u{6240}\u{5355}\u{53f7}\u{ff0c}\u{4e0a}\u{4ea4}\u{6240}\u{4e3a}\u{7a7a}\u{ff0c}\u{6df1}\u{4ea4}\u{6240}\u{6709}\u{6b64}\u{5b57}\u{6bb5}"]
    pub order_exch_id: [::std::os::raw::c_char; 17usize],
    #[doc = "\u{6210}\u{4ea4}\u{7c7b}\u{578b}  --\u{6210}\u{4ea4}\u{56de}\u{62a5}\u{4e2d}\u{7684}\u{6267}\u{884c}\u{7c7b}\u{578b}"]
    pub trade_type: TXTPTradeTypeType,
    pub __bindgen_anon_1: XTPTradeReport__bindgen_ty_1,
    #[doc = "\u{4e1a}\u{52a1}\u{7c7b}\u{578b}"]
    pub business_type: XTP_BUSINESS_TYPE,
    #[doc = "\u{4ea4}\u{6613}\u{6240}\u{4ea4}\u{6613}\u{5458}\u{4ee3}\u{7801}"]
    pub branch_pbu: [::std::os::raw::c_char; 7usize],
}
#[repr(C)]
pub struct XTPTradeReport__bindgen_ty_1 {
    #[doc = "32\u{4f4d}\u{5b57}\u{6bb5}\u{ff0c}\u{7528}\u{6765}\u{517c}\u{5bb9}\u{8001}\u{7248}\u{672c}api\u{ff0c}\u{7528}\u{6237}\u{65e0}\u{9700}\u{5173}\u{5fc3}"]
    pub u32_: __BindgenUnionField<u32>,
    pub __bindgen_anon_1: __BindgenUnionField<XTPTradeReport__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: u32,
}
#[repr(C)]
pub struct XTPTradeReport__bindgen_ty_1__bindgen_ty_1 {
    #[doc = "\u{4e70}\u{5356}\u{65b9}\u{5411}"]
    pub side: XTP_SIDE_TYPE,
    #[doc = "\u{5f00}\u{5e73}\u{6807}\u{5fd7}"]
    pub position_effect: XTP_POSITION_EFFECT_TYPE,
    #[doc = "\u{9884}\u{7559}\u{5b57}\u{6bb5}1"]
    pub reserved1: u8,
    #[doc = "\u{9884}\u{7559}\u{5b57}\u{6bb5}2"]
    pub reserved2: u8,
}
#[test]
fn bindgen_test_layout_XTPTradeReport__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<XTPTradeReport__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(XTPTradeReport__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XTPTradeReport__bindgen_ty_1__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(XTPTradeReport__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPTradeReport__bindgen_ty_1__bindgen_ty_1>())).side as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTradeReport__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(side)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPTradeReport__bindgen_ty_1__bindgen_ty_1>())).position_effect
                as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTradeReport__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(position_effect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPTradeReport__bindgen_ty_1__bindgen_ty_1>())).reserved1
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTradeReport__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPTradeReport__bindgen_ty_1__bindgen_ty_1>())).reserved2
                as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTradeReport__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(reserved2)
        )
    );
}
impl Default for XTPTradeReport__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_XTPTradeReport__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<XTPTradeReport__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(XTPTradeReport__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPTradeReport__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(XTPTradeReport__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPTradeReport__bindgen_ty_1>())).u32_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTradeReport__bindgen_ty_1),
            "::",
            stringify!(u32_)
        )
    );
}
impl Default for XTPTradeReport__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_XTPTradeReport() {
    assert_eq!(
        ::std::mem::size_of::<XTPTradeReport>(),
        144usize,
        concat!("Size of: ", stringify!(XTPTradeReport))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPTradeReport>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPTradeReport))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTradeReport>())).order_xtp_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTradeReport),
            "::",
            stringify!(order_xtp_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTradeReport>())).order_client_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTradeReport),
            "::",
            stringify!(order_client_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTradeReport>())).ticker as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTradeReport),
            "::",
            stringify!(ticker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTradeReport>())).market as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTradeReport),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTradeReport>())).local_order_id as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTradeReport),
            "::",
            stringify!(local_order_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTradeReport>())).exec_id as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTradeReport),
            "::",
            stringify!(exec_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTradeReport>())).price as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTradeReport),
            "::",
            stringify!(price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTradeReport>())).quantity as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTradeReport),
            "::",
            stringify!(quantity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTradeReport>())).trade_time as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTradeReport),
            "::",
            stringify!(trade_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTradeReport>())).trade_amount as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTradeReport),
            "::",
            stringify!(trade_amount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTradeReport>())).report_index as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTradeReport),
            "::",
            stringify!(report_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTradeReport>())).order_exch_id as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTradeReport),
            "::",
            stringify!(order_exch_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTradeReport>())).trade_type as *const _ as usize },
        121usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTradeReport),
            "::",
            stringify!(trade_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTradeReport>())).business_type as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTradeReport),
            "::",
            stringify!(business_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTradeReport>())).branch_pbu as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTradeReport),
            "::",
            stringify!(branch_pbu)
        )
    );
}
impl Default for XTPTradeReport {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = ""]
#[doc = "\u{62a5}\u{5355}\u{67e5}\u{8be2}"]
#[doc = ""]
#[doc = "\u{62a5}\u{5355}\u{67e5}\u{8be2}\u{8bf7}\u{6c42}-\u{6761}\u{4ef6}\u{67e5}\u{8be2}"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct XTPQueryOrderReq {
    #[doc = "\u{8bc1}\u{5238}\u{4ee3}\u{7801}\u{ff0c}\u{53ef}\u{4ee5}\u{4e3a}\u{7a7a}\u{ff0c}\u{5982}\u{679c}\u{4e3a}\u{7a7a}\u{ff0c}\u{5219}\u{9ed8}\u{8ba4}\u{67e5}\u{8be2}\u{65f6}\u{95f4}\u{6bb5}\u{5185}\u{7684}\u{6240}\u{6709}\u{6210}\u{4ea4}\u{56de}\u{62a5}"]
    pub ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "\u{683c}\u{5f0f}\u{4e3a}YYYYMMDDHHMMSSsss\u{ff0c}\u{4e3a}0\u{5219}\u{9ed8}\u{8ba4}\u{5f53}\u{524d}\u{4ea4}\u{6613}\u{65e5}0\u{70b9}"]
    pub begin_time: i64,
    #[doc = "\u{683c}\u{5f0f}\u{4e3a}YYYYMMDDHHMMSSsss\u{ff0c}\u{4e3a}0\u{5219}\u{9ed8}\u{8ba4}\u{5f53}\u{524d}\u{65f6}\u{95f4}"]
    pub end_time: i64,
}
#[test]
fn bindgen_test_layout_XTPQueryOrderReq() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryOrderReq>(),
        32usize,
        concat!("Size of: ", stringify!(XTPQueryOrderReq))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryOrderReq>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPQueryOrderReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryOrderReq>())).ticker as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOrderReq),
            "::",
            stringify!(ticker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryOrderReq>())).begin_time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOrderReq),
            "::",
            stringify!(begin_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryOrderReq>())).end_time as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOrderReq),
            "::",
            stringify!(end_time)
        )
    );
}
#[doc = "\u{62a5}\u{5355}\u{67e5}\u{8be2}\u{54cd}\u{5e94}\u{7ed3}\u{6784}\u{4f53}"]
pub type XTPQueryOrderRsp = XTPOrderInfo;
#[doc = "\u{67e5}\u{8be2}\u{8ba2}\u{5355}\u{8bf7}\u{6c42}-\u{5206}\u{9875}\u{67e5}\u{8be2}"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct XTPQueryOrderByPageReq {
    #[doc = "\u{9700}\u{8981}\u{67e5}\u{8be2}\u{7684}\u{8ba2}\u{5355}\u{6761}\u{6570}"]
    pub req_count: i64,
    #[doc = "\u{4e0a}\u{4e00}\u{6b21}\u{6536}\u{5230}\u{7684}\u{67e5}\u{8be2}\u{8ba2}\u{5355}\u{7ed3}\u{679c}\u{4e2d}\u{5e26}\u{56de}\u{6765}\u{7684}\u{7d22}\u{5f15}\u{ff0c}\u{5982}\u{679c}\u{662f}\u{4ece}\u{5934}\u{67e5}\u{8be2}\u{ff0c}\u{8bf7}\u{7f6e}0"]
    pub reference: i64,
    #[doc = "\u{4fdd}\u{7559}\u{5b57}\u{6bb5}"]
    pub reserved: i64,
}
#[test]
fn bindgen_test_layout_XTPQueryOrderByPageReq() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryOrderByPageReq>(),
        24usize,
        concat!("Size of: ", stringify!(XTPQueryOrderByPageReq))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryOrderByPageReq>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPQueryOrderByPageReq))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOrderByPageReq>())).req_count as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOrderByPageReq),
            "::",
            stringify!(req_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOrderByPageReq>())).reference as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOrderByPageReq),
            "::",
            stringify!(reference)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryOrderByPageReq>())).reserved as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOrderByPageReq),
            "::",
            stringify!(reserved)
        )
    );
}
#[doc = ""]
#[doc = "\u{6210}\u{4ea4}\u{56de}\u{62a5}\u{67e5}\u{8be2}"]
#[doc = ""]
#[doc = "\u{67e5}\u{8be2}\u{6210}\u{4ea4}\u{62a5}\u{544a}\u{8bf7}\u{6c42}-\u{6839}\u{636e}\u{6267}\u{884c}\u{7f16}\u{53f7}\u{67e5}\u{8be2}\u{ff08}\u{4fdd}\u{7559}\u{5b57}\u{6bb5}\u{ff09}"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct XTPQueryReportByExecIdReq {
    #[doc = "XTP\u{8ba2}\u{5355}\u{7cfb}\u{7edf}ID"]
    pub order_xtp_id: u64,
    #[doc = "\u{6210}\u{4ea4}\u{6267}\u{884c}\u{7f16}\u{53f7}"]
    pub exec_id: [::std::os::raw::c_char; 18usize],
}
#[test]
fn bindgen_test_layout_XTPQueryReportByExecIdReq() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryReportByExecIdReq>(),
        32usize,
        concat!("Size of: ", stringify!(XTPQueryReportByExecIdReq))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryReportByExecIdReq>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPQueryReportByExecIdReq))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryReportByExecIdReq>())).order_xtp_id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryReportByExecIdReq),
            "::",
            stringify!(order_xtp_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryReportByExecIdReq>())).exec_id as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryReportByExecIdReq),
            "::",
            stringify!(exec_id)
        )
    );
}
#[doc = "\u{67e5}\u{8be2}\u{6210}\u{4ea4}\u{56de}\u{62a5}\u{8bf7}\u{6c42}-\u{67e5}\u{8be2}\u{6761}\u{4ef6}"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct XTPQueryTraderReq {
    #[doc = "\u{8bc1}\u{5238}\u{4ee3}\u{7801}\u{ff0c}\u{53ef}\u{4ee5}\u{4e3a}\u{7a7a}\u{ff0c}\u{5982}\u{679c}\u{4e3a}\u{7a7a}\u{ff0c}\u{5219}\u{9ed8}\u{8ba4}\u{67e5}\u{8be2}\u{65f6}\u{95f4}\u{6bb5}\u{5185}\u{7684}\u{6240}\u{6709}\u{6210}\u{4ea4}\u{56de}\u{62a5}"]
    pub ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "\u{5f00}\u{59cb}\u{65f6}\u{95f4}\u{ff0c}\u{683c}\u{5f0f}\u{4e3a}YYYYMMDDHHMMSSsss\u{ff0c}\u{4e3a}0\u{5219}\u{9ed8}\u{8ba4}\u{5f53}\u{524d}\u{4ea4}\u{6613}\u{65e5}0\u{70b9}"]
    pub begin_time: i64,
    #[doc = "\u{7ed3}\u{675f}\u{65f6}\u{95f4}\u{ff0c}\u{683c}\u{5f0f}\u{4e3a}YYYYMMDDHHMMSSsss\u{ff0c}\u{4e3a}0\u{5219}\u{9ed8}\u{8ba4}\u{5f53}\u{524d}\u{65f6}\u{95f4}"]
    pub end_time: i64,
}
#[test]
fn bindgen_test_layout_XTPQueryTraderReq() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryTraderReq>(),
        32usize,
        concat!("Size of: ", stringify!(XTPQueryTraderReq))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryTraderReq>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPQueryTraderReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryTraderReq>())).ticker as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryTraderReq),
            "::",
            stringify!(ticker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryTraderReq>())).begin_time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryTraderReq),
            "::",
            stringify!(begin_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryTraderReq>())).end_time as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryTraderReq),
            "::",
            stringify!(end_time)
        )
    );
}
#[doc = "\u{6210}\u{4ea4}\u{56de}\u{62a5}\u{67e5}\u{8be2}\u{54cd}\u{5e94}\u{7ed3}\u{6784}\u{4f53}"]
pub type XTPQueryTradeRsp = XTPTradeReport;
#[doc = "\u{67e5}\u{8be2}\u{6210}\u{4ea4}\u{56de}\u{62a5}\u{8bf7}\u{6c42}-\u{5206}\u{9875}\u{67e5}\u{8be2}"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct XTPQueryTraderByPageReq {
    #[doc = "\u{9700}\u{8981}\u{67e5}\u{8be2}\u{7684}\u{6210}\u{4ea4}\u{56de}\u{62a5}\u{6761}\u{6570}"]
    pub req_count: i64,
    #[doc = "\u{4e0a}\u{4e00}\u{6b21}\u{6536}\u{5230}\u{7684}\u{67e5}\u{8be2}\u{6210}\u{4ea4}\u{56de}\u{62a5}\u{7ed3}\u{679c}\u{4e2d}\u{5e26}\u{56de}\u{6765}\u{7684}\u{7d22}\u{5f15}\u{ff0c}\u{5982}\u{679c}\u{662f}\u{4ece}\u{5934}\u{67e5}\u{8be2}\u{ff0c}\u{8bf7}\u{7f6e}0"]
    pub reference: i64,
    #[doc = "\u{4fdd}\u{7559}\u{5b57}\u{6bb5}"]
    pub reserved: i64,
}
#[test]
fn bindgen_test_layout_XTPQueryTraderByPageReq() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryTraderByPageReq>(),
        24usize,
        concat!("Size of: ", stringify!(XTPQueryTraderByPageReq))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryTraderByPageReq>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPQueryTraderByPageReq))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryTraderByPageReq>())).req_count as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryTraderByPageReq),
            "::",
            stringify!(req_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryTraderByPageReq>())).reference as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryTraderByPageReq),
            "::",
            stringify!(reference)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryTraderByPageReq>())).reserved as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryTraderByPageReq),
            "::",
            stringify!(reserved)
        )
    );
}
#[doc = ""]
#[doc = "\u{8d26}\u{6237}\u{8d44}\u{91d1}\u{67e5}\u{8be2}\u{54cd}\u{5e94}\u{7ed3}\u{6784}\u{4f53}"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryAssetRsp {
    #[doc = "\u{603b}\u{8d44}\u{4ea7}\u{ff08}\u{73b0}\u{8d27}\u{8d26}\u{6237}/\u{671f}\u{6743}\u{8d26}\u{6237}\u{53c2}\u{8003}\u{516c}\u{5f0f}\u{ff1a}\u{603b}\u{8d44}\u{4ea7} = \u{53ef}\u{7528}\u{8d44}\u{91d1} + \u{8bc1}\u{5238}\u{8d44}\u{4ea7}\u{ff08}\u{76ee}\u{524d}\u{4e3a}0\u{ff09}+ \u{9884}\u{6263}\u{7684}\u{8d44}\u{91d1}\u{ff09}\u{ff0c}\u{ff08}\u{4fe1}\u{7528}\u{8d26}\u{6237}\u{53c2}\u{8003}\u{516c}\u{5f0f}\u{ff1a}\u{603b}\u{8d44}\u{4ea7} = \u{53ef}\u{7528}\u{8d44}\u{91d1} + \u{878d}\u{5238}\u{5356}\u{51fa}\u{6240}\u{5f97}\u{8d44}\u{91d1}\u{4f59}\u{989d} + \u{8bc1}\u{5238}\u{8d44}\u{4ea7}+ \u{9884}\u{6263}\u{7684}\u{8d44}\u{91d1}\u{ff09}"]
    pub total_asset: f64,
    #[doc = "\u{53ef}\u{7528}\u{8d44}\u{91d1}"]
    pub buying_power: f64,
    #[doc = "\u{8bc1}\u{5238}\u{8d44}\u{4ea7}\u{ff08}\u{4fdd}\u{7559}\u{5b57}\u{6bb5}\u{ff0c}\u{76ee}\u{524d}\u{4e3a}0\u{ff09}"]
    pub security_asset: f64,
    #[doc = "\u{7d2f}\u{8ba1}\u{4e70}\u{5165}\u{6210}\u{4ea4}\u{8bc1}\u{5238}\u{5360}\u{7528}\u{8d44}\u{91d1}\u{ff08}\u{4ec5}\u{9650}\u{73b0}\u{8d27}\u{8d26}\u{6237}/\u{671f}\u{6743}\u{8d26}\u{6237}\u{ff0c}\u{4fe1}\u{7528}\u{8d26}\u{6237}\u{6682}\u{4e0d}\u{53ef}\u{7528}\u{ff09}"]
    pub fund_buy_amount: f64,
    #[doc = "\u{7d2f}\u{8ba1}\u{4e70}\u{5165}\u{6210}\u{4ea4}\u{4ea4}\u{6613}\u{8d39}\u{7528}\u{ff08}\u{4ec5}\u{9650}\u{73b0}\u{8d27}\u{8d26}\u{6237}/\u{671f}\u{6743}\u{8d26}\u{6237}\u{ff0c}\u{4fe1}\u{7528}\u{8d26}\u{6237}\u{6682}\u{4e0d}\u{53ef}\u{7528}\u{ff09}"]
    pub fund_buy_fee: f64,
    #[doc = "\u{7d2f}\u{8ba1}\u{5356}\u{51fa}\u{6210}\u{4ea4}\u{8bc1}\u{5238}\u{6240}\u{5f97}\u{8d44}\u{91d1}\u{ff08}\u{4ec5}\u{9650}\u{73b0}\u{8d27}\u{8d26}\u{6237}/\u{671f}\u{6743}\u{8d26}\u{6237}\u{ff0c}\u{4fe1}\u{7528}\u{8d26}\u{6237}\u{6682}\u{4e0d}\u{53ef}\u{7528}\u{ff09}"]
    pub fund_sell_amount: f64,
    #[doc = "\u{7d2f}\u{8ba1}\u{5356}\u{51fa}\u{6210}\u{4ea4}\u{4ea4}\u{6613}\u{8d39}\u{7528}\u{ff08}\u{4ec5}\u{9650}\u{73b0}\u{8d27}\u{8d26}\u{6237}/\u{671f}\u{6743}\u{8d26}\u{6237}\u{ff0c}\u{4fe1}\u{7528}\u{8d26}\u{6237}\u{6682}\u{4e0d}\u{53ef}\u{7528}\u{ff09}"]
    pub fund_sell_fee: f64,
    #[doc = "XTP\u{7cfb}\u{7edf}\u{9884}\u{6263}\u{7684}\u{8d44}\u{91d1}\u{ff08}\u{5305}\u{62ec}\u{4e70}\u{5356}\u{80a1}\u{7968}\u{65f6}\u{9884}\u{6263}\u{7684}\u{4ea4}\u{6613}\u{8d44}\u{91d1}+\u{9884}\u{6263}\u{624b}\u{7eed}\u{8d39}\u{ff09}"]
    pub withholding_amount: f64,
    #[doc = "\u{8d26}\u{6237}\u{7c7b}\u{578b}"]
    pub account_type: XTP_ACCOUNT_TYPE,
    #[doc = "\u{51bb}\u{7ed3}\u{7684}\u{4fdd}\u{8bc1}\u{91d1}\u{ff08}\u{4ec5}\u{9650}\u{671f}\u{6743}\u{8d26}\u{6237}\u{ff09}"]
    pub frozen_margin: f64,
    #[doc = "\u{884c}\u{6743}\u{51bb}\u{7ed3}\u{8d44}\u{91d1}\u{ff08}\u{4ec5}\u{9650}\u{671f}\u{6743}\u{8d26}\u{6237}\u{ff09}"]
    pub frozen_exec_cash: f64,
    #[doc = "\u{884c}\u{6743}\u{8d39}\u{7528}\u{ff08}\u{4ec5}\u{9650}\u{671f}\u{6743}\u{8d26}\u{6237}\u{ff09}"]
    pub frozen_exec_fee: f64,
    #[doc = "\u{57ab}\u{4ed8}\u{8d44}\u{91d1}\u{ff08}\u{4ec5}\u{9650}\u{671f}\u{6743}\u{8d26}\u{6237}\u{ff09}"]
    pub pay_later: f64,
    #[doc = "\u{9884}\u{57ab}\u{4ed8}\u{8d44}\u{91d1}\u{ff08}\u{4ec5}\u{9650}\u{671f}\u{6743}\u{8d26}\u{6237}\u{ff09}"]
    pub preadva_pay: f64,
    #[doc = "\u{6628}\u{65e5}\u{4f59}\u{989d}\u{ff08}\u{4ec5}\u{9650}\u{671f}\u{6743}\u{8d26}\u{6237}\u{ff09}"]
    pub orig_banlance: f64,
    #[doc = "\u{5f53}\u{524d}\u{4f59}\u{989d}\u{ff08}\u{4ec5}\u{9650}\u{671f}\u{6743}\u{8d26}\u{6237}\u{ff09}"]
    pub banlance: f64,
    #[doc = "\u{5f53}\u{5929}\u{51fa}\u{5165}\u{91d1}\u{ff08}\u{4ec5}\u{9650}\u{671f}\u{6743}\u{8d26}\u{6237}\u{ff09}"]
    pub deposit_withdraw: f64,
    #[doc = "\u{5f53}\u{65e5}\u{4ea4}\u{6613}\u{8d44}\u{91d1}\u{8f67}\u{5dee}\u{ff08}\u{4ec5}\u{9650}\u{671f}\u{6743}\u{8d26}\u{6237}\u{ff09}"]
    pub trade_netting: f64,
    #[doc = "\u{8d44}\u{91d1}\u{8d44}\u{4ea7}\u{ff08}\u{4ec5}\u{9650}\u{671f}\u{6743}\u{8d26}\u{6237}\u{ff09}"]
    pub captial_asset: f64,
    #[doc = "\u{5f3a}\u{9501}\u{8d44}\u{91d1}\u{ff08}\u{4ec5}\u{9650}\u{671f}\u{6743}\u{8d26}\u{6237}\u{ff09}"]
    pub force_freeze_amount: f64,
    #[doc = "\u{53ef}\u{53d6}\u{8d44}\u{91d1}\u{ff08}\u{4ec5}\u{9650}\u{671f}\u{6743}\u{8d26}\u{6237}\u{ff09}"]
    pub preferred_amount: f64,
    #[doc = "\u{878d}\u{5238}\u{5356}\u{51fa}\u{6240}\u{5f97}\u{8d44}\u{91d1}\u{4f59}\u{989d}\u{ff08}\u{4ec5}\u{9650}\u{4fe1}\u{7528}\u{8d26}\u{6237}\u{ff0c}\u{53ea}\u{80fd}\u{7528}\u{4e8e}\u{4e70}\u{5238}\u{8fd8}\u{5238}\u{ff09}"]
    pub repay_stock_aval_banlance: f64,
    #[doc = "\u{7d2f}\u{8ba1}\u{8ba2}\u{5355}\u{6d41}\u{91cf}\u{8d39}"]
    pub fund_order_data_charges: f64,
    #[doc = "\u{7d2f}\u{8ba1}\u{64a4}\u{5355}\u{6d41}\u{91cf}\u{8d39}"]
    pub fund_cancel_data_charges: f64,
    #[doc = "\u{4ea4}\u{6613}\u{6240}\u{5b9e}\u{65f6}\u{98ce}\u{9669}\u{5ea6}\u{ff08}\u{4ec5}\u{9650}\u{671f}\u{6743}\u{8d26}\u{6237},\u{540e}\u{7eed}\u{670d}\u{52a1}\u{5668}\u{7248}\u{672c}\u{652f}\u{6301}\u{ff0c}\u{76ee}\u{524d}\u{4e3a}0\u{ff09}"]
    pub exchange_cur_risk_degree: f64,
    #[doc = "\u{516c}\u{53f8}\u{5b9e}\u{65f6}\u{98ce}\u{9669}\u{5ea6}\u{ff08}\u{4ec5}\u{9650}\u{671f}\u{6743}\u{8d26}\u{6237},\u{540e}\u{7eed}\u{670d}\u{52a1}\u{5668}\u{7248}\u{672c}\u{652f}\u{6301}\u{ff0c}\u{76ee}\u{524d}\u{4e3a}0\u{ff09}"]
    pub company_cur_risk_degree: f64,
    #[doc = "(\u{4fdd}\u{7559}\u{5b57}\u{6bb5})"]
    pub unknown: [u64; 26usize],
}
#[test]
fn bindgen_test_layout_XTPQueryAssetRsp() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryAssetRsp>(),
        416usize,
        concat!("Size of: ", stringify!(XTPQueryAssetRsp))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryAssetRsp>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPQueryAssetRsp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryAssetRsp>())).total_asset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(total_asset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryAssetRsp>())).buying_power as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(buying_power)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryAssetRsp>())).security_asset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(security_asset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryAssetRsp>())).fund_buy_amount as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(fund_buy_amount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryAssetRsp>())).fund_buy_fee as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(fund_buy_fee)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryAssetRsp>())).fund_sell_amount as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(fund_sell_amount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryAssetRsp>())).fund_sell_fee as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(fund_sell_fee)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryAssetRsp>())).withholding_amount as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(withholding_amount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryAssetRsp>())).account_type as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(account_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryAssetRsp>())).frozen_margin as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(frozen_margin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryAssetRsp>())).frozen_exec_cash as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(frozen_exec_cash)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryAssetRsp>())).frozen_exec_fee as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(frozen_exec_fee)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryAssetRsp>())).pay_later as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(pay_later)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryAssetRsp>())).preadva_pay as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(preadva_pay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryAssetRsp>())).orig_banlance as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(orig_banlance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryAssetRsp>())).banlance as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(banlance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryAssetRsp>())).deposit_withdraw as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(deposit_withdraw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryAssetRsp>())).trade_netting as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(trade_netting)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryAssetRsp>())).captial_asset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(captial_asset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryAssetRsp>())).force_freeze_amount as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(force_freeze_amount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryAssetRsp>())).preferred_amount as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(preferred_amount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryAssetRsp>())).repay_stock_aval_banlance as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(repay_stock_aval_banlance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryAssetRsp>())).fund_order_data_charges as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(fund_order_data_charges)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryAssetRsp>())).fund_cancel_data_charges as *const _
                as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(fund_cancel_data_charges)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryAssetRsp>())).exchange_cur_risk_degree as *const _
                as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(exchange_cur_risk_degree)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryAssetRsp>())).company_cur_risk_degree as *const _
                as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(company_cur_risk_degree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryAssetRsp>())).unknown as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(unknown)
        )
    );
}
impl Default for XTPQueryAssetRsp {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = ""]
#[doc = "\u{67e5}\u{8be2}\u{80a1}\u{7968}\u{6301}\u{4ed3}\u{60c5}\u{51b5}\u{8bf7}\u{6c42}\u{7ed3}\u{6784}\u{4f53}"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryStkPositionReq {
    #[doc = "\u{8bc1}\u{5238}\u{4ee3}\u{7801}"]
    pub ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "\u{4ea4}\u{6613}\u{5e02}\u{573a}"]
    pub market: XTP_MARKET_TYPE,
}
#[test]
fn bindgen_test_layout_XTPQueryStkPositionReq() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryStkPositionReq>(),
        20usize,
        concat!("Size of: ", stringify!(XTPQueryStkPositionReq))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryStkPositionReq>(),
        4usize,
        concat!("Alignment of ", stringify!(XTPQueryStkPositionReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryStkPositionReq>())).ticker as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryStkPositionReq),
            "::",
            stringify!(ticker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryStkPositionReq>())).market as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryStkPositionReq),
            "::",
            stringify!(market)
        )
    );
}
impl Default for XTPQueryStkPositionReq {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = ""]
#[doc = "\u{67e5}\u{8be2}\u{80a1}\u{7968}\u{6301}\u{4ed3}\u{60c5}\u{51b5}"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryStkPositionRsp {
    #[doc = "\u{8bc1}\u{5238}\u{4ee3}\u{7801}"]
    pub ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "\u{8bc1}\u{5238}\u{540d}\u{79f0}"]
    pub ticker_name: [::std::os::raw::c_char; 64usize],
    #[doc = "\u{4ea4}\u{6613}\u{5e02}\u{573a}"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "\u{603b}\u{6301}\u{4ed3}"]
    pub total_qty: i64,
    #[doc = "\u{53ef}\u{5356}\u{6301}\u{4ed3}"]
    pub sellable_qty: i64,
    #[doc = "\u{6301}\u{4ed3}\u{6210}\u{672c}"]
    pub avg_price: f64,
    #[doc = "\u{6d6e}\u{52a8}\u{76c8}\u{4e8f}\u{ff08}\u{4fdd}\u{7559}\u{5b57}\u{6bb5}\u{ff09}"]
    pub unrealized_pnl: f64,
    #[doc = "\u{6628}\u{65e5}\u{6301}\u{4ed3}"]
    pub yesterday_position: i64,
    #[doc = "\u{4eca}\u{65e5}\u{7533}\u{8d2d}\u{8d4e}\u{56de}\u{6570}\u{91cf}\u{ff08}\u{7533}\u{8d2d}\u{548c}\u{8d4e}\u{56de}\u{6570}\u{91cf}\u{4e0d}\u{53ef}\u{80fd}\u{540c}\u{65f6}\u{5b58}\u{5728}\u{ff0c}\u{56e0}\u{6b64}\u{53ef}\u{4ee5}\u{5171}\u{7528}\u{4e00}\u{4e2a}\u{5b57}\u{6bb5}\u{ff09}"]
    pub purchase_redeemable_qty: i64,
    #[doc = " \u{6301}\u{4ed3}\u{65b9}\u{5411}"]
    pub position_direction: XTP_POSITION_DIRECTION_TYPE,
    #[doc = "\u{6301}\u{4ed3}\u{7c7b}\u{578b}(\u{6b64}\u{5b57}\u{6bb5}\u{6240}\u{6709}\u{8d26}\u{6237}\u{90fd}\u{53ef}\u{80fd}\u{7528}\u{5230}\u{ff0c}\u{53ef}\u{4ee5}\u{7528}\u{6765}\u{533a}\u{5206}\u{80a1}\u{4efd}\u{662f}\u{5426}\u{4e3a}\u{914d}\u{552e})"]
    pub position_security_type: XTP_POSITION_SECURITY_TYPE,
    #[doc = " \u{53ef}\u{884c}\u{6743}\u{5408}\u{7ea6}"]
    pub executable_option: i64,
    #[doc = " \u{53ef}\u{9501}\u{5b9a}\u{6807}\u{7684}"]
    pub lockable_position: i64,
    #[doc = " \u{53ef}\u{884c}\u{6743}\u{6807}\u{7684}"]
    pub executable_underlying: i64,
    #[doc = " \u{5df2}\u{9501}\u{5b9a}\u{6807}\u{7684}"]
    pub locked_position: i64,
    #[doc = " \u{53ef}\u{7528}\u{5df2}\u{9501}\u{5b9a}\u{6807}\u{7684}"]
    pub usable_locked_position: i64,
    #[doc = "\u{76c8}\u{4e8f}\u{6210}\u{672c}\u{4ef7}"]
    pub profit_price: f64,
    #[doc = "\u{4e70}\u{5165}\u{6210}\u{672c}"]
    pub buy_cost: f64,
    #[doc = "\u{76c8}\u{4e8f}\u{6210}\u{672c}"]
    pub profit_cost: f64,
    #[doc = "\u{6301}\u{4ed3}\u{5e02}\u{503c}\u{ff08}\u{6b64}\u{5b57}\u{6bb5}\u{76ee}\u{524d}\u{53ea}\u{6709}\u{671f}\u{6743}\u{8d26}\u{6237}\u{6709}\u{503c}\u{ff0c}\u{5176}\u{4ed6}\u{7c7b}\u{578b}\u{8d26}\u{6237}\u{4e3a}0\u{ff09}"]
    pub market_value: f64,
    #[doc = "(\u{4fdd}\u{7559}\u{5b57}\u{6bb5})"]
    pub unknown: [u64; 40usize],
}
#[test]
fn bindgen_test_layout_XTPQueryStkPositionRsp() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryStkPositionRsp>(),
        536usize,
        concat!("Size of: ", stringify!(XTPQueryStkPositionRsp))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryStkPositionRsp>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPQueryStkPositionRsp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryStkPositionRsp>())).ticker as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryStkPositionRsp),
            "::",
            stringify!(ticker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryStkPositionRsp>())).ticker_name as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryStkPositionRsp),
            "::",
            stringify!(ticker_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryStkPositionRsp>())).market as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryStkPositionRsp),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryStkPositionRsp>())).total_qty as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryStkPositionRsp),
            "::",
            stringify!(total_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryStkPositionRsp>())).sellable_qty as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryStkPositionRsp),
            "::",
            stringify!(sellable_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryStkPositionRsp>())).avg_price as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryStkPositionRsp),
            "::",
            stringify!(avg_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryStkPositionRsp>())).unrealized_pnl as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryStkPositionRsp),
            "::",
            stringify!(unrealized_pnl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryStkPositionRsp>())).yesterday_position as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryStkPositionRsp),
            "::",
            stringify!(yesterday_position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryStkPositionRsp>())).purchase_redeemable_qty as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryStkPositionRsp),
            "::",
            stringify!(purchase_redeemable_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryStkPositionRsp>())).position_direction as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryStkPositionRsp),
            "::",
            stringify!(position_direction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryStkPositionRsp>())).position_security_type as *const _
                as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryStkPositionRsp),
            "::",
            stringify!(position_security_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryStkPositionRsp>())).executable_option as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryStkPositionRsp),
            "::",
            stringify!(executable_option)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryStkPositionRsp>())).lockable_position as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryStkPositionRsp),
            "::",
            stringify!(lockable_position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryStkPositionRsp>())).executable_underlying as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryStkPositionRsp),
            "::",
            stringify!(executable_underlying)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryStkPositionRsp>())).locked_position as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryStkPositionRsp),
            "::",
            stringify!(locked_position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryStkPositionRsp>())).usable_locked_position as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryStkPositionRsp),
            "::",
            stringify!(usable_locked_position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryStkPositionRsp>())).profit_price as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryStkPositionRsp),
            "::",
            stringify!(profit_price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryStkPositionRsp>())).buy_cost as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryStkPositionRsp),
            "::",
            stringify!(buy_cost)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryStkPositionRsp>())).profit_cost as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryStkPositionRsp),
            "::",
            stringify!(profit_cost)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryStkPositionRsp>())).market_value as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryStkPositionRsp),
            "::",
            stringify!(market_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryStkPositionRsp>())).unknown as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryStkPositionRsp),
            "::",
            stringify!(unknown)
        )
    );
}
impl Default for XTPQueryStkPositionRsp {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = ""]
#[doc = "\u{7528}\u{6237}\u{5c55}\u{671f}\u{8bf7}\u{6c42}\u{7684}\u{901a}\u{77e5}"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPCreditDebtExtendNotice {
    #[doc = "<XTP\u{7cfb}\u{7edf}\u{8ba2}\u{5355}ID\u{ff0c}\u{65e0}\u{9700}\u{7528}\u{6237}\u{586b}\u{5199}\u{ff0c}\u{5728}XTP\u{7cfb}\u{7edf}\u{4e2d}\u{552f}\u{4e00}"]
    pub xtpid: u64,
    #[doc = "<\u{8d1f}\u{503a}\u{5408}\u{7ea6}\u{7f16}\u{53f7}"]
    pub debt_id: [::std::os::raw::c_char; 33usize],
    #[doc = "<\u{5c55}\u{671f}\u{8bf7}\u{6c42}\u{64cd}\u{4f5c}\u{72b6}\u{6001}"]
    pub oper_status: XTP_DEBT_EXTEND_OPER_STATUS,
    #[doc = "<\u{64cd}\u{4f5c}\u{65f6}\u{95f4}"]
    pub oper_time: u64,
}
#[test]
fn bindgen_test_layout_XTPCreditDebtExtendNotice() {
    assert_eq!(
        ::std::mem::size_of::<XTPCreditDebtExtendNotice>(),
        56usize,
        concat!("Size of: ", stringify!(XTPCreditDebtExtendNotice))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPCreditDebtExtendNotice>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPCreditDebtExtendNotice))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCreditDebtExtendNotice>())).xtpid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCreditDebtExtendNotice),
            "::",
            stringify!(xtpid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPCreditDebtExtendNotice>())).debt_id as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCreditDebtExtendNotice),
            "::",
            stringify!(debt_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPCreditDebtExtendNotice>())).oper_status as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCreditDebtExtendNotice),
            "::",
            stringify!(oper_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPCreditDebtExtendNotice>())).oper_time as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCreditDebtExtendNotice),
            "::",
            stringify!(oper_time)
        )
    );
}
impl Default for XTPCreditDebtExtendNotice {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = ""]
#[doc = "\u{8d44}\u{91d1}\u{5185}\u{8f6c}\u{6d41}\u{6c34}\u{901a}\u{77e5}"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPFundTransferNotice {
    #[doc = "\u{8d44}\u{91d1}\u{5185}\u{8f6c}\u{7f16}\u{53f7}"]
    pub serial_id: u64,
    #[doc = "\u{5185}\u{8f6c}\u{7c7b}\u{578b}"]
    pub transfer_type: XTP_FUND_TRANSFER_TYPE,
    #[doc = "\u{91d1}\u{989d}"]
    pub amount: f64,
    #[doc = "\u{64cd}\u{4f5c}\u{7ed3}\u{679c}"]
    pub oper_status: XTP_FUND_OPER_STATUS,
    #[doc = "\u{64cd}\u{4f5c}\u{65f6}\u{95f4}"]
    pub transfer_time: u64,
}
#[test]
fn bindgen_test_layout_XTPFundTransferNotice() {
    assert_eq!(
        ::std::mem::size_of::<XTPFundTransferNotice>(),
        40usize,
        concat!("Size of: ", stringify!(XTPFundTransferNotice))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPFundTransferNotice>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPFundTransferNotice))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPFundTransferNotice>())).serial_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPFundTransferNotice),
            "::",
            stringify!(serial_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPFundTransferNotice>())).transfer_type as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPFundTransferNotice),
            "::",
            stringify!(transfer_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPFundTransferNotice>())).amount as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPFundTransferNotice),
            "::",
            stringify!(amount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPFundTransferNotice>())).oper_status as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPFundTransferNotice),
            "::",
            stringify!(oper_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPFundTransferNotice>())).transfer_time as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPFundTransferNotice),
            "::",
            stringify!(transfer_time)
        )
    );
}
impl Default for XTPFundTransferNotice {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = ""]
#[doc = "\u{8d44}\u{91d1}\u{5185}\u{8f6c}\u{6d41}\u{6c34}\u{67e5}\u{8be2}\u{8bf7}\u{6c42}\u{4e0e}\u{54cd}\u{5e94}"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct XTPQueryFundTransferLogReq {
    #[doc = "\u{8d44}\u{91d1}\u{5185}\u{8f6c}\u{7f16}\u{53f7}"]
    pub serial_id: u64,
}
#[test]
fn bindgen_test_layout_XTPQueryFundTransferLogReq() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryFundTransferLogReq>(),
        8usize,
        concat!("Size of: ", stringify!(XTPQueryFundTransferLogReq))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryFundTransferLogReq>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPQueryFundTransferLogReq))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryFundTransferLogReq>())).serial_id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryFundTransferLogReq),
            "::",
            stringify!(serial_id)
        )
    );
}
#[doc = ""]
#[doc = "\u{8d44}\u{91d1}\u{5185}\u{8f6c}\u{6d41}\u{6c34}\u{8bb0}\u{5f55}\u{7ed3}\u{6784}\u{4f53}"]
#[doc = ""]
pub type XTPFundTransferLog = XTPFundTransferNotice;
#[doc = ""]
#[doc = "\u{67e5}\u{8be2}\u{5206}\u{7ea7}\u{57fa}\u{91d1}\u{4fe1}\u{606f}\u{7ed3}\u{6784}\u{4f53}"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryStructuredFundInfoReq {
    #[doc = "<\u{4ea4}\u{6613}\u{6240}\u{4ee3}\u{7801}\u{ff0c}\u{4e0d}\u{53ef}\u{4e3a}\u{7a7a}"]
    pub exchange_id: XTP_EXCHANGE_TYPE,
    #[doc = "<\u{5206}\u{7ea7}\u{57fa}\u{91d1}\u{6bcd}\u{57fa}\u{91d1}\u{4ee3}\u{7801}\u{ff0c}\u{53ef}\u{4ee5}\u{4e3a}\u{7a7a}\u{ff0c}\u{5982}\u{679c}\u{4e3a}\u{7a7a}\u{ff0c}\u{5219}\u{9ed8}\u{8ba4}\u{67e5}\u{8be2}\u{6240}\u{6709}\u{7684}\u{5206}\u{7ea7}\u{57fa}\u{91d1}"]
    pub sf_ticker: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_XTPQueryStructuredFundInfoReq() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryStructuredFundInfoReq>(),
        20usize,
        concat!("Size of: ", stringify!(XTPQueryStructuredFundInfoReq))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryStructuredFundInfoReq>(),
        4usize,
        concat!("Alignment of ", stringify!(XTPQueryStructuredFundInfoReq))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryStructuredFundInfoReq>())).exchange_id as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryStructuredFundInfoReq),
            "::",
            stringify!(exchange_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryStructuredFundInfoReq>())).sf_ticker as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryStructuredFundInfoReq),
            "::",
            stringify!(sf_ticker)
        )
    );
}
impl Default for XTPQueryStructuredFundInfoReq {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = ""]
#[doc = "\u{67e5}\u{8be2}\u{5206}\u{7ea7}\u{57fa}\u{91d1}\u{4fe1}\u{606f}\u{54cd}\u{5e94}\u{7ed3}\u{6784}\u{4f53}"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPStructuredFundInfo {
    #[doc = "<\u{4ea4}\u{6613}\u{6240}\u{4ee3}\u{7801}"]
    pub exchange_id: XTP_EXCHANGE_TYPE,
    #[doc = "<\u{5206}\u{7ea7}\u{57fa}\u{91d1}\u{6bcd}\u{57fa}\u{91d1}\u{4ee3}\u{7801}"]
    pub sf_ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "<\u{5206}\u{7ea7}\u{57fa}\u{91d1}\u{6bcd}\u{57fa}\u{91d1}\u{540d}\u{79f0}"]
    pub sf_ticker_name: [::std::os::raw::c_char; 64usize],
    #[doc = "<\u{5206}\u{7ea7}\u{57fa}\u{91d1}\u{5b50}\u{57fa}\u{91d1}\u{4ee3}\u{7801}"]
    pub ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "<\u{5206}\u{7ea7}\u{57fa}\u{91d1}\u{5b50}\u{57fa}\u{91d1}\u{540d}\u{79f0}"]
    pub ticker_name: [::std::os::raw::c_char; 64usize],
    #[doc = "<\u{57fa}\u{91d1}\u{5141}\u{8bb8}\u{62c6}\u{5206}\u{5408}\u{5e76}\u{72b6}\u{6001}"]
    pub split_merge_status: XTP_SPLIT_MERGE_STATUS,
    #[doc = "<\u{62c6}\u{5206}\u{5408}\u{5e76}\u{6bd4}\u{4f8b}"]
    pub ratio: u32,
    #[doc = "<\u{6700}\u{5c0f}\u{62c6}\u{5206}\u{6570}\u{91cf}"]
    pub min_split_qty: u32,
    #[doc = "<\u{6700}\u{5c0f}\u{5408}\u{5e76}\u{6570}\u{91cf}"]
    pub min_merge_qty: u32,
    #[doc = "<\u{57fa}\u{91d1}\u{51c0}\u{503c}"]
    pub net_price: f64,
}
#[test]
fn bindgen_test_layout_XTPStructuredFundInfo() {
    assert_eq!(
        ::std::mem::size_of::<XTPStructuredFundInfo>(),
        192usize,
        concat!("Size of: ", stringify!(XTPStructuredFundInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPStructuredFundInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPStructuredFundInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStructuredFundInfo>())).exchange_id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStructuredFundInfo),
            "::",
            stringify!(exchange_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPStructuredFundInfo>())).sf_ticker as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStructuredFundInfo),
            "::",
            stringify!(sf_ticker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStructuredFundInfo>())).sf_ticker_name as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStructuredFundInfo),
            "::",
            stringify!(sf_ticker_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPStructuredFundInfo>())).ticker as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStructuredFundInfo),
            "::",
            stringify!(ticker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStructuredFundInfo>())).ticker_name as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStructuredFundInfo),
            "::",
            stringify!(ticker_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStructuredFundInfo>())).split_merge_status as *const _
                as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStructuredFundInfo),
            "::",
            stringify!(split_merge_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPStructuredFundInfo>())).ratio as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStructuredFundInfo),
            "::",
            stringify!(ratio)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStructuredFundInfo>())).min_split_qty as *const _ as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStructuredFundInfo),
            "::",
            stringify!(min_split_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStructuredFundInfo>())).min_merge_qty as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStructuredFundInfo),
            "::",
            stringify!(min_merge_qty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPStructuredFundInfo>())).net_price as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStructuredFundInfo),
            "::",
            stringify!(net_price)
        )
    );
}
impl Default for XTPStructuredFundInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = ""]
#[doc = "\u{67e5}\u{8be2}\u{80a1}\u{7968}ETF\u{5408}\u{7ea6}\u{57fa}\u{672c}\u{60c5}\u{51b5}--\u{8bf7}\u{6c42}\u{7ed3}\u{6784}\u{4f53},"]
#[doc = "\u{8bf7}\u{6c42}\u{53c2}\u{6570}\u{4e3a}\u{591a}\u{6761}\u{4ef6}\u{53c2}\u{6570}:1,\u{4e0d}\u{586b}\u{5219}\u{8fd4}\u{56de}\u{6240}\u{6709}\u{5e02}\u{573a}\u{7684}ETF\u{5408}\u{7ea6}\u{4fe1}\u{606f}\u{3002}"]
#[doc = "                  2,\u{53ea}\u{586b}\u{5199}market,\u{8fd4}\u{56de}\u{8be5}\u{4ea4}\u{6613}\u{5e02}\u{573a}\u{4e0b}\u{7ed3}\u{679c}"]
#[doc = "                   3,\u{586b}\u{5199}market\u{53ca}ticker\u{53c2}\u{6570},\u{53ea}\u{8fd4}\u{56de}\u{8be5}etf\u{4fe1}\u{606f}\u{3002}"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryETFBaseReq {
    #[doc = "\u{4ea4}\u{6613}\u{5e02}\u{573a}"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "ETF\u{4e70}\u{5356}\u{4ee3}\u{7801}"]
    pub ticker: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_XTPQueryETFBaseReq() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryETFBaseReq>(),
        20usize,
        concat!("Size of: ", stringify!(XTPQueryETFBaseReq))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryETFBaseReq>(),
        4usize,
        concat!("Alignment of ", stringify!(XTPQueryETFBaseReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryETFBaseReq>())).market as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFBaseReq),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryETFBaseReq>())).ticker as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFBaseReq),
            "::",
            stringify!(ticker)
        )
    );
}
impl Default for XTPQueryETFBaseReq {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = ""]
#[doc = "\u{67e5}\u{8be2}\u{80a1}\u{7968}ETF\u{5408}\u{7ea6}\u{57fa}\u{672c}\u{60c5}\u{51b5}--\u{54cd}\u{5e94}\u{7ed3}\u{6784}\u{4f53}"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryETFBaseRsp {
    #[doc = "<\u{4ea4}\u{6613}\u{5e02}\u{573a}"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "<etf\u{4ee3}\u{7801},\u{4e70}\u{5356},\u{7533}\u{8d4e}\u{7edf}\u{4e00}\u{4f7f}\u{7528}\u{8be5}\u{4ee3}\u{7801}"]
    pub etf: [::std::os::raw::c_char; 16usize],
    #[doc = "<etf\u{7533}\u{8d2d}\u{8d4e}\u{56de}\u{4ee3}\u{7801}"]
    pub subscribe_redemption_ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "<\u{6700}\u{5c0f}\u{7533}\u{8d2d}\u{8d4e}\u{56de}\u{5355}\u{4f4d}\u{5bf9}\u{5e94}\u{7684}ETF\u{4efd}\u{6570},\u{4f8b}\u{5982}\u{4e0a}\u{8bc1}\"50ETF\"\u{5c31}\u{662f}900000"]
    pub unit: i32,
    #[doc = "<\u{662f}\u{5426}\u{5141}\u{8bb8}\u{7533}\u{8d2d},1-\u{5141}\u{8bb8},0-\u{7981}\u{6b62}"]
    pub subscribe_status: i32,
    #[doc = "<\u{662f}\u{5426}\u{5141}\u{8bb8}\u{8d4e}\u{56de},1-\u{5141}\u{8bb8},0-\u{7981}\u{6b62}"]
    pub redemption_status: i32,
    #[doc = "<\u{6700}\u{5927}\u{73b0}\u{91d1}\u{66ff}\u{4ee3}\u{6bd4}\u{4f8b},\u{5c0f}\u{4e8e}1\u{7684}\u{6570}\u{503c}   TODO \u{662f}\u{5426}\u{91c7}\u{7528}double"]
    pub max_cash_ratio: f64,
    #[doc = "<T\u{65e5}\u{9884}\u{4f30}\u{91d1}\u{989d}\u{5dee}\u{989d}"]
    pub estimate_amount: f64,
    #[doc = "<T-X\u{65e5}\u{73b0}\u{91d1}\u{5dee}\u{989d}"]
    pub cash_component: f64,
    #[doc = "<\u{57fa}\u{91d1}\u{5355}\u{4f4d}\u{51c0}\u{503c}"]
    pub net_value: f64,
    #[doc = "<\u{6700}\u{5c0f}\u{7533}\u{8d4e}\u{5355}\u{4f4d}\u{51c0}\u{503c}\u{603b}\u{91d1}\u{989d}=net_value*unit"]
    pub total_amount: f64,
}
#[test]
fn bindgen_test_layout_XTPQueryETFBaseRsp() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryETFBaseRsp>(),
        88usize,
        concat!("Size of: ", stringify!(XTPQueryETFBaseRsp))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryETFBaseRsp>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPQueryETFBaseRsp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryETFBaseRsp>())).market as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFBaseRsp),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryETFBaseRsp>())).etf as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFBaseRsp),
            "::",
            stringify!(etf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryETFBaseRsp>())).subscribe_redemption_ticker as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFBaseRsp),
            "::",
            stringify!(subscribe_redemption_ticker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryETFBaseRsp>())).unit as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFBaseRsp),
            "::",
            stringify!(unit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryETFBaseRsp>())).subscribe_status as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFBaseRsp),
            "::",
            stringify!(subscribe_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryETFBaseRsp>())).redemption_status as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFBaseRsp),
            "::",
            stringify!(redemption_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryETFBaseRsp>())).max_cash_ratio as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFBaseRsp),
            "::",
            stringify!(max_cash_ratio)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryETFBaseRsp>())).estimate_amount as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFBaseRsp),
            "::",
            stringify!(estimate_amount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryETFBaseRsp>())).cash_component as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFBaseRsp),
            "::",
            stringify!(cash_component)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryETFBaseRsp>())).net_value as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFBaseRsp),
            "::",
            stringify!(net_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryETFBaseRsp>())).total_amount as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFBaseRsp),
            "::",
            stringify!(total_amount)
        )
    );
}
impl Default for XTPQueryETFBaseRsp {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = ""]
#[doc = "\u{67e5}\u{8be2}\u{80a1}\u{7968}ETF\u{5408}\u{7ea6}\u{6210}\u{5206}\u{80a1}\u{4fe1}\u{606f}--\u{8bf7}\u{6c42}\u{7ed3}\u{6784}\u{4f53},\u{8bf7}\u{6c42}\u{53c2}\u{6570}\u{4e3a}:\u{4ea4}\u{6613}\u{5e02}\u{573a}+ETF\u{4e70}\u{5356}\u{4ee3}\u{7801}"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryETFComponentReq {
    #[doc = "\u{4ea4}\u{6613}\u{5e02}\u{573a}"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "ETF\u{4e70}\u{5356}\u{4ee3}\u{7801}"]
    pub ticker: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_XTPQueryETFComponentReq() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryETFComponentReq>(),
        20usize,
        concat!("Size of: ", stringify!(XTPQueryETFComponentReq))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryETFComponentReq>(),
        4usize,
        concat!("Alignment of ", stringify!(XTPQueryETFComponentReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryETFComponentReq>())).market as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFComponentReq),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryETFComponentReq>())).ticker as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFComponentReq),
            "::",
            stringify!(ticker)
        )
    );
}
impl Default for XTPQueryETFComponentReq {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = ""]
#[doc = "\u{67e5}\u{8be2}\u{80a1}\u{7968}ETF\u{6210}\u{5206}\u{80a1}\u{4fe1}\u{606f}--\u{54cd}\u{5e94}\u{7ed3}\u{6784}\u{4f53}\u{ff0c}\u{65e7}\u{7248}\u{672c}\u{3002}"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryETFComponentRspV1 {
    #[doc = "\u{4ea4}\u{6613}\u{5e02}\u{573a}"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "ETF\u{4ee3}\u{7801}"]
    pub ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "\u{6210}\u{4efd}\u{80a1}\u{4ee3}\u{7801}"]
    pub component_ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "\u{6210}\u{4efd}\u{80a1}\u{540d}\u{79f0}"]
    pub component_name: [::std::os::raw::c_char; 64usize],
    #[doc = "\u{6210}\u{4efd}\u{80a1}\u{6570}\u{91cf}"]
    pub quantity: i64,
    #[doc = "\u{6210}\u{4efd}\u{80a1}\u{4ea4}\u{6613}\u{5e02}\u{573a}"]
    pub component_market: XTP_MARKET_TYPE,
    #[doc = "\u{6210}\u{4efd}\u{80a1}\u{66ff}\u{4ee3}\u{6807}\u{8bc6}"]
    pub replace_type: ETF_REPLACE_TYPE,
    #[doc = "\u{6ea2}\u{4ef7}\u{6bd4}\u{4f8b}"]
    pub premium_ratio: f64,
    #[doc = "\u{6210}\u{5206}\u{80a1}\u{66ff}\u{4ee3}\u{6807}\u{8bc6}\u{4e3a}\u{5fc5}\u{987b}\u{73b0}\u{91d1}\u{66ff}\u{4ee3}\u{65f6}\u{5019}\u{7684}\u{603b}\u{91d1}\u{989d}"]
    pub amount: f64,
}
#[test]
fn bindgen_test_layout_XTPQueryETFComponentRspV1() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryETFComponentRspV1>(),
        136usize,
        concat!("Size of: ", stringify!(XTPQueryETFComponentRspV1))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryETFComponentRspV1>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPQueryETFComponentRspV1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryETFComponentRspV1>())).market as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFComponentRspV1),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryETFComponentRspV1>())).ticker as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFComponentRspV1),
            "::",
            stringify!(ticker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryETFComponentRspV1>())).component_ticker as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFComponentRspV1),
            "::",
            stringify!(component_ticker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryETFComponentRspV1>())).component_name as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFComponentRspV1),
            "::",
            stringify!(component_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryETFComponentRspV1>())).quantity as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFComponentRspV1),
            "::",
            stringify!(quantity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryETFComponentRspV1>())).component_market as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFComponentRspV1),
            "::",
            stringify!(component_market)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryETFComponentRspV1>())).replace_type as *const _ as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFComponentRspV1),
            "::",
            stringify!(replace_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryETFComponentRspV1>())).premium_ratio as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFComponentRspV1),
            "::",
            stringify!(premium_ratio)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryETFComponentRspV1>())).amount as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFComponentRspV1),
            "::",
            stringify!(amount)
        )
    );
}
impl Default for XTPQueryETFComponentRspV1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = ""]
#[doc = "\u{67e5}\u{8be2}\u{80a1}\u{7968}ETF\u{6210}\u{5206}\u{80a1}\u{4fe1}\u{606f}--\u{54cd}\u{5e94}\u{7ed3}\u{6784}\u{4f53}"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryETFComponentRsp {
    #[doc = "\u{4ea4}\u{6613}\u{5e02}\u{573a}"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "ETF\u{4ee3}\u{7801}"]
    pub ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "\u{6210}\u{4efd}\u{80a1}\u{4ee3}\u{7801}"]
    pub component_ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "\u{6210}\u{4efd}\u{80a1}\u{540d}\u{79f0}"]
    pub component_name: [::std::os::raw::c_char; 64usize],
    #[doc = "\u{6210}\u{4efd}\u{80a1}\u{6570}\u{91cf}"]
    pub quantity: i64,
    #[doc = "\u{6210}\u{4efd}\u{80a1}\u{4ea4}\u{6613}\u{5e02}\u{573a}"]
    pub component_market: XTP_MARKET_TYPE,
    #[doc = "\u{6210}\u{4efd}\u{80a1}\u{66ff}\u{4ee3}\u{6807}\u{8bc6}"]
    pub replace_type: ETF_REPLACE_TYPE,
    #[doc = "\u{6ea2}\u{4ef7}\u{6bd4}\u{4f8b}"]
    pub premium_ratio: f64,
    #[doc = "\u{6210}\u{5206}\u{80a1}\u{66ff}\u{4ee3}\u{6807}\u{8bc6}\u{4e3a}\u{5fc5}\u{987b}\u{73b0}\u{91d1}\u{66ff}\u{4ee3}\u{65f6}\u{5019}\u{7684}\u{603b}\u{91d1}\u{989d}"]
    pub amount: f64,
    #[doc = "\u{7533}\u{8d2d}\u{6ea2}\u{4ef7}\u{6bd4}\u{4f8b}"]
    pub creation_premium_ratio: f64,
    #[doc = "\u{8d4e}\u{56de}\u{6ea2}\u{4ef7}\u{6bd4}\u{4f8b}"]
    pub redemption_discount_ratio: f64,
    #[doc = "\u{7533}\u{8d2d}\u{65f6}\u{ff0c}\u{6210}\u{5206}\u{80a1}\u{66ff}\u{4ee3}\u{6807}\u{8bc6}\u{4e3a}\u{5fc5}\u{987b}\u{73b0}\u{91d1}\u{66ff}\u{4ee3}\u{65f6}\u{5019}\u{7684}\u{603b}\u{91d1}\u{989d}"]
    pub creation_amount: f64,
    #[doc = "\u{8d4e}\u{56de}\u{65f6}\u{ff0c}\u{6210}\u{5206}\u{80a1}\u{66ff}\u{4ee3}\u{6807}\u{8bc6}\u{4e3a}\u{5fc5}\u{987b}\u{73b0}\u{91d1}\u{66ff}\u{4ee3}\u{65f6}\u{5019}\u{7684}\u{603b}\u{91d1}\u{989d}"]
    pub redemption_amount: f64,
}
#[test]
fn bindgen_test_layout_XTPQueryETFComponentRsp() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryETFComponentRsp>(),
        168usize,
        concat!("Size of: ", stringify!(XTPQueryETFComponentRsp))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryETFComponentRsp>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPQueryETFComponentRsp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryETFComponentRsp>())).market as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFComponentRsp),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryETFComponentRsp>())).ticker as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFComponentRsp),
            "::",
            stringify!(ticker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryETFComponentRsp>())).component_ticker as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFComponentRsp),
            "::",
            stringify!(component_ticker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryETFComponentRsp>())).component_name as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFComponentRsp),
            "::",
            stringify!(component_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryETFComponentRsp>())).quantity as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFComponentRsp),
            "::",
            stringify!(quantity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryETFComponentRsp>())).component_market as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFComponentRsp),
            "::",
            stringify!(component_market)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryETFComponentRsp>())).replace_type as *const _ as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFComponentRsp),
            "::",
            stringify!(replace_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryETFComponentRsp>())).premium_ratio as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFComponentRsp),
            "::",
            stringify!(premium_ratio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryETFComponentRsp>())).amount as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFComponentRsp),
            "::",
            stringify!(amount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryETFComponentRsp>())).creation_premium_ratio as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFComponentRsp),
            "::",
            stringify!(creation_premium_ratio)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryETFComponentRsp>())).redemption_discount_ratio
                as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFComponentRsp),
            "::",
            stringify!(redemption_discount_ratio)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryETFComponentRsp>())).creation_amount as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFComponentRsp),
            "::",
            stringify!(creation_amount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryETFComponentRsp>())).redemption_amount as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFComponentRsp),
            "::",
            stringify!(redemption_amount)
        )
    );
}
impl Default for XTPQueryETFComponentRsp {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = ""]
#[doc = "\u{67e5}\u{8be2}\u{5f53}\u{65e5}\u{53ef}\u{7533}\u{8d2d}\u{65b0}\u{80a1}\u{4fe1}\u{606f}"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryIPOTickerRsp {
    #[doc = "\u{4ea4}\u{6613}\u{5e02}\u{573a}"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "\u{7533}\u{8d2d}\u{4ee3}\u{7801}"]
    pub ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "\u{7533}\u{8d2d}\u{80a1}\u{7968}\u{540d}\u{79f0}"]
    pub ticker_name: [::std::os::raw::c_char; 64usize],
    #[doc = " \u{8bc1}\u{5238}\u{7c7b}\u{522b}"]
    pub ticker_type: XTP_TICKER_TYPE,
    #[doc = "\u{7533}\u{8d2d}\u{4ef7}\u{683c}"]
    pub price: f64,
    #[doc = "\u{7533}\u{8d2d}\u{5355}\u{5143}"]
    pub unit: i32,
    #[doc = "\u{6700}\u{5927}\u{5141}\u{8bb8}\u{7533}\u{8d2d}\u{6570}\u{91cf}"]
    pub qty_upper_limit: i32,
}
#[test]
fn bindgen_test_layout_XTPQueryIPOTickerRsp() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryIPOTickerRsp>(),
        104usize,
        concat!("Size of: ", stringify!(XTPQueryIPOTickerRsp))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryIPOTickerRsp>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPQueryIPOTickerRsp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryIPOTickerRsp>())).market as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryIPOTickerRsp),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryIPOTickerRsp>())).ticker as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryIPOTickerRsp),
            "::",
            stringify!(ticker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryIPOTickerRsp>())).ticker_name as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryIPOTickerRsp),
            "::",
            stringify!(ticker_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryIPOTickerRsp>())).ticker_type as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryIPOTickerRsp),
            "::",
            stringify!(ticker_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryIPOTickerRsp>())).price as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryIPOTickerRsp),
            "::",
            stringify!(price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryIPOTickerRsp>())).unit as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryIPOTickerRsp),
            "::",
            stringify!(unit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryIPOTickerRsp>())).qty_upper_limit as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryIPOTickerRsp),
            "::",
            stringify!(qty_upper_limit)
        )
    );
}
impl Default for XTPQueryIPOTickerRsp {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = ""]
#[doc = "\u{67e5}\u{8be2}\u{7528}\u{6237}\u{7533}\u{8d2d}\u{989d}\u{5ea6}-\u{65e7}\u{7248}"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryIPOQuotaRspV1 {
    #[doc = "\u{4ea4}\u{6613}\u{5e02}\u{573a}"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "\u{53ef}\u{7533}\u{8d2d}\u{989d}\u{5ea6}"]
    pub quantity: i32,
}
#[test]
fn bindgen_test_layout_XTPQueryIPOQuotaRspV1() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryIPOQuotaRspV1>(),
        8usize,
        concat!("Size of: ", stringify!(XTPQueryIPOQuotaRspV1))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryIPOQuotaRspV1>(),
        4usize,
        concat!("Alignment of ", stringify!(XTPQueryIPOQuotaRspV1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryIPOQuotaRspV1>())).market as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryIPOQuotaRspV1),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryIPOQuotaRspV1>())).quantity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryIPOQuotaRspV1),
            "::",
            stringify!(quantity)
        )
    );
}
impl Default for XTPQueryIPOQuotaRspV1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = ""]
#[doc = "\u{67e5}\u{8be2}\u{7528}\u{6237}\u{7533}\u{8d2d}\u{989d}\u{5ea6}-\u{5305}\u{542b}\u{521b}\u{4e1a}\u{677f}\u{989d}\u{5ea6}"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryIPOQuotaRsp {
    #[doc = "\u{4ea4}\u{6613}\u{5e02}\u{573a}"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "\u{53ef}\u{7533}\u{8d2d}\u{989d}\u{5ea6}"]
    pub quantity: i32,
    #[doc = " \u{4e0a}\u{6d77}\u{79d1}\u{521b}\u{677f}\u{989d}\u{5ea6}"]
    pub tech_quantity: i32,
    #[doc = " \u{4fdd}\u{7559}"]
    pub unused: i32,
}
#[test]
fn bindgen_test_layout_XTPQueryIPOQuotaRsp() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryIPOQuotaRsp>(),
        16usize,
        concat!("Size of: ", stringify!(XTPQueryIPOQuotaRsp))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryIPOQuotaRsp>(),
        4usize,
        concat!("Alignment of ", stringify!(XTPQueryIPOQuotaRsp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryIPOQuotaRsp>())).market as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryIPOQuotaRsp),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryIPOQuotaRsp>())).quantity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryIPOQuotaRsp),
            "::",
            stringify!(quantity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryIPOQuotaRsp>())).tech_quantity as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryIPOQuotaRsp),
            "::",
            stringify!(tech_quantity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryIPOQuotaRsp>())).unused as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryIPOQuotaRsp),
            "::",
            stringify!(unused)
        )
    );
}
impl Default for XTPQueryIPOQuotaRsp {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = ""]
#[doc = "\u{7533}\u{62a5}\u{7528}\u{6237}\u{7684}ip\u{548c}mac\u{7b49}\u{4fe1}\u{606f}\u{ff0c}\u{4ec5}\u{9650}\u{6388}\u{6743}\u{7528}\u{6237}\u{4f7f}\u{7528}"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPUserTerminalInfoReq {
    #[doc = "<\u{672c}\u{5730}IP\u{5730}\u{5740}"]
    pub local_ip: [::std::os::raw::c_char; 64usize],
    #[doc = "<MAC\u{5730}\u{5740}"]
    pub mac_addr: [::std::os::raw::c_char; 16usize],
    #[doc = "<\u{786c}\u{76d8}\u{5e8f}\u{5217}\u{53f7}"]
    pub hd: [::std::os::raw::c_char; 24usize],
    #[doc = "<\u{7ec8}\u{7aef}\u{7c7b}\u{578b}"]
    pub term_type: XTPTerminalType,
    #[doc = "<\u{516c}\u{7f51}IP\u{5730}\u{5740}"]
    pub internet_ip: [::std::os::raw::c_char; 64usize],
    #[doc = "<\u{516c}\u{7f51}\u{7aef}\u{53e3}\u{53f7}"]
    pub internet_port: i32,
    #[doc = "<\u{5ba2}\u{6237}\u{7aef}\u{7248}\u{672c}\u{53f7}"]
    pub client_version: XTPVersionType,
    #[doc = "<MacOS\u{7cfb}\u{7edf}\u{7684}\u{5e8f}\u{5217}\u{53f7}\u{ff0c}\u{4ec5}\u{4e3a}MacOS\u{7cfb}\u{7edf}\u{9700}\u{8981}\u{586b}\u{5199}"]
    pub macos_sno: [::std::os::raw::c_char; 21usize],
    #[doc = "<\u{9884}\u{7559}"]
    pub unused: [::std::os::raw::c_char; 27usize],
}
#[test]
fn bindgen_test_layout_XTPUserTerminalInfoReq() {
    assert_eq!(
        ::std::mem::size_of::<XTPUserTerminalInfoReq>(),
        240usize,
        concat!("Size of: ", stringify!(XTPUserTerminalInfoReq))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPUserTerminalInfoReq>(),
        4usize,
        concat!("Alignment of ", stringify!(XTPUserTerminalInfoReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPUserTerminalInfoReq>())).local_ip as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPUserTerminalInfoReq),
            "::",
            stringify!(local_ip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPUserTerminalInfoReq>())).mac_addr as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPUserTerminalInfoReq),
            "::",
            stringify!(mac_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPUserTerminalInfoReq>())).hd as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPUserTerminalInfoReq),
            "::",
            stringify!(hd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPUserTerminalInfoReq>())).term_type as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPUserTerminalInfoReq),
            "::",
            stringify!(term_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPUserTerminalInfoReq>())).internet_ip as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPUserTerminalInfoReq),
            "::",
            stringify!(internet_ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPUserTerminalInfoReq>())).internet_port as *const _ as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPUserTerminalInfoReq),
            "::",
            stringify!(internet_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPUserTerminalInfoReq>())).client_version as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPUserTerminalInfoReq),
            "::",
            stringify!(client_version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPUserTerminalInfoReq>())).macos_sno as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPUserTerminalInfoReq),
            "::",
            stringify!(macos_sno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPUserTerminalInfoReq>())).unused as *const _ as usize },
        213usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPUserTerminalInfoReq),
            "::",
            stringify!(unused)
        )
    );
}
impl Default for XTPUserTerminalInfoReq {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = ""]
#[doc = "\u{67e5}\u{8be2}\u{671f}\u{6743}\u{7ade}\u{4ef7}\u{4ea4}\u{6613}\u{4e1a}\u{52a1}\u{53c2}\u{8003}\u{4fe1}\u{606f}--\u{8bf7}\u{6c42}\u{7ed3}\u{6784}\u{4f53},\u{8bf7}\u{6c42}\u{53c2}\u{6570}\u{4e3a}:\u{4ea4}\u{6613}\u{5e02}\u{573a}+8\u{4f4d}\u{671f}\u{6743}\u{4ee3}\u{7801}"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryOptionAuctionInfoReq {
    #[doc = "\u{4ea4}\u{6613}\u{5e02}\u{573a}"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "8\u{4f4d}\u{671f}\u{6743}\u{5408}\u{7ea6}\u{4ee3}\u{7801}"]
    pub ticker: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_XTPQueryOptionAuctionInfoReq() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryOptionAuctionInfoReq>(),
        20usize,
        concat!("Size of: ", stringify!(XTPQueryOptionAuctionInfoReq))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryOptionAuctionInfoReq>(),
        4usize,
        concat!("Alignment of ", stringify!(XTPQueryOptionAuctionInfoReq))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoReq>())).market as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoReq),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoReq>())).ticker as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoReq),
            "::",
            stringify!(ticker)
        )
    );
}
impl Default for XTPQueryOptionAuctionInfoReq {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = ""]
#[doc = "\u{67e5}\u{8be2}\u{671f}\u{6743}\u{7ade}\u{4ef7}\u{4ea4}\u{6613}\u{4e1a}\u{52a1}\u{53c2}\u{8003}\u{4fe1}\u{606f}"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryOptionAuctionInfoRsp {
    #[doc = "<\u{5408}\u{7ea6}\u{7f16}\u{7801}\u{ff0c}\u{62a5}\u{5355}ticker\u{91c7}\u{7528}\u{672c}\u{5b57}\u{6bb5}"]
    pub ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "<\u{8bc1}\u{5238}\u{4ee3}\u{7801}\u{6e90}"]
    pub security_id_source: XTP_MARKET_TYPE,
    #[doc = "<\u{5408}\u{7ea6}\u{7b80}\u{79f0}"]
    pub symbol: [::std::os::raw::c_char; 64usize],
    #[doc = "<\u{5408}\u{7ea6}\u{4ea4}\u{6613}\u{4ee3}\u{7801}"]
    pub contract_id: [::std::os::raw::c_char; 64usize],
    #[doc = "<\u{57fa}\u{7840}\u{8bc1}\u{5238}\u{4ee3}\u{7801}"]
    pub underlying_security_id: [::std::os::raw::c_char; 16usize],
    #[doc = "<\u{57fa}\u{7840}\u{8bc1}\u{5238}\u{4ee3}\u{7801}\u{6e90}"]
    pub underlying_security_id_source: XTP_MARKET_TYPE,
    #[doc = "<\u{4e0a}\u{5e02}\u{65e5}\u{671f}\u{ff0c}\u{683c}\u{5f0f}\u{4e3a}YYYYMMDD"]
    pub list_date: u32,
    #[doc = "<\u{6700}\u{540e}\u{4ea4}\u{6613}\u{65e5}\u{ff0c}\u{683c}\u{5f0f}\u{4e3a}YYYYMMDD"]
    pub last_trade_date: u32,
    #[doc = "<\u{8bc1}\u{5238}\u{7c7b}\u{522b}"]
    pub ticker_type: XTP_TICKER_TYPE,
    #[doc = "<\u{662f}\u{5426}\u{652f}\u{6301}\u{5f53}\u{65e5}\u{56de}\u{8f6c}\u{4ea4}\u{6613}\u{ff0c}1-\u{5141}\u{8bb8}\u{ff0c}0-\u{4e0d}\u{5141}\u{8bb8}"]
    pub day_trading: i32,
    #[doc = "<\u{8ba4}\u{8d2d}\u{6216}\u{8ba4}\u{6cbd}"]
    pub call_or_put: XTP_OPT_CALL_OR_PUT_TYPE,
    #[doc = "<\u{884c}\u{6743}\u{4ea4}\u{5272}\u{65e5}\u{ff0c}\u{683c}\u{5f0f}\u{4e3a}YYYYMMDD"]
    pub delivery_day: u32,
    #[doc = "<\u{4ea4}\u{5272}\u{6708}\u{4efd}\u{ff0c}\u{683c}\u{5f0f}\u{4e3a}YYYYMM"]
    pub delivery_month: u32,
    #[doc = "<\u{884c}\u{6743}\u{65b9}\u{5f0f}"]
    pub exercise_type: XTP_OPT_EXERCISE_TYPE_TYPE,
    #[doc = "<\u{884c}\u{6743}\u{8d77}\u{59cb}\u{65e5}\u{671f}\u{ff0c}\u{683c}\u{5f0f}\u{4e3a}YYYYMMDD"]
    pub exercise_begin_date: u32,
    #[doc = "<\u{884c}\u{6743}\u{7ed3}\u{675f}\u{65e5}\u{671f}\u{ff0c}\u{683c}\u{5f0f}\u{4e3a}YYYYMMDD"]
    pub exercise_end_date: u32,
    #[doc = "<\u{884c}\u{6743}\u{4ef7}\u{683c}"]
    pub exercise_price: f64,
    #[doc = "<\u{6570}\u{91cf}\u{5355}\u{4f4d}\u{ff0c}\u{5bf9}\u{4e8e}\u{67d0}\u{4e00}\u{8bc1}\u{5238}\u{7533}\u{62a5}\u{7684}\u{59d4}\u{6258}\u{ff0c}\u{5176}\u{59d4}\u{6258}\u{6570}\u{91cf}\u{5b57}\u{6bb5}\u{5fc5}\u{987b}\u{4e3a}\u{8be5}\u{8bc1}\u{5238}\u{6570}\u{91cf}\u{5355}\u{4f4d}\u{7684}\u{6574}\u{6570}\u{500d}"]
    pub qty_unit: i64,
    #[doc = "<\u{5408}\u{7ea6}\u{5355}\u{4f4d}"]
    pub contract_unit: i64,
    #[doc = "<\u{5408}\u{7ea6}\u{6301}\u{4ed3}\u{91cf}"]
    pub contract_position: i64,
    #[doc = "<\u{5408}\u{7ea6}\u{524d}\u{6536}\u{76d8}\u{4ef7}"]
    pub prev_close_price: f64,
    #[doc = "<\u{5408}\u{7ea6}\u{524d}\u{7ed3}\u{7b97}\u{4ef7}"]
    pub prev_clearing_price: f64,
    #[doc = "<\u{9650}\u{4ef7}\u{4e70}\u{6700}\u{5927}\u{91cf}"]
    pub lmt_buy_max_qty: i64,
    #[doc = "<\u{9650}\u{4ef7}\u{4e70}\u{6700}\u{5c0f}\u{91cf}"]
    pub lmt_buy_min_qty: i64,
    #[doc = "<\u{9650}\u{4ef7}\u{5356}\u{6700}\u{5927}\u{91cf}"]
    pub lmt_sell_max_qty: i64,
    #[doc = "<\u{9650}\u{4ef7}\u{5356}\u{6700}\u{5c0f}\u{91cf}"]
    pub lmt_sell_min_qty: i64,
    #[doc = "<\u{5e02}\u{4ef7}\u{4e70}\u{6700}\u{5927}\u{91cf}"]
    pub mkt_buy_max_qty: i64,
    #[doc = "<\u{5e02}\u{4ef7}\u{4e70}\u{6700}\u{5c0f}\u{91cf}"]
    pub mkt_buy_min_qty: i64,
    #[doc = "<\u{5e02}\u{4ef7}\u{5356}\u{6700}\u{5927}\u{91cf}"]
    pub mkt_sell_max_qty: i64,
    #[doc = "<\u{5e02}\u{4ef7}\u{5356}\u{6700}\u{5c0f}\u{91cf}"]
    pub mkt_sell_min_qty: i64,
    #[doc = "<\u{6700}\u{5c0f}\u{62a5}\u{4ef7}\u{5355}\u{4f4d}"]
    pub price_tick: f64,
    #[doc = "<\u{6da8}\u{505c}\u{4ef7}"]
    pub upper_limit_price: f64,
    #[doc = "<\u{8dcc}\u{505c}\u{4ef7}"]
    pub lower_limit_price: f64,
    #[doc = "<\u{4eca}\u{5356}\u{5f00}\u{6bcf}\u{5f20}\u{4fdd}\u{8bc1}\u{91d1}"]
    pub sell_margin: f64,
    #[doc = "<\u{4ea4}\u{6613}\u{6240}\u{4fdd}\u{8bc1}\u{91d1}\u{6bd4}\u{4f8b}\u{8ba1}\u{7b97}\u{53c2}\u{6570}\u{4e00}"]
    pub margin_ratio_param1: f64,
    #[doc = "<\u{4ea4}\u{6613}\u{6240}\u{4fdd}\u{8bc1}\u{91d1}\u{6bd4}\u{4f8b}\u{8ba1}\u{7b97}\u{53c2}\u{6570}\u{4e8c}"]
    pub margin_ratio_param2: f64,
    #[doc = "<\u{ff08}\u{4fdd}\u{7559}\u{5b57}\u{6bb5}\u{ff09}"]
    pub unknown: [u64; 20usize],
}
#[test]
fn bindgen_test_layout_XTPQueryOptionAuctionInfoRsp() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryOptionAuctionInfoRsp>(),
        528usize,
        concat!("Size of: ", stringify!(XTPQueryOptionAuctionInfoRsp))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryOptionAuctionInfoRsp>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPQueryOptionAuctionInfoRsp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).ticker as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(ticker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).security_id_source as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(security_id_source)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).symbol as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(symbol)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).contract_id as *const _
                as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(contract_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).underlying_security_id
                as *const _ as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(underlying_security_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).underlying_security_id_source
                as *const _ as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(underlying_security_id_source)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).list_date as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(list_date)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).last_trade_date as *const _
                as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(last_trade_date)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).ticker_type as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(ticker_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).day_trading as *const _
                as usize
        },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(day_trading)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).call_or_put as *const _
                as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(call_or_put)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).delivery_day as *const _
                as usize
        },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(delivery_day)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).delivery_month as *const _
                as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(delivery_month)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).exercise_type as *const _
                as usize
        },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(exercise_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).exercise_begin_date as *const _
                as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(exercise_begin_date)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).exercise_end_date as *const _
                as usize
        },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(exercise_end_date)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).exercise_price as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(exercise_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).qty_unit as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(qty_unit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).contract_unit as *const _
                as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(contract_unit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).contract_position as *const _
                as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(contract_position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).prev_close_price as *const _
                as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(prev_close_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).prev_clearing_price as *const _
                as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(prev_clearing_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).lmt_buy_max_qty as *const _
                as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(lmt_buy_max_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).lmt_buy_min_qty as *const _
                as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(lmt_buy_min_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).lmt_sell_max_qty as *const _
                as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(lmt_sell_max_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).lmt_sell_min_qty as *const _
                as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(lmt_sell_min_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).mkt_buy_max_qty as *const _
                as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(mkt_buy_max_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).mkt_buy_min_qty as *const _
                as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(mkt_buy_min_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).mkt_sell_max_qty as *const _
                as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(mkt_sell_max_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).mkt_sell_min_qty as *const _
                as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(mkt_sell_min_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).price_tick as *const _ as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(price_tick)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).upper_limit_price as *const _
                as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(upper_limit_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).lower_limit_price as *const _
                as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(lower_limit_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).sell_margin as *const _
                as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(sell_margin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).margin_ratio_param1 as *const _
                as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(margin_ratio_param1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).margin_ratio_param2 as *const _
                as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(margin_ratio_param2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).unknown as *const _ as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(unknown)
        )
    );
}
impl Default for XTPQueryOptionAuctionInfoRsp {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " \u{671f}\u{6743}\u{7ec4}\u{5408}\u{7b56}\u{7565}\u{64a4}\u{5355}\u{9519}\u{8bef}\u{54cd}\u{5e94}\u{7ed3}\u{6784}\u{4f53}"]
pub type XTPOptCombOrderCancelInfo = XTPOrderCancelInfo;
#[doc = " \u{671f}\u{6743}\u{7ec4}\u{5408}\u{7b56}\u{7565}\u{7684}\u{6210}\u{5206}\u{5408}\u{7ea6}\u{4fe1}\u{606f}"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPCombLegStrategy {
    #[doc = "< \u{5408}\u{7ea6}\u{7c7b}\u{578b}\u{ff0c}\u{8ba4}\u{6cbd}\u{6216}\u{8ba4}\u{8d2d}"]
    pub call_or_put: XTP_OPT_CALL_OR_PUT_TYPE,
    #[doc = "< \u{6743}\u{5229}\u{4ed3}\u{6216}\u{8005}\u{4e49}\u{52a1}\u{4ed3}\u{6216}\u{5907}\u{5151}\u{4e49}\u{52a1}\u{4ed3}"]
    pub position_side: XTP_POSITION_DIRECTION_TYPE,
    #[doc = "< \u{884c}\u{6743}\u{4ef7}\u{987a}\u{5e8f}"]
    pub exercise_price_seq: TXTPExerciseSeqType,
    #[doc = "< \u{5230}\u{671f}\u{65e5}\u{987a}\u{5e8f}"]
    pub expire_date_seq: i32,
    #[doc = "< \u{5355}\u{4efd}\u{7ec4}\u{5408}\u{7b56}\u{7565}\u{4e2d}\u{5305}\u{542b}\u{7684}\u{6b64}\u{5408}\u{7ea6}\u{5f20}\u{6570}"]
    pub leg_qty: i64,
}
#[test]
fn bindgen_test_layout_XTPCombLegStrategy() {
    assert_eq!(
        ::std::mem::size_of::<XTPCombLegStrategy>(),
        24usize,
        concat!("Size of: ", stringify!(XTPCombLegStrategy))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPCombLegStrategy>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPCombLegStrategy))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCombLegStrategy>())).call_or_put as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCombLegStrategy),
            "::",
            stringify!(call_or_put)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPCombLegStrategy>())).position_side as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCombLegStrategy),
            "::",
            stringify!(position_side)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPCombLegStrategy>())).exercise_price_seq as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCombLegStrategy),
            "::",
            stringify!(exercise_price_seq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPCombLegStrategy>())).expire_date_seq as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCombLegStrategy),
            "::",
            stringify!(expire_date_seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCombLegStrategy>())).leg_qty as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCombLegStrategy),
            "::",
            stringify!(leg_qty)
        )
    );
}
impl Default for XTPCombLegStrategy {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " \u{67e5}\u{8be2}\u{671f}\u{6743}\u{7ec4}\u{5408}\u{7b56}\u{7565}\u{4fe1}\u{606f}\u{7684}\u{54cd}\u{5e94}"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryCombineStrategyInfoRsp {
    #[doc = "< \u{7ec4}\u{5408}\u{7b56}\u{7565}\u{4ee3}\u{7801}\u{ff0c}CNSJC\u{3001}PXSJC\u{3001}PNSJC\u{3001}CXSJC\u{3001}KS\u{3001}KKS"]
    pub strategy_id: [::std::os::raw::c_char; 10usize],
    #[doc = "< \u{7ec4}\u{5408}\u{7b56}\u{7565}\u{540d}\u{79f0}\u{ff0c}\u{8ba4}\u{8d2d}\u{725b}\u{5e02}\u{4ef7}\u{5dee}\u{7b56}\u{7565}\u{3001}\u{8ba4}\u{6cbd}\u{718a}\u{5e02}\u{4ef7}\u{5dee}\u{7b56}\u{7565}\u{3001}\u{8ba4}\u{6cbd}\u{725b}\u{5e02}\u{4ef7}\u{5dee}\u{7b56}\u{7565}\u{3001}\u{8ba4}\u{8d2d}\u{718a}\u{5e02}\u{4ef7}\u{5dee}\u{7b56}\u{7565}\u{3001}\u{8de8}\u{5f0f}\u{7a7a}\u{5934}\u{3001}\u{5bbd}\u{8de8}\u{5f0f}\u{7a7a}\u{5934}"]
    pub strategy_name: [::std::os::raw::c_char; 32usize],
    #[doc = "< \u{4ea4}\u{6613}\u{5e02}\u{573a}"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "< \u{6210}\u{5206}\u{5408}\u{7ea6}\u{4e2a}\u{6570}\u{ff0c}1-4\u{4e2a}\u{ff0c}\u{5373}\u{4e0b}\u{9762}\u{6570}\u{7ec4}\u{7684}\u{5b9e}\u{9645}\u{5927}\u{5c0f}"]
    pub leg_num: i32,
    #[doc = "< \u{6210}\u{5206}\u{5408}\u{7ea6}\u{4fe1}\u{606f}\u{ff0c}\u{6700}\u{591a}\u{56db}\u{6761}\u{817f}"]
    pub leg_strategy: [XTPCombLegStrategy; 4usize],
    #[doc = "< \u{5230}\u{671f}\u{65e5}\u{8981}\u{6c42}\u{3002}\u{679a}\u{4e3e}\u{503c}\u{4e3a}\u{ff1a}\u{540c}\u{5230}\u{671f}\u{65e5}\u{ff0c}\u{4e0d}\u{540c}\u{5230}\u{671f}\u{65e5}\u{ff0c}\u{65e0}\u{5230}\u{671f}\u{65e5}\u{8981}\u{6c42}"]
    pub expire_date_type: XTP_EXPIRE_DATE_TYPE,
    #[doc = "< \u{6807}\u{7684}\u{8981}\u{6c42}\u{3002}\u{679a}\u{4e3e}\u{503c}\u{4e3a}\u{ff1a}\u{76f8}\u{540c}\u{6807}\u{7684}\u{ff0c}\u{4e0d}\u{540c}\u{6807}\u{7684}\u{ff0c}\u{65e0}\u{6807}\u{7684}\u{8981}\u{6c42}"]
    pub underlying_type: XTP_UNDERLYING_TYPE,
    #[doc = "< \u{81ea}\u{52a8}\u{89e3}\u{9664}\u{7c7b}\u{578b}\u{3002}\u{679a}\u{4e3e}\u{503c}\u{4e3a}\u{ff1a}-1\u{ff1a}\u{4e0d}\u{9002}\u{7528}\u{ff1b}0\u{ff1a}\u{5230}\u{671f}\u{65e5}\u{81ea}\u{52a8}\u{89e3}\u{9664}\u{ff1b}1\u{ff1a}E-1\u{65e5}\u{81ea}\u{52a8}\u{89e3}\u{9664}\u{ff0c}\u{4f9d}\u{6b21}\u{7c7b}\u{63a8}"]
    pub auto_sep_type: XTP_AUTO_SPLIT_TYPE,
    #[doc = "< \u{9884}\u{7559}\u{7684}\u{5b57}\u{6bb5}"]
    pub reserved: [u64; 10usize],
}
#[test]
fn bindgen_test_layout_XTPQueryCombineStrategyInfoRsp() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryCombineStrategyInfoRsp>(),
        248usize,
        concat!("Size of: ", stringify!(XTPQueryCombineStrategyInfoRsp))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryCombineStrategyInfoRsp>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPQueryCombineStrategyInfoRsp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryCombineStrategyInfoRsp>())).strategy_id as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryCombineStrategyInfoRsp),
            "::",
            stringify!(strategy_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryCombineStrategyInfoRsp>())).strategy_name as *const _
                as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryCombineStrategyInfoRsp),
            "::",
            stringify!(strategy_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryCombineStrategyInfoRsp>())).market as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryCombineStrategyInfoRsp),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryCombineStrategyInfoRsp>())).leg_num as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryCombineStrategyInfoRsp),
            "::",
            stringify!(leg_num)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryCombineStrategyInfoRsp>())).leg_strategy as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryCombineStrategyInfoRsp),
            "::",
            stringify!(leg_strategy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryCombineStrategyInfoRsp>())).expire_date_type as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryCombineStrategyInfoRsp),
            "::",
            stringify!(expire_date_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryCombineStrategyInfoRsp>())).underlying_type as *const _
                as usize
        },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryCombineStrategyInfoRsp),
            "::",
            stringify!(underlying_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryCombineStrategyInfoRsp>())).auto_sep_type as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryCombineStrategyInfoRsp),
            "::",
            stringify!(auto_sep_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryCombineStrategyInfoRsp>())).reserved as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryCombineStrategyInfoRsp),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for XTPQueryCombineStrategyInfoRsp {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " \u{7ec4}\u{5408}\u{7b56}\u{7565}\u{817f}\u{5408}\u{7ea6}\u{4fe1}\u{606f}\u{7ed3}\u{6784}\u{4f53}"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPOptCombLegInfo {
    #[doc = "< \u{6210}\u{5206}\u{5408}\u{7ea6}\u{4ee3}\u{7801}"]
    pub leg_security_id: [::std::os::raw::c_char; 16usize],
    #[doc = "< \u{5408}\u{7ea6}\u{7c7b}\u{578b}\u{ff0c}\u{8ba4}\u{6cbd}\u{6216}\u{8ba4}\u{8d2d}\u{3002}"]
    pub leg_cntr_type: XTP_OPT_CALL_OR_PUT_TYPE,
    #[doc = "< \u{6301}\u{4ed3}\u{65b9}\u{5411}\u{ff0c}\u{6743}\u{5229}\u{65b9}\u{6216}\u{4e49}\u{52a1}\u{65b9}\u{3002}"]
    pub leg_side: XTP_POSITION_DIRECTION_TYPE,
    #[doc = "< \u{5907}\u{5151}\u{6807}\u{7b7e}"]
    pub leg_covered: XTP_OPT_COVERED_OR_UNCOVERED,
    #[doc = "< \u{6210}\u{5206}\u{5408}\u{7ea6}\u{6570}\u{91cf}\u{ff08}\u{5f20}\u{ff09}"]
    pub leg_qty: i32,
}
#[test]
fn bindgen_test_layout_XTPOptCombLegInfo() {
    assert_eq!(
        ::std::mem::size_of::<XTPOptCombLegInfo>(),
        32usize,
        concat!("Size of: ", stringify!(XTPOptCombLegInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPOptCombLegInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(XTPOptCombLegInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombLegInfo>())).leg_security_id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombLegInfo),
            "::",
            stringify!(leg_security_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOptCombLegInfo>())).leg_cntr_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombLegInfo),
            "::",
            stringify!(leg_cntr_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOptCombLegInfo>())).leg_side as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombLegInfo),
            "::",
            stringify!(leg_side)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOptCombLegInfo>())).leg_covered as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombLegInfo),
            "::",
            stringify!(leg_covered)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOptCombLegInfo>())).leg_qty as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombLegInfo),
            "::",
            stringify!(leg_qty)
        )
    );
}
impl Default for XTPOptCombLegInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "\u{671f}\u{6743}\u{7ec4}\u{5408}\u{7b56}\u{7565}\u{62a5}\u{5355}\u{9644}\u{52a0}\u{4fe1}\u{606f}\u{7ed3}\u{6784}\u{4f53}"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPOptCombPlugin {
    #[doc = "< \u{7ec4}\u{5408}\u{7b56}\u{7565}\u{4ee3}\u{7801}\u{ff0c}\u{6bd4}\u{5982}CNSJC\u{8ba4}\u{8d2d}\u{725b}\u{5e02}\u{4ef7}\u{5dee}\u{7b56}\u{7565}\u{7b49}\u{3002}\u{5408}\u{5e76}\u{884c}\u{6743}\u{65f6}\u{ff0c}\u{6b64}\u{5b57}\u{6bb5}\u{53ef}\u{4e3a}\u{7a7a}"]
    pub strategy_id: [::std::os::raw::c_char; 10usize],
    #[doc = "< \u{7ec4}\u{5408}\u{7f16}\u{7801}\u{ff0c}\u{7ec4}\u{5408}\u{7533}\u{62a5}\u{65f6}\u{ff0c}\u{8be5}\u{5b57}\u{6bb5}\u{4e3a}\u{7a7a}\u{ff1b}\u{62c6}\u{5206}\u{7533}\u{62a5}\u{65f6}\u{ff0c}\u{586b}\u{5199}\u{62df}\u{62c6}\u{5206}\u{7ec4}\u{5408}\u{7684}\u{7ec4}\u{5408}\u{7f16}\u{7801}\u{3002}"]
    pub comb_num: [::std::os::raw::c_char; 18usize],
    #[doc = "< \u{6210}\u{5206}\u{5408}\u{7ea6}\u{6570}"]
    pub num_legs: i32,
    #[doc = "< \u{6210}\u{5206}\u{5408}\u{7ea6}\u{6570}\u{7ec4}\u{ff0c}\u{6700}\u{591a}\u{56db}\u{6761}\u{817f}\u{3002}"]
    pub leg_detail: [XTPOptCombLegInfo; 4usize],
}
#[test]
fn bindgen_test_layout_XTPOptCombPlugin() {
    assert_eq!(
        ::std::mem::size_of::<XTPOptCombPlugin>(),
        160usize,
        concat!("Size of: ", stringify!(XTPOptCombPlugin))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPOptCombPlugin>(),
        4usize,
        concat!("Alignment of ", stringify!(XTPOptCombPlugin))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOptCombPlugin>())).strategy_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombPlugin),
            "::",
            stringify!(strategy_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOptCombPlugin>())).comb_num as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombPlugin),
            "::",
            stringify!(comb_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOptCombPlugin>())).num_legs as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombPlugin),
            "::",
            stringify!(num_legs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOptCombPlugin>())).leg_detail as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombPlugin),
            "::",
            stringify!(leg_detail)
        )
    );
}
impl Default for XTPOptCombPlugin {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = ""]
#[doc = "\u{67e5}\u{8be2}\u{671f}\u{6743}\u{7ec4}\u{5408}\u{7b56}\u{7565}\u{6301}\u{4ed3}\u{60c5}\u{51b5}\u{8bf7}\u{6c42}\u{7ed3}\u{6784}\u{4f53}"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryOptCombPositionReq {
    #[doc = "\u{7ec4}\u{5408}\u{7f16}\u{7801}"]
    pub comb_num: [::std::os::raw::c_char; 18usize],
    #[doc = "\u{4ea4}\u{6613}\u{5e02}\u{573a}"]
    pub market: XTP_MARKET_TYPE,
}
#[test]
fn bindgen_test_layout_XTPQueryOptCombPositionReq() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryOptCombPositionReq>(),
        24usize,
        concat!("Size of: ", stringify!(XTPQueryOptCombPositionReq))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryOptCombPositionReq>(),
        4usize,
        concat!("Alignment of ", stringify!(XTPQueryOptCombPositionReq))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombPositionReq>())).comb_num as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombPositionReq),
            "::",
            stringify!(comb_num)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombPositionReq>())).market as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombPositionReq),
            "::",
            stringify!(market)
        )
    );
}
impl Default for XTPQueryOptCombPositionReq {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " \u{67e5}\u{8be2}\u{671f}\u{6743}\u{7ec4}\u{5408}\u{7b56}\u{7565}\u{6301}\u{4ed3}\u{4fe1}\u{606f}\u{7684}\u{54cd}\u{5e94}"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryOptCombPositionRsp {
    #[doc = "< \u{7ec4}\u{5408}\u{7b56}\u{7565}\u{4ee3}\u{7801}"]
    pub strategy_id: [::std::os::raw::c_char; 10usize],
    #[doc = "< \u{7ec4}\u{5408}\u{7b56}\u{7565}\u{540d}\u{79f0}"]
    pub strategy_name: [::std::os::raw::c_char; 32usize],
    #[doc = "< \u{4ea4}\u{6613}\u{5e02}\u{573a}"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "< \u{603b}\u{6301}\u{4ed3}"]
    pub total_qty: i64,
    #[doc = "< \u{53ef}\u{62c6}\u{5206}\u{6301}\u{4ed3}"]
    pub available_qty: i64,
    #[doc = "< \u{6628}\u{65e5}\u{6301}\u{4ed3}"]
    pub yesterday_position: i64,
    #[doc = "< \u{671f}\u{6743}\u{7ec4}\u{5408}\u{7b56}\u{7565}\u{4fe1}\u{606f}"]
    pub opt_comb_info: XTPOptCombPlugin,
    #[doc = "< \u{4fdd}\u{7559}\u{5b57}\u{6bb5}"]
    pub reserved: [u64; 50usize],
}
#[test]
fn bindgen_test_layout_XTPQueryOptCombPositionRsp() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryOptCombPositionRsp>(),
        632usize,
        concat!("Size of: ", stringify!(XTPQueryOptCombPositionRsp))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryOptCombPositionRsp>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPQueryOptCombPositionRsp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombPositionRsp>())).strategy_id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombPositionRsp),
            "::",
            stringify!(strategy_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombPositionRsp>())).strategy_name as *const _
                as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombPositionRsp),
            "::",
            stringify!(strategy_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombPositionRsp>())).market as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombPositionRsp),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombPositionRsp>())).total_qty as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombPositionRsp),
            "::",
            stringify!(total_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombPositionRsp>())).available_qty as *const _
                as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombPositionRsp),
            "::",
            stringify!(available_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombPositionRsp>())).yesterday_position as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombPositionRsp),
            "::",
            stringify!(yesterday_position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombPositionRsp>())).opt_comb_info as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombPositionRsp),
            "::",
            stringify!(opt_comb_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombPositionRsp>())).reserved as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombPositionRsp),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for XTPQueryOptCombPositionRsp {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " \u{67e5}\u{8be2}\u{671f}\u{6743}\u{5408}\u{7ea6}\u{884c}\u{6743}\u{4fe1}\u{606f}\u{7684}\u{54cd}\u{5e94}"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryOptExecInfoRsp {
    #[doc = "< \u{5e02}\u{573a}"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "< \u{5408}\u{7ea6}\u{4ee3}\u{7801}"]
    pub cntrt_code: [::std::os::raw::c_char; 16usize],
    #[doc = "< \u{6743}\u{5229}\u{4ed3}\u{6570}\u{91cf}"]
    pub own_qty_long: i64,
    #[doc = "< \u{4e49}\u{52a1}\u{4ed3}\u{6570}\u{91cf}"]
    pub own_qty_short: i64,
    #[doc = "< \u{5907}\u{5151}\u{4e49}\u{52a1}\u{4ed3}\u{6570}\u{91cf}"]
    pub own_qty_short_cover: i64,
    #[doc = "< \u{51c0}\u{5934}\u{5bf8}"]
    pub net_qty: i64,
    #[doc = "< \u{6743}\u{5229}\u{4ed3}\u{5df2}\u{7ec4}\u{5408}\u{6570}\u{91cf}"]
    pub combed_qty_long: i64,
    #[doc = "< \u{4e49}\u{52a1}\u{4ed3}\u{5df2}\u{7ec4}\u{5408}\u{6570}\u{91cf}"]
    pub combed_qty_short: i64,
    #[doc = "< \u{5907}\u{5151}\u{4e49}\u{52a1}\u{4ed3}\u{5df2}\u{7ec4}\u{5408}\u{6570}\u{91cf}"]
    pub combed_qty_short_cover: i64,
    #[doc = "< \u{7d2f}\u{8ba1}\u{666e}\u{901a}\u{884c}\u{6743}\u{59d4}\u{6258}\u{6570}\u{91cf}"]
    pub total_execute_gene_order_qty: i64,
    #[doc = "< \u{7d2f}\u{8ba1}\u{666e}\u{901a}\u{884c}\u{6743}\u{786e}\u{8ba4}\u{6570}\u{91cf}"]
    pub total_execute_gene_confirm_qty: i64,
    #[doc = "< \u{7d2f}\u{8ba1}\u{884c}\u{6743}\u{5408}\u{5e76}\u{59d4}\u{6258}\u{6570}\u{91cf}"]
    pub total_execute_comb_order_qty: i64,
    #[doc = "< \u{7d2f}\u{8ba1}\u{884c}\u{6743}\u{5408}\u{5e76}\u{786e}\u{8ba4}\u{6570}\u{91cf}"]
    pub total_execute_comb_confirm_qty: i64,
    #[doc = "< \u{4fdd}\u{7559}\u{5b57}\u{6bb5}"]
    pub reserved: [u64; 50usize],
}
#[test]
fn bindgen_test_layout_XTPQueryOptExecInfoRsp() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryOptExecInfoRsp>(),
        512usize,
        concat!("Size of: ", stringify!(XTPQueryOptExecInfoRsp))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryOptExecInfoRsp>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPQueryOptExecInfoRsp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryOptExecInfoRsp>())).market as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptExecInfoRsp),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptExecInfoRsp>())).cntrt_code as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptExecInfoRsp),
            "::",
            stringify!(cntrt_code)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptExecInfoRsp>())).own_qty_long as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptExecInfoRsp),
            "::",
            stringify!(own_qty_long)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptExecInfoRsp>())).own_qty_short as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptExecInfoRsp),
            "::",
            stringify!(own_qty_short)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptExecInfoRsp>())).own_qty_short_cover as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptExecInfoRsp),
            "::",
            stringify!(own_qty_short_cover)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryOptExecInfoRsp>())).net_qty as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptExecInfoRsp),
            "::",
            stringify!(net_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptExecInfoRsp>())).combed_qty_long as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptExecInfoRsp),
            "::",
            stringify!(combed_qty_long)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptExecInfoRsp>())).combed_qty_short as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptExecInfoRsp),
            "::",
            stringify!(combed_qty_short)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptExecInfoRsp>())).combed_qty_short_cover as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptExecInfoRsp),
            "::",
            stringify!(combed_qty_short_cover)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptExecInfoRsp>())).total_execute_gene_order_qty
                as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptExecInfoRsp),
            "::",
            stringify!(total_execute_gene_order_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptExecInfoRsp>())).total_execute_gene_confirm_qty
                as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptExecInfoRsp),
            "::",
            stringify!(total_execute_gene_confirm_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptExecInfoRsp>())).total_execute_comb_order_qty
                as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptExecInfoRsp),
            "::",
            stringify!(total_execute_comb_order_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptExecInfoRsp>())).total_execute_comb_confirm_qty
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptExecInfoRsp),
            "::",
            stringify!(total_execute_comb_confirm_qty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryOptExecInfoRsp>())).reserved as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptExecInfoRsp),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for XTPQueryOptExecInfoRsp {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = ""]
#[doc = "\u{67e5}\u{8be2}\u{671f}\u{6743}\u{884c}\u{6743}\u{5408}\u{5e76}\u{5934}\u{5bf8}\u{8bf7}\u{6c42}\u{7ed3}\u{6784}\u{4f53}"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryOptCombExecPosReq {
    #[doc = "\u{5e02}\u{573a}"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "\u{6210}\u{5206}\u{5408}\u{7ea6}1\u{4ee3}\u{7801}"]
    pub cntrt_code_1: [::std::os::raw::c_char; 16usize],
    #[doc = "\u{6210}\u{5206}\u{5408}\u{7ea6}2\u{4ee3}\u{7801}"]
    pub cntrt_code_2: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_XTPQueryOptCombExecPosReq() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryOptCombExecPosReq>(),
        36usize,
        concat!("Size of: ", stringify!(XTPQueryOptCombExecPosReq))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryOptCombExecPosReq>(),
        4usize,
        concat!("Alignment of ", stringify!(XTPQueryOptCombExecPosReq))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombExecPosReq>())).market as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombExecPosReq),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombExecPosReq>())).cntrt_code_1 as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombExecPosReq),
            "::",
            stringify!(cntrt_code_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombExecPosReq>())).cntrt_code_2 as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombExecPosReq),
            "::",
            stringify!(cntrt_code_2)
        )
    );
}
impl Default for XTPQueryOptCombExecPosReq {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = " \u{67e5}\u{8be2}\u{671f}\u{6743}\u{884c}\u{6743}\u{5408}\u{5e76}\u{5934}\u{5bf8}\u{7684}\u{54cd}\u{5e94}"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryOptCombExecPosRsp {
    #[doc = "< \u{5e02}\u{573a}"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "< \u{6210}\u{5206}\u{5408}\u{7ea6}1\u{4ee3}\u{7801}"]
    pub cntrt_code_1: [::std::os::raw::c_char; 16usize],
    #[doc = "< \u{6210}\u{5206}\u{5408}\u{7ea6}1\u{540d}\u{79f0}"]
    pub cntrt_name_1: [::std::os::raw::c_char; 64usize],
    #[doc = "< \u{6210}\u{5206}\u{5408}\u{7ea6}1\u{6301}\u{4ed3}\u{65b9}\u{5411}"]
    pub position_side_1: XTP_POSITION_DIRECTION_TYPE,
    #[doc = "< \u{6210}\u{5206}\u{5408}\u{7ea6}1\u{7c7b}\u{578b}"]
    pub call_or_put_1: XTP_OPT_CALL_OR_PUT_TYPE,
    #[doc = "< \u{6210}\u{5206}\u{5408}\u{7ea6}1\u{53ef}\u{7528}\u{6301}\u{4ed3}\u{6570}\u{91cf}"]
    pub avl_qty_1: i64,
    #[doc = "< \u{6210}\u{5206}\u{5408}\u{7ea6}1\u{6628}\u{65e5}\u{6301}\u{4ed3}\u{6570}\u{91cf}"]
    pub orig_own_qty_1: i64,
    #[doc = "< \u{6210}\u{5206}\u{5408}\u{7ea6}1\u{5f53}\u{524d}\u{6301}\u{4ed3}\u{6570}\u{91cf}"]
    pub own_qty_1: i64,
    #[doc = "< \u{6210}\u{5206}\u{5408}\u{7ea6}2\u{4ee3}\u{7801}"]
    pub cntrt_code_2: [::std::os::raw::c_char; 16usize],
    #[doc = "< \u{6210}\u{5206}\u{5408}\u{7ea6}2\u{540d}\u{79f0}"]
    pub cntrt_name_2: [::std::os::raw::c_char; 64usize],
    #[doc = "< \u{6210}\u{5206}\u{5408}\u{7ea6}2\u{6301}\u{4ed3}\u{65b9}\u{5411}"]
    pub position_side_2: XTP_POSITION_DIRECTION_TYPE,
    #[doc = "< \u{6210}\u{5206}\u{5408}\u{7ea6}2\u{7c7b}\u{578b}"]
    pub call_or_put_2: XTP_OPT_CALL_OR_PUT_TYPE,
    #[doc = "< \u{6210}\u{5206}\u{5408}\u{7ea6}2\u{53ef}\u{7528}\u{6301}\u{4ed3}\u{6570}\u{91cf}"]
    pub avl_qty_2: i64,
    #[doc = "< \u{6210}\u{5206}\u{5408}\u{7ea6}2\u{6628}\u{65e5}\u{6301}\u{4ed3}\u{6570}\u{91cf}"]
    pub orig_own_qty_2: i64,
    #[doc = "< \u{6210}\u{5206}\u{5408}\u{7ea6}2\u{5f53}\u{524d}\u{6301}\u{4ed3}\u{6570}\u{91cf}"]
    pub own_qty_2: i64,
    #[doc = "< \u{6743}\u{5229}\u{4ed3}\u{51c0}\u{5934}\u{5bf8}"]
    pub net_qty: i64,
    #[doc = "< \u{884c}\u{6743}\u{5408}\u{5e76}\u{59d4}\u{6258}\u{6570}\u{91cf}\u{ff0c}\u{4e0d}\u{542b}\u{5df2}\u{62d2}\u{5355}\u{5df2}\u{64a4}\u{5355}\u{3002}"]
    pub order_qty: i64,
    #[doc = "< \u{884c}\u{6743}\u{5408}\u{5e76}\u{5df2}\u{786e}\u{8ba4}\u{6570}\u{91cf}"]
    pub confirm_qty: i64,
    #[doc = "< \u{53ef}\u{884c}\u{6743}\u{5408}\u{5e76}\u{6570}\u{91cf}"]
    pub avl_qty: i64,
    #[doc = "< \u{4fdd}\u{7559}\u{5b57}\u{6bb5}"]
    pub reserved: [u64; 49usize],
}
#[test]
fn bindgen_test_layout_XTPQueryOptCombExecPosRsp() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryOptCombExecPosRsp>(),
        656usize,
        concat!("Size of: ", stringify!(XTPQueryOptCombExecPosRsp))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryOptCombExecPosRsp>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPQueryOptCombExecPosRsp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombExecPosRsp>())).market as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombExecPosRsp),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombExecPosRsp>())).cntrt_code_1 as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombExecPosRsp),
            "::",
            stringify!(cntrt_code_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombExecPosRsp>())).cntrt_name_1 as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombExecPosRsp),
            "::",
            stringify!(cntrt_name_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombExecPosRsp>())).position_side_1 as *const _
                as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombExecPosRsp),
            "::",
            stringify!(position_side_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombExecPosRsp>())).call_or_put_1 as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombExecPosRsp),
            "::",
            stringify!(call_or_put_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombExecPosRsp>())).avl_qty_1 as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombExecPosRsp),
            "::",
            stringify!(avl_qty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombExecPosRsp>())).orig_own_qty_1 as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombExecPosRsp),
            "::",
            stringify!(orig_own_qty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombExecPosRsp>())).own_qty_1 as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombExecPosRsp),
            "::",
            stringify!(own_qty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombExecPosRsp>())).cntrt_code_2 as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombExecPosRsp),
            "::",
            stringify!(cntrt_code_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombExecPosRsp>())).cntrt_name_2 as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombExecPosRsp),
            "::",
            stringify!(cntrt_name_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombExecPosRsp>())).position_side_2 as *const _
                as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombExecPosRsp),
            "::",
            stringify!(position_side_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombExecPosRsp>())).call_or_put_2 as *const _ as usize
        },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombExecPosRsp),
            "::",
            stringify!(call_or_put_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombExecPosRsp>())).avl_qty_2 as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombExecPosRsp),
            "::",
            stringify!(avl_qty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombExecPosRsp>())).orig_own_qty_2 as *const _
                as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombExecPosRsp),
            "::",
            stringify!(orig_own_qty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombExecPosRsp>())).own_qty_2 as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombExecPosRsp),
            "::",
            stringify!(own_qty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombExecPosRsp>())).net_qty as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombExecPosRsp),
            "::",
            stringify!(net_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombExecPosRsp>())).order_qty as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombExecPosRsp),
            "::",
            stringify!(order_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombExecPosRsp>())).confirm_qty as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombExecPosRsp),
            "::",
            stringify!(confirm_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombExecPosRsp>())).avl_qty as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombExecPosRsp),
            "::",
            stringify!(avl_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombExecPosRsp>())).reserved as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombExecPosRsp),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for XTPQueryOptCombExecPosRsp {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = ""]
#[doc = "\u{878d}\u{8d44}\u{878d}\u{5238}\u{76f4}\u{63a5}\u{8fd8}\u{6b3e}\u{54cd}\u{5e94}\u{4fe1}\u{606f}"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct XTPCrdCashRepayRsp {
    #[doc = "< \u{76f4}\u{63a5}\u{8fd8}\u{6b3e}\u{64cd}\u{4f5c}\u{7684}XTPID"]
    pub xtp_id: i64,
    #[doc = "< \u{76f4}\u{63a5}\u{8fd8}\u{6b3e}\u{7684}\u{7533}\u{8bf7}\u{91d1}\u{989d}"]
    pub request_amount: f64,
    #[doc = "< \u{5b9e}\u{9645}\u{8fd8}\u{6b3e}\u{4f7f}\u{7528}\u{91d1}\u{989d}"]
    pub cash_repay_amount: f64,
}
#[test]
fn bindgen_test_layout_XTPCrdCashRepayRsp() {
    assert_eq!(
        ::std::mem::size_of::<XTPCrdCashRepayRsp>(),
        24usize,
        concat!("Size of: ", stringify!(XTPCrdCashRepayRsp))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPCrdCashRepayRsp>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPCrdCashRepayRsp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdCashRepayRsp>())).xtp_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdCashRepayRsp),
            "::",
            stringify!(xtp_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPCrdCashRepayRsp>())).request_amount as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdCashRepayRsp),
            "::",
            stringify!(request_amount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPCrdCashRepayRsp>())).cash_repay_amount as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdCashRepayRsp),
            "::",
            stringify!(cash_repay_amount)
        )
    );
}
#[doc = ""]
#[doc = "\u{878d}\u{8d44}\u{878d}\u{5238}\u{73b0}\u{91d1}\u{8fd8}\u{606f}\u{8d39}\u{54cd}\u{5e94}\u{4fe1}\u{606f}"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPCrdCashRepayDebtInterestFeeRsp {
    #[doc = "< \u{76f4}\u{63a5}\u{8fd8}\u{6b3e}\u{64cd}\u{4f5c}\u{7684}XTPID"]
    pub xtp_id: i64,
    #[doc = "< \u{76f4}\u{63a5}\u{8fd8}\u{6b3e}\u{7684}\u{7533}\u{8bf7}\u{91d1}\u{989d}"]
    pub request_amount: f64,
    #[doc = "< \u{5b9e}\u{9645}\u{8fd8}\u{6b3e}\u{4f7f}\u{7528}\u{91d1}\u{989d}"]
    pub cash_repay_amount: f64,
    #[doc = "< \u{6307}\u{5b9a}\u{7684}\u{8d1f}\u{503a}\u{5408}\u{7ea6}\u{7f16}\u{53f7}"]
    pub debt_compact_id: [::std::os::raw::c_char; 33usize],
    #[doc = "< \u{4fdd}\u{7559}\u{5b57}\u{6bb5}"]
    pub unknow: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout_XTPCrdCashRepayDebtInterestFeeRsp() {
    assert_eq!(
        ::std::mem::size_of::<XTPCrdCashRepayDebtInterestFeeRsp>(),
        96usize,
        concat!("Size of: ", stringify!(XTPCrdCashRepayDebtInterestFeeRsp))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPCrdCashRepayDebtInterestFeeRsp>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XTPCrdCashRepayDebtInterestFeeRsp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPCrdCashRepayDebtInterestFeeRsp>())).xtp_id as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdCashRepayDebtInterestFeeRsp),
            "::",
            stringify!(xtp_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPCrdCashRepayDebtInterestFeeRsp>())).request_amount as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdCashRepayDebtInterestFeeRsp),
            "::",
            stringify!(request_amount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPCrdCashRepayDebtInterestFeeRsp>())).cash_repay_amount
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdCashRepayDebtInterestFeeRsp),
            "::",
            stringify!(cash_repay_amount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPCrdCashRepayDebtInterestFeeRsp>())).debt_compact_id
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdCashRepayDebtInterestFeeRsp),
            "::",
            stringify!(debt_compact_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPCrdCashRepayDebtInterestFeeRsp>())).unknow as *const _
                as usize
        },
        57usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdCashRepayDebtInterestFeeRsp),
            "::",
            stringify!(unknow)
        )
    );
}
impl Default for XTPCrdCashRepayDebtInterestFeeRsp {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = ""]
#[doc = "\u{5355}\u{6761}\u{878d}\u{8d44}\u{878d}\u{5238}\u{76f4}\u{63a5}\u{8fd8}\u{6b3e}\u{8bb0}\u{5f55}\u{4fe1}\u{606f}"]
#[doc = ""]
#[repr(C)]
pub struct XTPCrdCashRepayInfo {
    #[doc = "< \u{76f4}\u{63a5}\u{8fd8}\u{6b3e}\u{64cd}\u{4f5c}\u{7684}XTPID"]
    pub xtp_id: i64,
    #[doc = "< \u{76f4}\u{63a5}\u{8fd8}\u{6b3e}\u{5904}\u{7406}\u{72b6}\u{6001}"]
    pub status: XTP_CRD_CR_STATUS,
    #[doc = "< \u{76f4}\u{63a5}\u{8fd8}\u{6b3e}\u{7684}\u{7533}\u{8bf7}\u{91d1}\u{989d}"]
    pub request_amount: f64,
    #[doc = "< \u{5b9e}\u{9645}\u{8fd8}\u{6b3e}\u{4f7f}\u{7528}\u{91d1}\u{989d}"]
    pub cash_repay_amount: f64,
    #[doc = "< \u{5f3a}\u{5e73}\u{6807}\u{5fd7}"]
    pub position_effect: XTP_POSITION_EFFECT_TYPE,
    #[doc = "< \u{76f4}\u{63a5}\u{8fd8}\u{6b3e}\u{53d1}\u{751f}\u{9519}\u{8bef}\u{65f6}\u{7684}\u{9519}\u{8bef}\u{4fe1}\u{606f}"]
    pub error_info: XTPRI,
}
#[test]
fn bindgen_test_layout_XTPCrdCashRepayInfo() {
    assert_eq!(
        ::std::mem::size_of::<XTPCrdCashRepayInfo>(),
        168usize,
        concat!("Size of: ", stringify!(XTPCrdCashRepayInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPCrdCashRepayInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPCrdCashRepayInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdCashRepayInfo>())).xtp_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdCashRepayInfo),
            "::",
            stringify!(xtp_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdCashRepayInfo>())).status as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdCashRepayInfo),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPCrdCashRepayInfo>())).request_amount as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdCashRepayInfo),
            "::",
            stringify!(request_amount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPCrdCashRepayInfo>())).cash_repay_amount as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdCashRepayInfo),
            "::",
            stringify!(cash_repay_amount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPCrdCashRepayInfo>())).position_effect as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdCashRepayInfo),
            "::",
            stringify!(position_effect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdCashRepayInfo>())).error_info as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdCashRepayInfo),
            "::",
            stringify!(error_info)
        )
    );
}
impl Default for XTPCrdCashRepayInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = ""]
#[doc = "\u{5355}\u{6761}\u{878d}\u{8d44}\u{878d}\u{5238}\u{8d1f}\u{503a}\u{8bb0}\u{5f55}\u{4fe1}\u{606f}"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPCrdDebtInfo {
    #[doc = "< \u{8d1f}\u{503a}\u{5408}\u{7ea6}\u{7c7b}\u{578b}\u{ff1a}0\u{4e3a}\u{878d}\u{8d44}\u{ff0c}1\u{4e3a}\u{878d}\u{5238}\u{ff0c}2\u{672a}\u{77e5}"]
    pub debt_type: i32,
    #[doc = "< \u{8d1f}\u{503a}\u{5408}\u{7ea6}\u{7f16}\u{53f7}"]
    pub debt_id: [::std::os::raw::c_char; 33usize],
    #[doc = "< \u{8d1f}\u{503a}\u{5bf9}\u{5e94}\u{4e24}\u{878d}\u{5934}\u{5bf8}\u{7f16}\u{53f7}"]
    pub position_id: i64,
    #[doc = "< \u{751f}\u{6210}\u{8d1f}\u{503a}\u{7684}\u{8ba2}\u{5355}\u{7f16}\u{53f7}\u{ff0c}\u{975e}\u{5f53}\u{65e5}\u{8d1f}\u{503a}\u{65e0}\u{6b64}\u{9879}"]
    pub order_xtp_id: u64,
    #[doc = "< \u{8d1f}\u{503a}\u{5408}\u{7ea6}\u{72b6}\u{6001}\u{ff1a}0\u{4e3a}\u{672a}\u{507f}\u{8fd8}\u{6216}\u{90e8}\u{5206}\u{507f}\u{8fd8}\u{ff0c}1\u{4e3a}\u{5df2}\u{507f}\u{8fd8}\u{ff0c}2\u{4e3a}\u{8fc7}\u{671f}\u{672a}\u{5e73}\u{4ed3}\u{ff0c}3\u{672a}\u{77e5}"]
    pub debt_status: i32,
    #[doc = "< \u{5e02}\u{573a}"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "< \u{8bc1}\u{5238}\u{4ee3}\u{7801}"]
    pub ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "< \u{59d4}\u{6258}\u{65e5}\u{671f}"]
    pub order_date: u64,
    #[doc = "< \u{8d1f}\u{503a}\u{622a}\u{6b62}\u{65e5}\u{671f}"]
    pub end_date: u64,
    #[doc = "< \u{8d1f}\u{503a}\u{539f}\u{59cb}\u{622a}\u{6b62}\u{65e5}\u{671f}"]
    pub orig_end_date: u64,
    #[doc = "< \u{5f53}\u{65e5}\u{662f}\u{5426}\u{63a5}\u{6536}\u{5230}\u{5c55}\u{671f}\u{8bf7}\u{6c42}\u{ff1a}false\u{4e3a}\u{6ca1}\u{6536}\u{5230}\u{ff0c}true\u{4e3a}\u{6536}\u{5230}"]
    pub is_extended: bool,
    #[doc = "< \u{672a}\u{507f}\u{8fd8}\u{91d1}\u{989d}"]
    pub remain_amt: f64,
    #[doc = "< \u{672a}\u{507f}\u{8fd8}\u{878d}\u{5238}\u{6570}\u{91cf}"]
    pub remain_qty: i64,
    #[doc = "< \u{672a}\u{507f}\u{8fd8}\u{672c}\u{91d1}\u{91d1}\u{989d}"]
    pub remain_principal: f64,
    #[doc = "< \u{5e94}\u{507f}\u{8fd8}\u{6743}\u{76ca}\u{6570}\u{91cf}"]
    pub due_right_qty: i64,
    #[doc = "< \u{4fdd}\u{7559}\u{5b57}\u{6bb5}"]
    pub unknown: [i64; 2usize],
}
#[test]
fn bindgen_test_layout_XTPCrdDebtInfo() {
    assert_eq!(
        ::std::mem::size_of::<XTPCrdDebtInfo>(),
        160usize,
        concat!("Size of: ", stringify!(XTPCrdDebtInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPCrdDebtInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPCrdDebtInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdDebtInfo>())).debt_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdDebtInfo),
            "::",
            stringify!(debt_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdDebtInfo>())).debt_id as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdDebtInfo),
            "::",
            stringify!(debt_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdDebtInfo>())).position_id as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdDebtInfo),
            "::",
            stringify!(position_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdDebtInfo>())).order_xtp_id as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdDebtInfo),
            "::",
            stringify!(order_xtp_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdDebtInfo>())).debt_status as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdDebtInfo),
            "::",
            stringify!(debt_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdDebtInfo>())).market as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdDebtInfo),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdDebtInfo>())).ticker as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdDebtInfo),
            "::",
            stringify!(ticker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdDebtInfo>())).order_date as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdDebtInfo),
            "::",
            stringify!(order_date)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdDebtInfo>())).end_date as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdDebtInfo),
            "::",
            stringify!(end_date)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdDebtInfo>())).orig_end_date as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdDebtInfo),
            "::",
            stringify!(orig_end_date)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdDebtInfo>())).is_extended as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdDebtInfo),
            "::",
            stringify!(is_extended)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdDebtInfo>())).remain_amt as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdDebtInfo),
            "::",
            stringify!(remain_amt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdDebtInfo>())).remain_qty as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdDebtInfo),
            "::",
            stringify!(remain_qty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdDebtInfo>())).remain_principal as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdDebtInfo),
            "::",
            stringify!(remain_principal)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdDebtInfo>())).due_right_qty as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdDebtInfo),
            "::",
            stringify!(due_right_qty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdDebtInfo>())).unknown as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdDebtInfo),
            "::",
            stringify!(unknown)
        )
    );
}
impl Default for XTPCrdDebtInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = ""]
#[doc = "\u{878d}\u{8d44}\u{878d}\u{5238}\u{7279}\u{6709}\u{5e10}\u{6237}\u{6570}\u{636e}"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct XTPCrdFundInfo {
    #[doc = "< \u{7ef4}\u{6301}\u{62c5}\u{4fdd}\u{54c1}\u{6bd4}\u{4f8b}"]
    pub maintenance_ratio: f64,
    #[doc = "< \u{603b}\u{8d44}\u{4ea7}(\u{5305}\u{542b}\u{8bc1}\u{5238}\u{8d44}\u{4ea7})"]
    pub all_asset: f64,
    #[doc = "< \u{603b}\u{8d1f}\u{503a}"]
    pub all_debt: f64,
    #[doc = "< \u{4e24}\u{878d}\u{6388}\u{4fe1}\u{989d}\u{5ea6}"]
    pub line_of_credit: f64,
    #[doc = "< \u{4e24}\u{878d}\u{4fdd}\u{8bc1}\u{91d1}\u{53ef}\u{7528}\u{6570}"]
    pub guaranty: f64,
    #[doc = "< \u{4fdd}\u{7559}\u{5b57}\u{6bb5}"]
    pub reserved: f64,
}
#[test]
fn bindgen_test_layout_XTPCrdFundInfo() {
    assert_eq!(
        ::std::mem::size_of::<XTPCrdFundInfo>(),
        48usize,
        concat!("Size of: ", stringify!(XTPCrdFundInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPCrdFundInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPCrdFundInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPCrdFundInfo>())).maintenance_ratio as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdFundInfo),
            "::",
            stringify!(maintenance_ratio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdFundInfo>())).all_asset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdFundInfo),
            "::",
            stringify!(all_asset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdFundInfo>())).all_debt as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdFundInfo),
            "::",
            stringify!(all_debt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdFundInfo>())).line_of_credit as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdFundInfo),
            "::",
            stringify!(line_of_credit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdFundInfo>())).guaranty as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdFundInfo),
            "::",
            stringify!(guaranty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdFundInfo>())).reserved as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdFundInfo),
            "::",
            stringify!(reserved)
        )
    );
}
#[doc = ""]
#[doc = "\u{878d}\u{8d44}\u{878d}\u{5238}\u{6307}\u{5b9a}\u{8bc1}\u{5238}\u{4e0a}\u{7684}\u{8d1f}\u{503a}\u{672a}\u{8fd8}\u{6570}\u{91cf}\u{8bf7}\u{6c42}\u{7ed3}\u{6784}\u{4f53}"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPClientQueryCrdDebtStockReq {
    #[doc = "< \u{5e02}\u{573a}"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "< \u{8bc1}\u{5238}\u{4ee3}\u{7801}"]
    pub ticker: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_XTPClientQueryCrdDebtStockReq() {
    assert_eq!(
        ::std::mem::size_of::<XTPClientQueryCrdDebtStockReq>(),
        20usize,
        concat!("Size of: ", stringify!(XTPClientQueryCrdDebtStockReq))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPClientQueryCrdDebtStockReq>(),
        4usize,
        concat!("Alignment of ", stringify!(XTPClientQueryCrdDebtStockReq))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPClientQueryCrdDebtStockReq>())).market as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPClientQueryCrdDebtStockReq),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPClientQueryCrdDebtStockReq>())).ticker as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPClientQueryCrdDebtStockReq),
            "::",
            stringify!(ticker)
        )
    );
}
impl Default for XTPClientQueryCrdDebtStockReq {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = ""]
#[doc = "\u{878d}\u{8d44}\u{878d}\u{5238}\u{6307}\u{5b9a}\u{8bc1}\u{5238}\u{7684}\u{878d}\u{5238}\u{8d1f}\u{503a}\u{76f8}\u{5173}\u{4fe1}\u{606f}"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPCrdDebtStockInfo {
    #[doc = "< \u{5e02}\u{573a}"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "< \u{8bc1}\u{5238}\u{4ee3}\u{7801}"]
    pub ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "< \u{878d}\u{5238}\u{8d1f}\u{503a}\u{53ef}\u{8fd8}\u{5238}\u{6570}\u{91cf}"]
    pub stock_repay_quantity: i64,
    #[doc = "< \u{878d}\u{5238}\u{8d1f}\u{503a}\u{672a}\u{8fd8}\u{603b}\u{6570}\u{91cf}"]
    pub stock_total_quantity: i64,
}
#[test]
fn bindgen_test_layout_XTPCrdDebtStockInfo() {
    assert_eq!(
        ::std::mem::size_of::<XTPCrdDebtStockInfo>(),
        40usize,
        concat!("Size of: ", stringify!(XTPCrdDebtStockInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPCrdDebtStockInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPCrdDebtStockInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdDebtStockInfo>())).market as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdDebtStockInfo),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdDebtStockInfo>())).ticker as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdDebtStockInfo),
            "::",
            stringify!(ticker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPCrdDebtStockInfo>())).stock_repay_quantity as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdDebtStockInfo),
            "::",
            stringify!(stock_repay_quantity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPCrdDebtStockInfo>())).stock_total_quantity as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdDebtStockInfo),
            "::",
            stringify!(stock_total_quantity)
        )
    );
}
impl Default for XTPCrdDebtStockInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = ""]
#[doc = "\u{878d}\u{5238}\u{5934}\u{5bf8}\u{8bc1}\u{5238}\u{67e5}\u{8be2}\u{8bf7}\u{6c42}\u{7ed3}\u{6784}\u{4f53}"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPClientQueryCrdPositionStockReq {
    #[doc = "< \u{8bc1}\u{5238}\u{5e02}\u{573a}"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "< \u{8bc1}\u{5238}\u{4ee3}\u{7801}"]
    pub ticker: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_XTPClientQueryCrdPositionStockReq() {
    assert_eq!(
        ::std::mem::size_of::<XTPClientQueryCrdPositionStockReq>(),
        20usize,
        concat!("Size of: ", stringify!(XTPClientQueryCrdPositionStockReq))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPClientQueryCrdPositionStockReq>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(XTPClientQueryCrdPositionStockReq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPClientQueryCrdPositionStockReq>())).market as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPClientQueryCrdPositionStockReq),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPClientQueryCrdPositionStockReq>())).ticker as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPClientQueryCrdPositionStockReq),
            "::",
            stringify!(ticker)
        )
    );
}
impl Default for XTPClientQueryCrdPositionStockReq {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = ""]
#[doc = "\u{878d}\u{5238}\u{5934}\u{5bf8}\u{8bc1}\u{5238}\u{4fe1}\u{606f}"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPClientQueryCrdPositionStkInfo {
    #[doc = "< \u{8bc1}\u{5238}\u{5e02}\u{573a}"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "< \u{8bc1}\u{5238}\u{4ee3}\u{7801}"]
    pub ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "< \u{878d}\u{5238}\u{9650}\u{91cf}(\u{4fdd}\u{7559}\u{5b57}\u{6bb5})"]
    pub limit_qty: i64,
    #[doc = "< \u{6628}\u{65e5}\u{65e5}\u{878d}\u{5238}\u{6570}\u{91cf}(\u{4fdd}\u{7559}\u{5b57}\u{6bb5})"]
    pub yesterday_qty: i64,
    #[doc = "< \u{5269}\u{4f59}\u{53ef}\u{878d}\u{5238}\u{6570}\u{91cf}"]
    pub left_qty: i64,
    #[doc = "< \u{51bb}\u{7ed3}\u{878d}\u{5238}\u{6570}\u{91cf}(\u{4fdd}\u{7559}\u{5b57}\u{6bb5})"]
    pub frozen_qty: i64,
}
#[test]
fn bindgen_test_layout_XTPClientQueryCrdPositionStkInfo() {
    assert_eq!(
        ::std::mem::size_of::<XTPClientQueryCrdPositionStkInfo>(),
        56usize,
        concat!("Size of: ", stringify!(XTPClientQueryCrdPositionStkInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPClientQueryCrdPositionStkInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XTPClientQueryCrdPositionStkInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPClientQueryCrdPositionStkInfo>())).market as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPClientQueryCrdPositionStkInfo),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPClientQueryCrdPositionStkInfo>())).ticker as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPClientQueryCrdPositionStkInfo),
            "::",
            stringify!(ticker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPClientQueryCrdPositionStkInfo>())).limit_qty as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPClientQueryCrdPositionStkInfo),
            "::",
            stringify!(limit_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPClientQueryCrdPositionStkInfo>())).yesterday_qty as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPClientQueryCrdPositionStkInfo),
            "::",
            stringify!(yesterday_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPClientQueryCrdPositionStkInfo>())).left_qty as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPClientQueryCrdPositionStkInfo),
            "::",
            stringify!(left_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPClientQueryCrdPositionStkInfo>())).frozen_qty as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPClientQueryCrdPositionStkInfo),
            "::",
            stringify!(frozen_qty)
        )
    );
}
impl Default for XTPClientQueryCrdPositionStkInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = ""]
#[doc = " \u{4fe1}\u{7528}\u{4e1a}\u{52a1}\u{4f59}\u{5238}\u{67e5}\u{8be2}\u{8bf7}\u{6c42}\u{7ed3}\u{6784}\u{4f53}"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPClientQueryCrdSurplusStkReqInfo {
    #[doc = "< \u{8bc1}\u{5238}\u{5e02}\u{573a}"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "< \u{8bc1}\u{5238}\u{4ee3}\u{7801}"]
    pub ticker: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_XTPClientQueryCrdSurplusStkReqInfo() {
    assert_eq!(
        ::std::mem::size_of::<XTPClientQueryCrdSurplusStkReqInfo>(),
        20usize,
        concat!("Size of: ", stringify!(XTPClientQueryCrdSurplusStkReqInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPClientQueryCrdSurplusStkReqInfo>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(XTPClientQueryCrdSurplusStkReqInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPClientQueryCrdSurplusStkReqInfo>())).market as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPClientQueryCrdSurplusStkReqInfo),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPClientQueryCrdSurplusStkReqInfo>())).ticker as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPClientQueryCrdSurplusStkReqInfo),
            "::",
            stringify!(ticker)
        )
    );
}
impl Default for XTPClientQueryCrdSurplusStkReqInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = ""]
#[doc = "\u{4fe1}\u{7528}\u{4e1a}\u{52a1}\u{4f59}\u{5238}\u{4fe1}\u{606f}"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPClientQueryCrdSurplusStkRspInfo {
    #[doc = "< \u{8bc1}\u{5238}\u{5e02}\u{573a}"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "< \u{8bc1}\u{5238}\u{4ee3}\u{7801}"]
    pub ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "< \u{53ef}\u{5212}\u{8f6c}\u{6570}\u{91cf}"]
    pub transferable_quantity: i64,
    #[doc = "< \u{5df2}\u{5212}\u{8f6c}\u{6570}\u{91cf}"]
    pub transferred_quantity: i64,
}
#[test]
fn bindgen_test_layout_XTPClientQueryCrdSurplusStkRspInfo() {
    assert_eq!(
        ::std::mem::size_of::<XTPClientQueryCrdSurplusStkRspInfo>(),
        40usize,
        concat!("Size of: ", stringify!(XTPClientQueryCrdSurplusStkRspInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPClientQueryCrdSurplusStkRspInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XTPClientQueryCrdSurplusStkRspInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPClientQueryCrdSurplusStkRspInfo>())).market as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPClientQueryCrdSurplusStkRspInfo),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPClientQueryCrdSurplusStkRspInfo>())).ticker as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPClientQueryCrdSurplusStkRspInfo),
            "::",
            stringify!(ticker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPClientQueryCrdSurplusStkRspInfo>())).transferable_quantity
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPClientQueryCrdSurplusStkRspInfo),
            "::",
            stringify!(transferable_quantity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPClientQueryCrdSurplusStkRspInfo>())).transferred_quantity
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPClientQueryCrdSurplusStkRspInfo),
            "::",
            stringify!(transferred_quantity)
        )
    );
}
impl Default for XTPClientQueryCrdSurplusStkRspInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = ""]
#[doc = "\u{7528}\u{6237}\u{5c55}\u{671f}\u{8bf7}\u{6c42}"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPCreditDebtExtendReq {
    #[doc = "<xtpid"]
    pub xtpid: u64,
    #[doc = "<\u{8d1f}\u{503a}\u{5408}\u{7ea6}\u{7f16}\u{53f7}"]
    pub debt_id: [::std::os::raw::c_char; 33usize],
    #[doc = "<\u{5c55}\u{671f}\u{5929}\u{6570}"]
    pub defer_days: u32,
    #[doc = "<\u{8d44}\u{91d1}\u{8d26}\u{53f7}"]
    pub fund_account: [::std::os::raw::c_char; 16usize],
    #[doc = "<\u{8d44}\u{91d1}\u{8d26}\u{53f7}\u{5bc6}\u{7801}"]
    pub password: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout_XTPCreditDebtExtendReq() {
    assert_eq!(
        ::std::mem::size_of::<XTPCreditDebtExtendReq>(),
        128usize,
        concat!("Size of: ", stringify!(XTPCreditDebtExtendReq))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPCreditDebtExtendReq>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPCreditDebtExtendReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCreditDebtExtendReq>())).xtpid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCreditDebtExtendReq),
            "::",
            stringify!(xtpid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCreditDebtExtendReq>())).debt_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCreditDebtExtendReq),
            "::",
            stringify!(debt_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPCreditDebtExtendReq>())).defer_days as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCreditDebtExtendReq),
            "::",
            stringify!(defer_days)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPCreditDebtExtendReq>())).fund_account as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCreditDebtExtendReq),
            "::",
            stringify!(fund_account)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCreditDebtExtendReq>())).password as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCreditDebtExtendReq),
            "::",
            stringify!(password)
        )
    );
}
impl Default for XTPCreditDebtExtendReq {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = ""]
#[doc = "\u{7528}\u{6237}\u{5c55}\u{671f}\u{8bf7}\u{6c42}\u{7684}\u{54cd}\u{5e94}\u{7ed3}\u{6784}"]
#[doc = ""]
pub type XTPCreditDebtExtendAck = XTPCreditDebtExtendNotice;
#[doc = ""]
#[doc = " \u{878d}\u{8d44}\u{878d}\u{5238}\u{5e10}\u{6237}\u{9644}\u{52a0}\u{4fe1}\u{606f}"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPCrdFundExtraInfo {
    #[doc = "<\u{5f53}\u{524d}\u{8d44}\u{91d1}\u{8d26}\u{6237}\u{8d2d}\u{4e70}\u{8d27}\u{5e01}\u{57fa}\u{91d1}\u{4f7f}\u{7528}\u{7684}\u{878d}\u{5238}\u{5356}\u{51fa}\u{6240}\u{5f97}\u{8d44}\u{91d1}\u{5360}\u{7528}"]
    pub mf_rs_avl_used: f64,
    #[doc = "<\u{9884}\u{7559}\u{7a7a}\u{95f4}"]
    pub reserve: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout_XTPCrdFundExtraInfo() {
    assert_eq!(
        ::std::mem::size_of::<XTPCrdFundExtraInfo>(),
        72usize,
        concat!("Size of: ", stringify!(XTPCrdFundExtraInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPCrdFundExtraInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPCrdFundExtraInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPCrdFundExtraInfo>())).mf_rs_avl_used as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdFundExtraInfo),
            "::",
            stringify!(mf_rs_avl_used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdFundExtraInfo>())).reserve as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdFundExtraInfo),
            "::",
            stringify!(reserve)
        )
    );
}
impl Default for XTPCrdFundExtraInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = ""]
#[doc = "\u{878d}\u{8d44}\u{878d}\u{5238}\u{5e10}\u{6237}\u{6301}\u{4ed3}\u{9644}\u{52a0}\u{4fe1}\u{606f}"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPCrdPositionExtraInfo {
    #[doc = "<\u{8bc1}\u{5238}\u{5e02}\u{573a}"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "<\u{8bc1}\u{5238}\u{4ee3}\u{7801}"]
    pub ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "<\u{8d2d}\u{4e70}\u{8d27}\u{5e01}\u{57fa}\u{91d1}\u{4f7f}\u{7528}\u{7684}\u{878d}\u{5238}\u{5356}\u{51fa}\u{6240}\u{5f97}\u{8d44}\u{91d1}\u{5360}\u{7528}"]
    pub mf_rs_avl_used: f64,
    #[doc = "<\u{9884}\u{7559}\u{7a7a}\u{95f4}"]
    pub reserve: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout_XTPCrdPositionExtraInfo() {
    assert_eq!(
        ::std::mem::size_of::<XTPCrdPositionExtraInfo>(),
        96usize,
        concat!("Size of: ", stringify!(XTPCrdPositionExtraInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPCrdPositionExtraInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPCrdPositionExtraInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdPositionExtraInfo>())).market as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdPositionExtraInfo),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdPositionExtraInfo>())).ticker as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdPositionExtraInfo),
            "::",
            stringify!(ticker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPCrdPositionExtraInfo>())).mf_rs_avl_used as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdPositionExtraInfo),
            "::",
            stringify!(mf_rs_avl_used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdPositionExtraInfo>())).reserve as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdPositionExtraInfo),
            "::",
            stringify!(reserve)
        )
    );
}
impl Default for XTPCrdPositionExtraInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "\u{671f}\u{6743}\u{7ec4}\u{5408}\u{7b56}\u{7565}\u{65b0}\u{8ba2}\u{5355}\u{8bf7}\u{6c42}"]
#[repr(C)]
pub struct XTPOptCombOrderInsertInfo {
    #[doc = "XTP\u{7cfb}\u{7edf}\u{8ba2}\u{5355}ID\u{ff0c}\u{65e0}\u{9700}\u{7528}\u{6237}\u{586b}\u{5199}\u{ff0c}\u{5728}XTP\u{7cfb}\u{7edf}\u{4e2d}\u{552f}\u{4e00}"]
    pub order_xtp_id: u64,
    #[doc = "\u{62a5}\u{5355}\u{5f15}\u{7528}\u{ff0c}\u{7531}\u{5ba2}\u{6237}\u{81ea}\u{5b9a}\u{4e49}"]
    pub order_client_id: u32,
    #[doc = "\u{4ea4}\u{6613}\u{5e02}\u{573a}"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "\u{6570}\u{91cf}(\u{5355}\u{4f4d}\u{4e3a}\u{4efd})"]
    pub quantity: i64,
    #[doc = "\u{7ec4}\u{5408}\u{65b9}\u{5411}"]
    pub side: XTP_SIDE_TYPE,
    #[doc = "\u{4e1a}\u{52a1}\u{7c7b}\u{578b}"]
    pub business_type: XTP_BUSINESS_TYPE,
    #[doc = "\u{671f}\u{6743}\u{7ec4}\u{5408}\u{7b56}\u{7565}\u{4fe1}\u{606f}"]
    pub opt_comb_info: XTPOptCombPlugin,
}
#[test]
fn bindgen_test_layout_XTPOptCombOrderInsertInfo() {
    assert_eq!(
        ::std::mem::size_of::<XTPOptCombOrderInsertInfo>(),
        192usize,
        concat!("Size of: ", stringify!(XTPOptCombOrderInsertInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPOptCombOrderInsertInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPOptCombOrderInsertInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombOrderInsertInfo>())).order_xtp_id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInsertInfo),
            "::",
            stringify!(order_xtp_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombOrderInsertInfo>())).order_client_id as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInsertInfo),
            "::",
            stringify!(order_client_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombOrderInsertInfo>())).market as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInsertInfo),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombOrderInsertInfo>())).quantity as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInsertInfo),
            "::",
            stringify!(quantity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOptCombOrderInsertInfo>())).side as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInsertInfo),
            "::",
            stringify!(side)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombOrderInsertInfo>())).business_type as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInsertInfo),
            "::",
            stringify!(business_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombOrderInsertInfo>())).opt_comb_info as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInsertInfo),
            "::",
            stringify!(opt_comb_info)
        )
    );
}
impl Default for XTPOptCombOrderInsertInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "\u{671f}\u{6743}\u{7ec4}\u{5408}\u{7b56}\u{7565}\u{62a5}\u{5355}\u{54cd}\u{5e94}\u{7ed3}\u{6784}\u{4f53}"]
#[repr(C)]
pub struct XTPOptCombOrderInfo {
    #[doc = "XTP\u{7cfb}\u{7edf}\u{8ba2}\u{5355}ID\u{ff0c}\u{5728}XTP\u{7cfb}\u{7edf}\u{4e2d}\u{552f}\u{4e00}"]
    pub order_xtp_id: u64,
    #[doc = "\u{62a5}\u{5355}\u{5f15}\u{7528}\u{ff0c}\u{7528}\u{6237}\u{81ea}\u{5b9a}\u{4e49}"]
    pub order_client_id: u32,
    #[doc = "\u{62a5}\u{5355}\u{64cd}\u{4f5c}\u{5f15}\u{7528}\u{ff0c}\u{7528}\u{6237}\u{81ea}\u{5b9a}\u{4e49}\u{ff08}\u{6682}\u{672a}\u{4f7f}\u{7528}\u{ff09}"]
    pub order_cancel_client_id: u32,
    #[doc = "\u{64a4}\u{5355}\u{5728}XTP\u{7cfb}\u{7edf}\u{4e2d}\u{7684}id\u{ff0c}\u{5728}XTP\u{7cfb}\u{7edf}\u{4e2d}\u{552f}\u{4e00}"]
    pub order_cancel_xtp_id: u64,
    #[doc = "\u{8bc1}\u{5238}\u{4ee3}\u{7801}"]
    #[doc = "char                    ticker[XTP_TICKER_LEN];"]
    #[doc = "\u{4ea4}\u{6613}\u{5e02}\u{573a}"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "\u{6570}\u{91cf}\u{ff0c}\u{6b64}\u{8ba2}\u{5355}\u{7684}\u{62a5}\u{5355}\u{6570}\u{91cf}"]
    pub quantity: i64,
    #[doc = "\u{7ec4}\u{5408}\u{65b9}\u{5411}"]
    pub side: XTP_SIDE_TYPE,
    #[doc = "\u{4e1a}\u{52a1}\u{7c7b}\u{578b}"]
    pub business_type: XTP_BUSINESS_TYPE,
    #[doc = "\u{4eca}\u{6210}\u{4ea4}\u{6570}\u{91cf}\u{ff0c}\u{4e3a}\u{6b64}\u{8ba2}\u{5355}\u{7d2f}\u{8ba1}\u{6210}\u{4ea4}\u{6570}\u{91cf}"]
    pub qty_traded: i64,
    #[doc = "\u{5269}\u{4f59}\u{6570}\u{91cf}\u{ff0c}\u{5f53}\u{64a4}\u{5355}\u{6210}\u{529f}\u{65f6}\u{ff0c}\u{8868}\u{793a}\u{64a4}\u{5355}\u{6570}\u{91cf}"]
    pub qty_left: i64,
    #[doc = "\u{59d4}\u{6258}\u{65f6}\u{95f4}\u{ff0c}\u{683c}\u{5f0f}\u{4e3a}YYYYMMDDHHMMSSsss"]
    pub insert_time: i64,
    #[doc = "\u{6700}\u{540e}\u{4fee}\u{6539}\u{65f6}\u{95f4}\u{ff0c}\u{683c}\u{5f0f}\u{4e3a}YYYYMMDDHHMMSSsss"]
    pub update_time: i64,
    #[doc = "\u{64a4}\u{9500}\u{65f6}\u{95f4}\u{ff0c}\u{683c}\u{5f0f}\u{4e3a}YYYYMMDDHHMMSSsss"]
    pub cancel_time: i64,
    #[doc = "\u{6210}\u{4ea4}\u{91d1}\u{989d}\u{ff0c}\u{7ec4}\u{5408}\u{62c6}\u{5206}\u{6d89}\u{53ca}\u{7684}\u{4fdd}\u{8bc1}\u{91d1}(\u{4fdd}\u{7559}\u{5b57}\u{6bb5})"]
    pub trade_amount: f64,
    #[doc = "\u{672c}\u{5730}\u{62a5}\u{5355}\u{7f16}\u{53f7} OMS\u{751f}\u{6210}\u{7684}\u{5355}\u{53f7}\u{ff0c}\u{4e0d}\u{7b49}\u{540c}\u{4e8e}order_xtp_id\u{ff0c}\u{4e3a}\u{670d}\u{52a1}\u{5668}\u{4f20}\u{5230}\u{62a5}\u{76d8}\u{7684}\u{5355}\u{53f7}"]
    pub order_local_id: [::std::os::raw::c_char; 11usize],
    #[doc = "\u{62a5}\u{5355}\u{72b6}\u{6001}\u{ff0c}\u{8ba2}\u{5355}\u{54cd}\u{5e94}\u{4e2d}\u{6ca1}\u{6709}\u{90e8}\u{5206}\u{6210}\u{4ea4}\u{72b6}\u{6001}\u{7684}\u{63a8}\u{9001}\u{ff0c}\u{5728}\u{67e5}\u{8be2}\u{8ba2}\u{5355}\u{7ed3}\u{679c}\u{4e2d}\u{ff0c}\u{4f1a}\u{6709}\u{90e8}\u{5206}\u{6210}\u{4ea4}\u{72b6}\u{6001}"]
    pub order_status: XTP_ORDER_STATUS_TYPE,
    #[doc = "\u{62a5}\u{5355}\u{63d0}\u{4ea4}\u{72b6}\u{6001}\u{ff0c}\u{7528}\u{6237}\u{53ef}\u{7528}\u{6b64}\u{5b57}\u{6bb5}\u{6765}\u{533a}\u{5206}\u{64a4}\u{5355}\u{548c}\u{62a5}\u{5355}"]
    pub order_submit_status: XTP_ORDER_SUBMIT_STATUS_TYPE,
    #[doc = "\u{62a5}\u{5355}\u{7c7b}\u{578b}"]
    pub order_type: TXTPOrderTypeType,
    #[doc = "\u{671f}\u{6743}\u{7ec4}\u{5408}\u{7b56}\u{7565}\u{4fe1}\u{606f}"]
    pub opt_comb_info: XTPOptCombPlugin,
}
#[test]
fn bindgen_test_layout_XTPOptCombOrderInfo() {
    assert_eq!(
        ::std::mem::size_of::<XTPOptCombOrderInfo>(),
        280usize,
        concat!("Size of: ", stringify!(XTPOptCombOrderInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPOptCombOrderInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPOptCombOrderInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombOrderInfo>())).order_xtp_id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInfo),
            "::",
            stringify!(order_xtp_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombOrderInfo>())).order_client_id as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInfo),
            "::",
            stringify!(order_client_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombOrderInfo>())).order_cancel_client_id as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInfo),
            "::",
            stringify!(order_cancel_client_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombOrderInfo>())).order_cancel_xtp_id as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInfo),
            "::",
            stringify!(order_cancel_xtp_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOptCombOrderInfo>())).market as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInfo),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOptCombOrderInfo>())).quantity as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInfo),
            "::",
            stringify!(quantity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOptCombOrderInfo>())).side as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInfo),
            "::",
            stringify!(side)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombOrderInfo>())).business_type as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInfo),
            "::",
            stringify!(business_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOptCombOrderInfo>())).qty_traded as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInfo),
            "::",
            stringify!(qty_traded)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOptCombOrderInfo>())).qty_left as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInfo),
            "::",
            stringify!(qty_left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOptCombOrderInfo>())).insert_time as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInfo),
            "::",
            stringify!(insert_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOptCombOrderInfo>())).update_time as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInfo),
            "::",
            stringify!(update_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOptCombOrderInfo>())).cancel_time as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInfo),
            "::",
            stringify!(cancel_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombOrderInfo>())).trade_amount as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInfo),
            "::",
            stringify!(trade_amount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombOrderInfo>())).order_local_id as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInfo),
            "::",
            stringify!(order_local_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombOrderInfo>())).order_status as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInfo),
            "::",
            stringify!(order_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombOrderInfo>())).order_submit_status as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInfo),
            "::",
            stringify!(order_submit_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOptCombOrderInfo>())).order_type as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInfo),
            "::",
            stringify!(order_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombOrderInfo>())).opt_comb_info as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInfo),
            "::",
            stringify!(opt_comb_info)
        )
    );
}
impl Default for XTPOptCombOrderInfo {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "\u{671f}\u{6743}\u{7ec4}\u{5408}\u{7b56}\u{7565}\u{62a5}\u{5355}\u{54cd}\u{5e94}\u{7ed3}\u{6784}\u{4f53}\u{ff0c}\u{65b0}\u{7248}\u{672c}"]
#[repr(C)]
pub struct XTPOptCombOrderInfoEx {
    #[doc = "XTP\u{7cfb}\u{7edf}\u{8ba2}\u{5355}ID\u{ff0c}\u{5728}XTP\u{7cfb}\u{7edf}\u{4e2d}\u{552f}\u{4e00}"]
    pub order_xtp_id: u64,
    #[doc = "\u{62a5}\u{5355}\u{5f15}\u{7528}\u{ff0c}\u{7528}\u{6237}\u{81ea}\u{5b9a}\u{4e49}"]
    pub order_client_id: u32,
    #[doc = "\u{62a5}\u{5355}\u{64cd}\u{4f5c}\u{5f15}\u{7528}\u{ff0c}\u{7528}\u{6237}\u{81ea}\u{5b9a}\u{4e49}\u{ff08}\u{6682}\u{672a}\u{4f7f}\u{7528}\u{ff09}"]
    pub order_cancel_client_id: u32,
    #[doc = "\u{64a4}\u{5355}\u{5728}XTP\u{7cfb}\u{7edf}\u{4e2d}\u{7684}id\u{ff0c}\u{5728}XTP\u{7cfb}\u{7edf}\u{4e2d}\u{552f}\u{4e00}"]
    pub order_cancel_xtp_id: u64,
    #[doc = "\u{8bc1}\u{5238}\u{4ee3}\u{7801}"]
    #[doc = "char                    ticker[XTP_TICKER_LEN];"]
    #[doc = "\u{4ea4}\u{6613}\u{5e02}\u{573a}"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "\u{6570}\u{91cf}\u{ff0c}\u{6b64}\u{8ba2}\u{5355}\u{7684}\u{62a5}\u{5355}\u{6570}\u{91cf}"]
    pub quantity: i64,
    #[doc = "\u{7ec4}\u{5408}\u{65b9}\u{5411}"]
    pub side: XTP_SIDE_TYPE,
    #[doc = "\u{4e1a}\u{52a1}\u{7c7b}\u{578b}"]
    pub business_type: XTP_BUSINESS_TYPE,
    #[doc = "\u{4eca}\u{6210}\u{4ea4}\u{6570}\u{91cf}\u{ff0c}\u{4e3a}\u{6b64}\u{8ba2}\u{5355}\u{7d2f}\u{8ba1}\u{6210}\u{4ea4}\u{6570}\u{91cf}"]
    pub qty_traded: i64,
    #[doc = "\u{5269}\u{4f59}\u{6570}\u{91cf}\u{ff0c}\u{5f53}\u{64a4}\u{5355}\u{6210}\u{529f}\u{65f6}\u{ff0c}\u{8868}\u{793a}\u{64a4}\u{5355}\u{6570}\u{91cf}"]
    pub qty_left: i64,
    #[doc = "\u{59d4}\u{6258}\u{65f6}\u{95f4}\u{ff0c}\u{683c}\u{5f0f}\u{4e3a}YYYYMMDDHHMMSSsss"]
    pub insert_time: i64,
    #[doc = "\u{6700}\u{540e}\u{4fee}\u{6539}\u{65f6}\u{95f4}\u{ff0c}\u{683c}\u{5f0f}\u{4e3a}YYYYMMDDHHMMSSsss"]
    pub update_time: i64,
    #[doc = "\u{64a4}\u{9500}\u{65f6}\u{95f4}\u{ff0c}\u{683c}\u{5f0f}\u{4e3a}YYYYMMDDHHMMSSsss"]
    pub cancel_time: i64,
    #[doc = "\u{6210}\u{4ea4}\u{91d1}\u{989d}\u{ff0c}\u{7ec4}\u{5408}\u{62c6}\u{5206}\u{6d89}\u{53ca}\u{7684}\u{4fdd}\u{8bc1}\u{91d1}"]
    pub trade_amount: f64,
    #[doc = "\u{672c}\u{5730}\u{62a5}\u{5355}\u{7f16}\u{53f7} OMS\u{751f}\u{6210}\u{7684}\u{5355}\u{53f7}\u{ff0c}\u{4e0d}\u{7b49}\u{540c}\u{4e8e}order_xtp_id\u{ff0c}\u{4e3a}\u{670d}\u{52a1}\u{5668}\u{4f20}\u{5230}\u{62a5}\u{76d8}\u{7684}\u{5355}\u{53f7}"]
    pub order_local_id: [::std::os::raw::c_char; 11usize],
    #[doc = "\u{62a5}\u{5355}\u{72b6}\u{6001}\u{ff0c}\u{8ba2}\u{5355}\u{54cd}\u{5e94}\u{4e2d}\u{6ca1}\u{6709}\u{90e8}\u{5206}\u{6210}\u{4ea4}\u{72b6}\u{6001}\u{7684}\u{63a8}\u{9001}\u{ff0c}\u{5728}\u{67e5}\u{8be2}\u{8ba2}\u{5355}\u{7ed3}\u{679c}\u{4e2d}\u{ff0c}\u{4f1a}\u{6709}\u{90e8}\u{5206}\u{6210}\u{4ea4}\u{72b6}\u{6001}"]
    pub order_status: XTP_ORDER_STATUS_TYPE,
    #[doc = "\u{62a5}\u{5355}\u{63d0}\u{4ea4}\u{72b6}\u{6001}\u{ff0c}OMS\u{5185}\u{90e8}\u{4f7f}\u{7528}\u{ff0c}\u{7528}\u{6237}\u{65e0}\u{9700}\u{5173}\u{5fc3}"]
    pub order_submit_status: XTP_ORDER_SUBMIT_STATUS_TYPE,
    #[doc = "\u{62a5}\u{5355}\u{7c7b}\u{578b}"]
    pub order_type: TXTPOrderTypeType,
    #[doc = "\u{671f}\u{6743}\u{7ec4}\u{5408}\u{7b56}\u{7565}\u{4fe1}\u{606f}"]
    pub opt_comb_info: XTPOptCombPlugin,
    #[doc = "\u{62a5}\u{5355}\u{7f16}\u{53f7} --\u{4ea4}\u{6613}\u{6240}\u{5355}\u{53f7}\u{ff0c}\u{4e0a}\u{4ea4}\u{6240}\u{4e3a}\u{7a7a}\u{ff0c}\u{6df1}\u{4ea4}\u{6240}\u{6709}\u{6b64}\u{5b57}\u{6bb5}"]
    pub order_exch_id: [::std::os::raw::c_char; 17usize],
    #[doc = "\u{8ba2}\u{5355}\u{7684}\u{9519}\u{8bef}\u{4fe1}\u{606f}"]
    pub order_err_t: XTPRI,
    #[doc = "\u{4fdd}\u{7559}\u{5b57}\u{6bb5}"]
    pub unknown: [u64; 2usize],
}
#[test]
fn bindgen_test_layout_XTPOptCombOrderInfoEx() {
    assert_eq!(
        ::std::mem::size_of::<XTPOptCombOrderInfoEx>(),
        448usize,
        concat!("Size of: ", stringify!(XTPOptCombOrderInfoEx))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPOptCombOrderInfoEx>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPOptCombOrderInfoEx))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombOrderInfoEx>())).order_xtp_id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInfoEx),
            "::",
            stringify!(order_xtp_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombOrderInfoEx>())).order_client_id as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInfoEx),
            "::",
            stringify!(order_client_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombOrderInfoEx>())).order_cancel_client_id as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInfoEx),
            "::",
            stringify!(order_cancel_client_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombOrderInfoEx>())).order_cancel_xtp_id as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInfoEx),
            "::",
            stringify!(order_cancel_xtp_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOptCombOrderInfoEx>())).market as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInfoEx),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOptCombOrderInfoEx>())).quantity as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInfoEx),
            "::",
            stringify!(quantity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOptCombOrderInfoEx>())).side as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInfoEx),
            "::",
            stringify!(side)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombOrderInfoEx>())).business_type as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInfoEx),
            "::",
            stringify!(business_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombOrderInfoEx>())).qty_traded as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInfoEx),
            "::",
            stringify!(qty_traded)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOptCombOrderInfoEx>())).qty_left as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInfoEx),
            "::",
            stringify!(qty_left)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombOrderInfoEx>())).insert_time as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInfoEx),
            "::",
            stringify!(insert_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombOrderInfoEx>())).update_time as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInfoEx),
            "::",
            stringify!(update_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombOrderInfoEx>())).cancel_time as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInfoEx),
            "::",
            stringify!(cancel_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombOrderInfoEx>())).trade_amount as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInfoEx),
            "::",
            stringify!(trade_amount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombOrderInfoEx>())).order_local_id as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInfoEx),
            "::",
            stringify!(order_local_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombOrderInfoEx>())).order_status as *const _ as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInfoEx),
            "::",
            stringify!(order_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombOrderInfoEx>())).order_submit_status as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInfoEx),
            "::",
            stringify!(order_submit_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombOrderInfoEx>())).order_type as *const _ as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInfoEx),
            "::",
            stringify!(order_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombOrderInfoEx>())).opt_comb_info as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInfoEx),
            "::",
            stringify!(opt_comb_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombOrderInfoEx>())).order_exch_id as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInfoEx),
            "::",
            stringify!(order_exch_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombOrderInfoEx>())).order_err_t as *const _ as usize
        },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInfoEx),
            "::",
            stringify!(order_err_t)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOptCombOrderInfoEx>())).unknown as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombOrderInfoEx),
            "::",
            stringify!(unknown)
        )
    );
}
impl Default for XTPOptCombOrderInfoEx {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "\u{671f}\u{6743}\u{7ec4}\u{5408}\u{7b56}\u{7565}\u{62a5}\u{5355}\u{6210}\u{4ea4}\u{7ed3}\u{6784}\u{4f53}"]
#[repr(C)]
pub struct XTPOptCombTradeReport {
    #[doc = "XTP\u{7cfb}\u{7edf}\u{8ba2}\u{5355}ID\u{ff0c}\u{6b64}\u{6210}\u{4ea4}\u{56de}\u{62a5}\u{76f8}\u{5173}\u{7684}\u{8ba2}\u{5355}ID\u{ff0c}\u{5728}XTP\u{7cfb}\u{7edf}\u{4e2d}\u{552f}\u{4e00}"]
    pub order_xtp_id: u64,
    #[doc = "\u{62a5}\u{5355}\u{5f15}\u{7528}"]
    pub order_client_id: u32,
    #[doc = "\u{4ea4}\u{6613}\u{5e02}\u{573a}"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "\u{8ba2}\u{5355}\u{53f7}\u{ff0c}\u{5f15}\u{5165}XTPID\u{540e}\u{ff0c}\u{8be5}\u{5b57}\u{6bb5}\u{5b9e}\u{9645}\u{548c}order_xtp_id\u{91cd}\u{590d}\u{3002}\u{63a5}\u{53e3}\u{4e2d}\u{6682}\u{65f6}\u{4fdd}\u{7559}\u{3002}"]
    pub local_order_id: u64,
    #[doc = "\u{6210}\u{4ea4}\u{7f16}\u{53f7}\u{ff0c}\u{6df1}\u{4ea4}\u{6240}\u{552f}\u{4e00}\u{ff0c}\u{4e0a}\u{4ea4}\u{6240}\u{6bcf}\u{7b14}\u{4ea4}\u{6613}\u{552f}\u{4e00}\u{ff0c}\u{5f53}\u{53d1}\u{73b0}2\u{7b14}\u{6210}\u{4ea4}\u{56de}\u{62a5}\u{62e5}\u{6709}\u{76f8}\u{540c}\u{7684}exec_id\u{ff0c}\u{5219}\u{53ef}\u{4ee5}\u{8ba4}\u{4e3a}\u{6b64}\u{7b14}\u{4ea4}\u{6613}\u{81ea}\u{6210}\u{4ea4}"]
    pub exec_id: [::std::os::raw::c_char; 18usize],
    #[doc = "\u{6570}\u{91cf}\u{ff0c}\u{6b64}\u{6b21}\u{6210}\u{4ea4}\u{7684}\u{6570}\u{91cf}\u{ff0c}\u{4e0d}\u{662f}\u{7d2f}\u{8ba1}\u{6570}\u{91cf}"]
    pub quantity: i64,
    #[doc = "\u{6210}\u{4ea4}\u{65f6}\u{95f4}\u{ff0c}\u{683c}\u{5f0f}\u{4e3a}YYYYMMDDHHMMSSsss"]
    pub trade_time: i64,
    #[doc = "\u{6210}\u{4ea4}\u{91d1}\u{989d}\u{ff0c}\u{7ec4}\u{5408}\u{62c6}\u{5206}\u{6d89}\u{53ca}\u{7684}\u{4fdd}\u{8bc1}\u{91d1}"]
    pub trade_amount: f64,
    #[doc = "\u{6210}\u{4ea4}\u{5e8f}\u{53f7} --\u{56de}\u{62a5}\u{8bb0}\u{5f55}\u{53f7}\u{ff0c}\u{6bcf}\u{4e2a}\u{4ea4}\u{6613}\u{6240}\u{552f}\u{4e00},report_index+market\u{5b57}\u{6bb5}\u{53ef}\u{4ee5}\u{7ec4}\u{6210}\u{552f}\u{4e00}\u{6807}\u{8bc6}\u{8868}\u{793a}\u{6210}\u{4ea4}\u{56de}\u{62a5}"]
    pub report_index: u64,
    #[doc = "\u{62a5}\u{5355}\u{7f16}\u{53f7} --\u{4ea4}\u{6613}\u{6240}\u{5355}\u{53f7}(\u{4fdd}\u{7559}\u{5b57}\u{6bb5})"]
    pub order_exch_id: [::std::os::raw::c_char; 17usize],
    #[doc = "\u{6210}\u{4ea4}\u{7c7b}\u{578b}  --\u{6210}\u{4ea4}\u{56de}\u{62a5}\u{4e2d}\u{7684}\u{6267}\u{884c}\u{7c7b}\u{578b}"]
    pub trade_type: TXTPTradeTypeType,
    #[doc = "\u{7ec4}\u{5408}\u{65b9}\u{5411}"]
    pub side: XTP_SIDE_TYPE,
    #[doc = "\u{4e1a}\u{52a1}\u{7c7b}\u{578b}"]
    pub business_type: XTP_BUSINESS_TYPE,
    #[doc = "\u{4ea4}\u{6613}\u{6240}\u{4ea4}\u{6613}\u{5458}\u{4ee3}\u{7801}"]
    pub branch_pbu: [::std::os::raw::c_char; 7usize],
    #[doc = "\u{671f}\u{6743}\u{7ec4}\u{5408}\u{7b56}\u{7565}\u{4fe1}\u{606f}"]
    pub opt_comb_info: XTPOptCombPlugin,
}
#[test]
fn bindgen_test_layout_XTPOptCombTradeReport() {
    assert_eq!(
        ::std::mem::size_of::<XTPOptCombTradeReport>(),
        272usize,
        concat!("Size of: ", stringify!(XTPOptCombTradeReport))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPOptCombTradeReport>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPOptCombTradeReport))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombTradeReport>())).order_xtp_id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombTradeReport),
            "::",
            stringify!(order_xtp_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombTradeReport>())).order_client_id as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombTradeReport),
            "::",
            stringify!(order_client_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOptCombTradeReport>())).market as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombTradeReport),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombTradeReport>())).local_order_id as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombTradeReport),
            "::",
            stringify!(local_order_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOptCombTradeReport>())).exec_id as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombTradeReport),
            "::",
            stringify!(exec_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOptCombTradeReport>())).quantity as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombTradeReport),
            "::",
            stringify!(quantity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombTradeReport>())).trade_time as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombTradeReport),
            "::",
            stringify!(trade_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombTradeReport>())).trade_amount as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombTradeReport),
            "::",
            stringify!(trade_amount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombTradeReport>())).report_index as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombTradeReport),
            "::",
            stringify!(report_index)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombTradeReport>())).order_exch_id as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombTradeReport),
            "::",
            stringify!(order_exch_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombTradeReport>())).trade_type as *const _ as usize
        },
        97usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombTradeReport),
            "::",
            stringify!(trade_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOptCombTradeReport>())).side as *const _ as usize },
        98usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombTradeReport),
            "::",
            stringify!(side)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombTradeReport>())).business_type as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombTradeReport),
            "::",
            stringify!(business_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombTradeReport>())).branch_pbu as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombTradeReport),
            "::",
            stringify!(branch_pbu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOptCombTradeReport>())).opt_comb_info as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOptCombTradeReport),
            "::",
            stringify!(opt_comb_info)
        )
    );
}
impl Default for XTPOptCombTradeReport {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = ""]
#[doc = "\u{671f}\u{6743}\u{7ec4}\u{5408}\u{7b56}\u{7565}\u{62a5}\u{5355}\u{67e5}\u{8be2}"]
#[doc = ""]
#[doc = "\u{671f}\u{6743}\u{7ec4}\u{5408}\u{7b56}\u{7565}\u{62a5}\u{5355}\u{67e5}\u{8be2}\u{8bf7}\u{6c42}-\u{6761}\u{4ef6}\u{67e5}\u{8be2}"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct XTPQueryOptCombOrderReq {
    #[doc = "\u{7ec4}\u{5408}\u{7f16}\u{7801}\u{ff08}\u{6d41}\u{6c34}\u{53f7}\u{ff09}\u{ff0c}\u{53ef}\u{4ee5}\u{4e3a}\u{7a7a}\u{ff0c}\u{5982}\u{679c}\u{4e3a}\u{7a7a}\u{ff0c}\u{5219}\u{9ed8}\u{8ba4}\u{67e5}\u{8be2}\u{65f6}\u{95f4}\u{6bb5}\u{5185}\u{7684}\u{6240}\u{6709}\u{6210}\u{4ea4}\u{56de}\u{62a5}"]
    pub comb_num: [::std::os::raw::c_char; 18usize],
    #[doc = "\u{683c}\u{5f0f}\u{4e3a}YYYYMMDDHHMMSSsss\u{ff0c}\u{4e3a}0\u{5219}\u{9ed8}\u{8ba4}\u{5f53}\u{524d}\u{4ea4}\u{6613}\u{65e5}0\u{70b9}"]
    pub begin_time: i64,
    #[doc = "\u{683c}\u{5f0f}\u{4e3a}YYYYMMDDHHMMSSsss\u{ff0c}\u{4e3a}0\u{5219}\u{9ed8}\u{8ba4}\u{5f53}\u{524d}\u{65f6}\u{95f4}"]
    pub end_time: i64,
}
#[test]
fn bindgen_test_layout_XTPQueryOptCombOrderReq() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryOptCombOrderReq>(),
        40usize,
        concat!("Size of: ", stringify!(XTPQueryOptCombOrderReq))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryOptCombOrderReq>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPQueryOptCombOrderReq))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombOrderReq>())).comb_num as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombOrderReq),
            "::",
            stringify!(comb_num)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombOrderReq>())).begin_time as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombOrderReq),
            "::",
            stringify!(begin_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombOrderReq>())).end_time as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombOrderReq),
            "::",
            stringify!(end_time)
        )
    );
}
#[doc = "\u{671f}\u{6743}\u{7ec4}\u{5408}\u{7b56}\u{7565}\u{62a5}\u{5355}\u{67e5}\u{8be2}\u{54cd}\u{5e94}\u{7ed3}\u{6784}\u{4f53}"]
pub type XTPQueryOptCombOrderRsp = XTPOptCombOrderInfo;
#[doc = "\u{67e5}\u{8be2}\u{671f}\u{6743}\u{7ec4}\u{5408}\u{7b56}\u{7565}\u{8ba2}\u{5355}\u{8bf7}\u{6c42}-\u{5206}\u{9875}\u{67e5}\u{8be2}"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct XTPQueryOptCombOrderByPageReq {
    #[doc = "\u{9700}\u{8981}\u{67e5}\u{8be2}\u{7684}\u{8ba2}\u{5355}\u{6761}\u{6570}"]
    pub req_count: i64,
    #[doc = "\u{4e0a}\u{4e00}\u{6b21}\u{6536}\u{5230}\u{7684}\u{67e5}\u{8be2}\u{8ba2}\u{5355}\u{7ed3}\u{679c}\u{4e2d}\u{5e26}\u{56de}\u{6765}\u{7684}\u{7d22}\u{5f15}\u{ff0c}\u{5982}\u{679c}\u{662f}\u{4ece}\u{5934}\u{67e5}\u{8be2}\u{ff0c}\u{8bf7}\u{7f6e}0"]
    pub reference: i64,
    #[doc = "\u{4fdd}\u{7559}\u{5b57}\u{6bb5}"]
    pub reserved: i64,
}
#[test]
fn bindgen_test_layout_XTPQueryOptCombOrderByPageReq() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryOptCombOrderByPageReq>(),
        24usize,
        concat!("Size of: ", stringify!(XTPQueryOptCombOrderByPageReq))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryOptCombOrderByPageReq>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPQueryOptCombOrderByPageReq))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombOrderByPageReq>())).req_count as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombOrderByPageReq),
            "::",
            stringify!(req_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombOrderByPageReq>())).reference as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombOrderByPageReq),
            "::",
            stringify!(reference)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombOrderByPageReq>())).reserved as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombOrderByPageReq),
            "::",
            stringify!(reserved)
        )
    );
}
#[doc = ""]
#[doc = "\u{671f}\u{6743}\u{7ec4}\u{5408}\u{7b56}\u{7565}\u{6210}\u{4ea4}\u{56de}\u{62a5}\u{67e5}\u{8be2}"]
#[doc = ""]
#[doc = "\u{67e5}\u{8be2}\u{671f}\u{6743}\u{7ec4}\u{5408}\u{7b56}\u{7565}\u{6210}\u{4ea4}\u{62a5}\u{544a}\u{8bf7}\u{6c42}-\u{6839}\u{636e}\u{6267}\u{884c}\u{7f16}\u{53f7}\u{67e5}\u{8be2}\u{ff08}\u{4fdd}\u{7559}\u{5b57}\u{6bb5}\u{ff09}"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct XTPQueryOptCombReportByExecIdReq {
    #[doc = "XTP\u{8ba2}\u{5355}\u{7cfb}\u{7edf}ID"]
    pub order_xtp_id: u64,
    #[doc = "\u{6210}\u{4ea4}\u{6267}\u{884c}\u{7f16}\u{53f7}"]
    pub exec_id: [::std::os::raw::c_char; 18usize],
}
#[test]
fn bindgen_test_layout_XTPQueryOptCombReportByExecIdReq() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryOptCombReportByExecIdReq>(),
        32usize,
        concat!("Size of: ", stringify!(XTPQueryOptCombReportByExecIdReq))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryOptCombReportByExecIdReq>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XTPQueryOptCombReportByExecIdReq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombReportByExecIdReq>())).order_xtp_id as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombReportByExecIdReq),
            "::",
            stringify!(order_xtp_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombReportByExecIdReq>())).exec_id as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombReportByExecIdReq),
            "::",
            stringify!(exec_id)
        )
    );
}
#[doc = "\u{67e5}\u{8be2}\u{671f}\u{6743}\u{7ec4}\u{5408}\u{7b56}\u{7565}\u{6210}\u{4ea4}\u{56de}\u{62a5}\u{8bf7}\u{6c42}-\u{67e5}\u{8be2}\u{6761}\u{4ef6}"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct XTPQueryOptCombTraderReq {
    #[doc = "\u{7ec4}\u{5408}\u{7f16}\u{7801}\u{ff08}\u{6d41}\u{6c34}\u{53f7}\u{ff09}\u{ff0c}\u{53ef}\u{4ee5}\u{4e3a}\u{7a7a}\u{ff0c}\u{5982}\u{679c}\u{4e3a}\u{7a7a}\u{ff0c}\u{5219}\u{9ed8}\u{8ba4}\u{67e5}\u{8be2}\u{65f6}\u{95f4}\u{6bb5}\u{5185}\u{7684}\u{6240}\u{6709}\u{6210}\u{4ea4}\u{56de}\u{62a5}"]
    pub comb_num: [::std::os::raw::c_char; 18usize],
    #[doc = "\u{5f00}\u{59cb}\u{65f6}\u{95f4}\u{ff0c}\u{683c}\u{5f0f}\u{4e3a}YYYYMMDDHHMMSSsss\u{ff0c}\u{4e3a}0\u{5219}\u{9ed8}\u{8ba4}\u{5f53}\u{524d}\u{4ea4}\u{6613}\u{65e5}0\u{70b9}"]
    pub begin_time: i64,
    #[doc = "\u{7ed3}\u{675f}\u{65f6}\u{95f4}\u{ff0c}\u{683c}\u{5f0f}\u{4e3a}YYYYMMDDHHMMSSsss\u{ff0c}\u{4e3a}0\u{5219}\u{9ed8}\u{8ba4}\u{5f53}\u{524d}\u{65f6}\u{95f4}"]
    pub end_time: i64,
}
#[test]
fn bindgen_test_layout_XTPQueryOptCombTraderReq() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryOptCombTraderReq>(),
        40usize,
        concat!("Size of: ", stringify!(XTPQueryOptCombTraderReq))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryOptCombTraderReq>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPQueryOptCombTraderReq))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombTraderReq>())).comb_num as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombTraderReq),
            "::",
            stringify!(comb_num)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombTraderReq>())).begin_time as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombTraderReq),
            "::",
            stringify!(begin_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombTraderReq>())).end_time as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombTraderReq),
            "::",
            stringify!(end_time)
        )
    );
}
#[doc = "\u{6210}\u{4ea4}\u{56de}\u{62a5}\u{67e5}\u{8be2}\u{54cd}\u{5e94}\u{7ed3}\u{6784}\u{4f53}"]
pub type XTPQueryOptCombTradeRsp = XTPOptCombTradeReport;
#[doc = "\u{67e5}\u{8be2}\u{671f}\u{6743}\u{7ec4}\u{5408}\u{7b56}\u{7565}\u{6210}\u{4ea4}\u{56de}\u{62a5}\u{8bf7}\u{6c42}-\u{5206}\u{9875}\u{67e5}\u{8be2}"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct XTPQueryOptCombTraderByPageReq {
    #[doc = "\u{9700}\u{8981}\u{67e5}\u{8be2}\u{7684}\u{6210}\u{4ea4}\u{56de}\u{62a5}\u{6761}\u{6570}"]
    pub req_count: i64,
    #[doc = "\u{4e0a}\u{4e00}\u{6b21}\u{6536}\u{5230}\u{7684}\u{67e5}\u{8be2}\u{6210}\u{4ea4}\u{56de}\u{62a5}\u{7ed3}\u{679c}\u{4e2d}\u{5e26}\u{56de}\u{6765}\u{7684}\u{7d22}\u{5f15}\u{ff0c}\u{5982}\u{679c}\u{662f}\u{4ece}\u{5934}\u{67e5}\u{8be2}\u{ff0c}\u{8bf7}\u{7f6e}0"]
    pub reference: i64,
    #[doc = "\u{4fdd}\u{7559}\u{5b57}\u{6bb5}"]
    pub reserved: i64,
}
#[test]
fn bindgen_test_layout_XTPQueryOptCombTraderByPageReq() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryOptCombTraderByPageReq>(),
        24usize,
        concat!("Size of: ", stringify!(XTPQueryOptCombTraderByPageReq))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryOptCombTraderByPageReq>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPQueryOptCombTraderByPageReq))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombTraderByPageReq>())).req_count as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombTraderByPageReq),
            "::",
            stringify!(req_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombTraderByPageReq>())).reference as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombTraderByPageReq),
            "::",
            stringify!(reference)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptCombTraderByPageReq>())).reserved as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptCombTraderByPageReq),
            "::",
            stringify!(reserved)
        )
    );
}
#[doc = ""]
#[doc = "\u{7528}\u{6237}\u{8d44}\u{91d1}\u{8bf7}\u{6c42}"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPFundTransferReq {
    #[doc = "\u{8d44}\u{91d1}\u{5185}\u{8f6c}\u{7f16}\u{53f7}\u{ff0c}\u{65e0}\u{9700}\u{7528}\u{6237}\u{586b}\u{5199}\u{ff0c}\u{7c7b}\u{4f3c}\u{4e8e}xtp_id"]
    pub serial_id: u64,
    #[doc = "\u{8d44}\u{91d1}\u{8d26}\u{6237}\u{4ee3}\u{7801}"]
    pub fund_account: [::std::os::raw::c_char; 16usize],
    #[doc = "\u{8d44}\u{91d1}\u{8d26}\u{6237}\u{5bc6}\u{7801}"]
    pub password: [::std::os::raw::c_char; 64usize],
    #[doc = "\u{91d1}\u{989d}"]
    pub amount: f64,
    #[doc = "\u{5185}\u{8f6c}\u{7c7b}\u{578b}"]
    pub transfer_type: XTP_FUND_TRANSFER_TYPE,
}
#[test]
fn bindgen_test_layout_XTPFundTransferReq() {
    assert_eq!(
        ::std::mem::size_of::<XTPFundTransferReq>(),
        104usize,
        concat!("Size of: ", stringify!(XTPFundTransferReq))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPFundTransferReq>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPFundTransferReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPFundTransferReq>())).serial_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPFundTransferReq),
            "::",
            stringify!(serial_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPFundTransferReq>())).fund_account as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPFundTransferReq),
            "::",
            stringify!(fund_account)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPFundTransferReq>())).password as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPFundTransferReq),
            "::",
            stringify!(password)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPFundTransferReq>())).amount as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPFundTransferReq),
            "::",
            stringify!(amount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPFundTransferReq>())).transfer_type as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPFundTransferReq),
            "::",
            stringify!(transfer_type)
        )
    );
}
impl Default for XTPFundTransferReq {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = ""]
#[doc = "\u{7528}\u{6237}\u{8d44}\u{91d1}\u{5212}\u{8f6c}\u{8bf7}\u{6c42}\u{7684}\u{54cd}\u{5e94}-\u{590d}\u{7528}\u{8d44}\u{91d1}\u{901a}\u{77e5}\u{7ed3}\u{6784}\u{4f53}"]
#[doc = ""]
pub type XTPFundTransferAck = XTPFundTransferNotice;
#[doc = ""]
#[doc = "\u{7528}\u{6237}\u{8d44}\u{91d1}\u{67e5}\u{8be2}\u{8bf7}\u{6c42}\u{7ed3}\u{6784}\u{4f53}"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPFundQueryReq {
    #[doc = "\u{8d44}\u{91d1}\u{8d26}\u{6237}\u{4ee3}\u{7801}"]
    pub fund_account: [::std::os::raw::c_char; 16usize],
    #[doc = "\u{8d44}\u{91d1}\u{8d26}\u{6237}\u{5bc6}\u{7801}"]
    pub password: [::std::os::raw::c_char; 64usize],
    #[doc = "\u{67e5}\u{8be2}\u{7c7b}\u{578b}"]
    pub query_type: XTP_FUND_QUERY_TYPE,
    #[doc = "\u{9884}\u{7559}\u{5b57}\u{6bb5}\u{ff0c}\u{7528}\u{6237}\u{65e0}\u{9700}\u{586b}\u{5199}"]
    pub unknown: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_XTPFundQueryReq() {
    assert_eq!(
        ::std::mem::size_of::<XTPFundQueryReq>(),
        120usize,
        concat!("Size of: ", stringify!(XTPFundQueryReq))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPFundQueryReq>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPFundQueryReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPFundQueryReq>())).fund_account as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPFundQueryReq),
            "::",
            stringify!(fund_account)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPFundQueryReq>())).password as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPFundQueryReq),
            "::",
            stringify!(password)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPFundQueryReq>())).query_type as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPFundQueryReq),
            "::",
            stringify!(query_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPFundQueryReq>())).unknown as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPFundQueryReq),
            "::",
            stringify!(unknown)
        )
    );
}
impl Default for XTPFundQueryReq {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = ""]
#[doc = "\u{7528}\u{6237}\u{8d44}\u{91d1}\u{67e5}\u{8be2}\u{54cd}\u{5e94}\u{7ed3}\u{6784}\u{4f53}"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPFundQueryRsp {
    #[doc = "\u{91d1}\u{989d}"]
    pub amount: f64,
    #[doc = "\u{67e5}\u{8be2}\u{7c7b}\u{578b}"]
    pub query_type: XTP_FUND_QUERY_TYPE,
    #[doc = "\u{9884}\u{7559}\u{5b57}\u{6bb5}\u{ff0c}\u{7528}\u{6237}\u{65e0}\u{9700}\u{586b}\u{5199}"]
    pub unknown: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_XTPFundQueryRsp() {
    assert_eq!(
        ::std::mem::size_of::<XTPFundQueryRsp>(),
        48usize,
        concat!("Size of: ", stringify!(XTPFundQueryRsp))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPFundQueryRsp>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPFundQueryRsp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPFundQueryRsp>())).amount as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPFundQueryRsp),
            "::",
            stringify!(amount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPFundQueryRsp>())).query_type as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPFundQueryRsp),
            "::",
            stringify!(query_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPFundQueryRsp>())).unknown as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPFundQueryRsp),
            "::",
            stringify!(unknown)
        )
    );
}
impl Default for XTPFundQueryRsp {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "\u{5b9e}\u{65f6}\u{884c}\u{60c5}\u{56de}\u{8865}\u{8bf7}\u{6c42}\u{7ed3}\u{6784}\u{4f53}"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQuoteRebuildReq {
    #[doc = "\u{8bf7}\u{6c42}id \u{8bf7}\u{6c42}\u{7aef}\u{81ea}\u{884c}\u{7ba1}\u{7406}\u{5b9a}\u{4e49}"]
    pub request_id: i32,
    #[doc = "\u{8bf7}\u{6c42}\u{6570}\u{636e}\u{7c7b}\u{578b} 1-\u{5feb}\u{7167} 2-\u{9010}\u{7b14}"]
    pub data_type: XTP_QUOTE_REBUILD_DATA_TYPE,
    #[doc = "\u{8bf7}\u{6c42}\u{5e02}\u{573a} 1-\u{4e0a}\u{6d77}  2-\u{6df1}\u{5733}"]
    pub exchange_id: XTP_EXCHANGE_TYPE,
    #[doc = "\u{5408}\u{7ea6}\u{4ee3}\u{7801} \u{4ee5}'\\0'\u{7ed3}\u{5c3e}  \u{6caa}\u{6df1}A\u{80a1}6\u{4f4d}  \u{671f}\u{6743}8\u{4f4d}"]
    pub ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "data_type=\u{9010}\u{7b14} \u{8868}\u{793a}\u{9010}\u{7b14}\u{901a}\u{9053}\u{53f7}"]
    pub channel_number: i16,
    #[doc = "data_type=\u{9010}\u{7b14} \u{8868}\u{793a}\u{5e8f}\u{5217}\u{53f7}begin\u{ff1b} =\u{5feb}\u{7167} \u{8868}\u{793a}\u{65f6}\u{95f4}begin(\u{683c}\u{5f0f}\u{4e3a}YYYYMMDDHHMMSSsss)"]
    pub begin: i64,
    #[doc = "data_type=\u{9010}\u{7b14} \u{8868}\u{793a}\u{5e8f}\u{5217}\u{53f7}end\u{ff1b} =\u{5feb}\u{7167} \u{8868}\u{793a}\u{65f6}\u{95f4}end(\u{683c}\u{5f0f}\u{4e3a}YYYYMMDDHHMMSSsss)   \u{9010}\u{7b14}\u{533a}\u{95f4}\u{ff1a}[begin, end]\u{524d}\u{540e}\u{95ed}\u{533a}\u{95f4}  \u{5feb}\u{7167}\u{533a}\u{95f4}\u{ff1a}[begin, end)  \u{524d}\u{95ed}\u{540e}\u{5f00}\u{533a}\u{95f4}"]
    pub end: i64,
}
#[test]
fn bindgen_test_layout_XTPQuoteRebuildReq() {
    assert_eq!(
        ::std::mem::size_of::<XTPQuoteRebuildReq>(),
        48usize,
        concat!("Size of: ", stringify!(XTPQuoteRebuildReq))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQuoteRebuildReq>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPQuoteRebuildReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQuoteRebuildReq>())).request_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteRebuildReq),
            "::",
            stringify!(request_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQuoteRebuildReq>())).data_type as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteRebuildReq),
            "::",
            stringify!(data_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQuoteRebuildReq>())).exchange_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteRebuildReq),
            "::",
            stringify!(exchange_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQuoteRebuildReq>())).ticker as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteRebuildReq),
            "::",
            stringify!(ticker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQuoteRebuildReq>())).channel_number as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteRebuildReq),
            "::",
            stringify!(channel_number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQuoteRebuildReq>())).begin as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteRebuildReq),
            "::",
            stringify!(begin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQuoteRebuildReq>())).end as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteRebuildReq),
            "::",
            stringify!(end)
        )
    );
}
impl Default for XTPQuoteRebuildReq {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "\u{5b9e}\u{65f6}\u{884c}\u{60c5}\u{56de}\u{8865}\u{54cd}\u{5e94}\u{7ed3}\u{6784}\u{4f53}"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQuoteRebuildResultRsp {
    #[doc = "\u{8bf7}\u{6c42}id \u{8bf7}\u{6c42}\u{5305}\u{5e26}\u{8fc7}\u{6765}\u{7684}id"]
    pub request_id: i32,
    #[doc = "\u{5e02}\u{573a}\u{7c7b}\u{578b} \u{4e0a}\u{6d77} \u{6df1}\u{5733}"]
    pub exchange_id: XTP_EXCHANGE_TYPE,
    #[doc = "\u{603b}\u{5171}\u{8fd4}\u{56de}\u{7684}\u{6570}\u{636e}\u{6761}\u{6570}"]
    pub size: u32,
    #[doc = "\u{9010}\u{7b14}\u{6570}\u{636e} \u{901a}\u{9053}\u{53f7}"]
    pub channel_number: i16,
    #[doc = "\u{9010}\u{7b14} \u{8868}\u{793a}\u{5e8f}\u{5217}\u{53f7}begin; \u{5feb}\u{7167} \u{8868}\u{793a}\u{65f6}\u{95f4}begin(\u{683c}\u{5f0f}\u{4e3a}YYYYMMDDHHMMSSsss)"]
    pub begin: i64,
    #[doc = "\u{9010}\u{7b14} \u{8868}\u{793a}\u{5e8f}\u{5217}\u{53f7}end; \u{5feb}\u{7167} \u{8868}\u{793a}\u{65f6}\u{95f4}end(\u{683c}\u{5f0f}\u{4e3a}YYYYMMDDHHMMSSsss)"]
    pub end: i64,
    #[doc = "\u{7ed3}\u{679c}\u{7c7b}\u{578b}\u{7801}"]
    pub result_code: XTP_REBUILD_RET_TYPE,
    #[doc = "\u{7ed3}\u{679c}\u{4fe1}\u{606f}\u{6587}\u{672c}"]
    pub msg: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout_XTPQuoteRebuildResultRsp() {
    assert_eq!(
        ::std::mem::size_of::<XTPQuoteRebuildResultRsp>(),
        104usize,
        concat!("Size of: ", stringify!(XTPQuoteRebuildResultRsp))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQuoteRebuildResultRsp>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPQuoteRebuildResultRsp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQuoteRebuildResultRsp>())).request_id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteRebuildResultRsp),
            "::",
            stringify!(request_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQuoteRebuildResultRsp>())).exchange_id as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteRebuildResultRsp),
            "::",
            stringify!(exchange_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQuoteRebuildResultRsp>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteRebuildResultRsp),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQuoteRebuildResultRsp>())).channel_number as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteRebuildResultRsp),
            "::",
            stringify!(channel_number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQuoteRebuildResultRsp>())).begin as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteRebuildResultRsp),
            "::",
            stringify!(begin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQuoteRebuildResultRsp>())).end as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteRebuildResultRsp),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQuoteRebuildResultRsp>())).result_code as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteRebuildResultRsp),
            "::",
            stringify!(result_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQuoteRebuildResultRsp>())).msg as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteRebuildResultRsp),
            "::",
            stringify!(msg)
        )
    );
}
impl Default for XTPQuoteRebuildResultRsp {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "@brief XTPStrategyStateType\u{7b56}\u{7565}\u{72b6}\u{6001}\u{7c7b}\u{578b}"]
pub type XTPStrategyStateType = u8;
#[doc = "\u{7b56}\u{7565}\u{4fe1}\u{606f}\u{7ed3}\u{6784}\u{4f53}"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct XTPStrategyInfoStruct {
    #[doc = "< \u{7b56}\u{7565}\u{7c7b}\u{578b}"]
    pub m_strategy_type: u16,
    #[doc = "< \u{7b56}\u{7565}\u{72b6}\u{6001}"]
    pub m_strategy_state: XTPStrategyStateType,
    #[doc = "< \u{5ba2}\u{6237}\u{7b56}\u{7565}id"]
    pub m_client_strategy_id: u64,
    #[doc = "< xtp\u{7b56}\u{7565}id"]
    pub m_xtp_strategy_id: u64,
}
#[test]
fn bindgen_test_layout_XTPStrategyInfoStruct() {
    assert_eq!(
        ::std::mem::size_of::<XTPStrategyInfoStruct>(),
        24usize,
        concat!("Size of: ", stringify!(XTPStrategyInfoStruct))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPStrategyInfoStruct>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPStrategyInfoStruct))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategyInfoStruct>())).m_strategy_type as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategyInfoStruct),
            "::",
            stringify!(m_strategy_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategyInfoStruct>())).m_strategy_state as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategyInfoStruct),
            "::",
            stringify!(m_strategy_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategyInfoStruct>())).m_client_strategy_id as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategyInfoStruct),
            "::",
            stringify!(m_client_strategy_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategyInfoStruct>())).m_xtp_strategy_id as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategyInfoStruct),
            "::",
            stringify!(m_xtp_strategy_id)
        )
    );
}
#[doc = "\u{7b56}\u{7565}\u{4e2d}\u{6307}\u{5b9a}\u{8bc1}\u{5238}\u{4fe1}\u{606f}\u{7ed3}\u{6784}\u{4f53}"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPStrategySymbolInfoStruct {
    #[doc = "< \u{7b56}\u{7565}\u{4fe1}\u{606f}"]
    pub m_strategy_info: XTPStrategyInfoStruct,
    #[doc = "< \u{8bc1}\u{5238}\u{4ee3}\u{7801}"]
    pub m_ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "< \u{5e02}\u{573a}"]
    pub m_market: XTP_MARKET_TYPE,
}
#[test]
fn bindgen_test_layout_XTPStrategySymbolInfoStruct() {
    assert_eq!(
        ::std::mem::size_of::<XTPStrategySymbolInfoStruct>(),
        48usize,
        concat!("Size of: ", stringify!(XTPStrategySymbolInfoStruct))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPStrategySymbolInfoStruct>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPStrategySymbolInfoStruct))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategySymbolInfoStruct>())).m_strategy_info as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategySymbolInfoStruct),
            "::",
            stringify!(m_strategy_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategySymbolInfoStruct>())).m_ticker as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategySymbolInfoStruct),
            "::",
            stringify!(m_ticker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategySymbolInfoStruct>())).m_market as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategySymbolInfoStruct),
            "::",
            stringify!(m_market)
        )
    );
}
impl Default for XTPStrategySymbolInfoStruct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "\u{7b56}\u{7565}\u{4e2d}\u{6307}\u{5b9a}\u{8bc1}\u{5238}\u{4fe1}\u{606f}\u{7ed3}\u{6784}\u{4f53}"]
pub type XTPStrategySymbolInfo = XTPStrategySymbolInfoStruct;
#[doc = "\u{7b56}\u{7565}\u{72b6}\u{6001}\u{7ed3}\u{6784}\u{4f53}"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPStrategyStateReportStruct {
    #[doc = "< \u{7b56}\u{7565}\u{4fe1}\u{606f}"]
    pub m_strategy_info: XTPStrategyInfoStruct,
    #[doc = "< \u{7b56}\u{7565}\u{603b}\u{91cf}"]
    pub m_strategy_qty: i64,
    #[doc = "< \u{7b56}\u{7565}\u{5df2}\u{59d4}\u{6258}\u{6570}\u{91cf}"]
    pub m_strategy_ordered_qty: i64,
    #[doc = "< \u{7b56}\u{7565}\u{5df2}\u{64a4}\u{5355}\u{6570}\u{91cf}"]
    pub m_strategy_cancelled_qty: i64,
    #[doc = "< \u{7b56}\u{7565}\u{5df2}\u{6210}\u{4ea4}\u{6570}\u{91cf}"]
    pub m_strategy_execution_qty: i64,
    #[doc = "< \u{7b56}\u{7565}\u{672a}\u{5e73}\u{4ed3}\u{6570}\u{91cf}(T0\u{5356}\u{51fa}\u{6570}\u{91cf}-\u{4e70}\u{5165}\u{6570}\u{91cf})"]
    pub m_strategy_unclosed_qty: i64,
    #[doc = "< \u{7b56}\u{7565}\u{603b}\u{91d1}\u{989d}"]
    pub m_strategy_asset: f64,
    #[doc = "< \u{7b56}\u{7565}\u{5df2}\u{59d4}\u{6258}\u{91d1}\u{989d}"]
    pub m_strategy_ordered_asset: f64,
    #[doc = "< \u{7b56}\u{7565}\u{5df2}\u{6210}\u{4ea4}\u{91d1}\u{989d}"]
    pub m_strategy_execution_asset: f64,
    #[doc = "< \u{7b56}\u{7565}\u{6267}\u{884c}\u{4ef7}\u{683c}"]
    pub m_strategy_execution_price: f64,
    #[doc = "< \u{7b56}\u{7565}\u{5e02}\u{573a}\u{4ef7}"]
    pub m_strategy_market_price: f64,
    #[doc = "< \u{7b56}\u{7565}\u{6267}\u{884c}\u{4ef7}\u{5dee}"]
    pub m_strategy_price_diff: f64,
    #[doc = "< \u{7b56}\u{7565}\u{6267}\u{884c}\u{7ee9}\u{6548}(T0\u{8d44}\u{91d1}\u{9884}\u{51c0}\u{6536}\u{5165})"]
    pub m_strategy_asset_diff: f64,
    #[doc = "< \u{9519}\u{8bef}\u{4fe1}\u{606f}"]
    pub m_error_info: XTPRI,
}
#[test]
fn bindgen_test_layout_XTPStrategyStateReportStruct() {
    assert_eq!(
        ::std::mem::size_of::<XTPStrategyStateReportStruct>(),
        248usize,
        concat!("Size of: ", stringify!(XTPStrategyStateReportStruct))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPStrategyStateReportStruct>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPStrategyStateReportStruct))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategyStateReportStruct>())).m_strategy_info as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategyStateReportStruct),
            "::",
            stringify!(m_strategy_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategyStateReportStruct>())).m_strategy_qty as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategyStateReportStruct),
            "::",
            stringify!(m_strategy_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategyStateReportStruct>())).m_strategy_ordered_qty
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategyStateReportStruct),
            "::",
            stringify!(m_strategy_ordered_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategyStateReportStruct>())).m_strategy_cancelled_qty
                as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategyStateReportStruct),
            "::",
            stringify!(m_strategy_cancelled_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategyStateReportStruct>())).m_strategy_execution_qty
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategyStateReportStruct),
            "::",
            stringify!(m_strategy_execution_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategyStateReportStruct>())).m_strategy_unclosed_qty
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategyStateReportStruct),
            "::",
            stringify!(m_strategy_unclosed_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategyStateReportStruct>())).m_strategy_asset as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategyStateReportStruct),
            "::",
            stringify!(m_strategy_asset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategyStateReportStruct>())).m_strategy_ordered_asset
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategyStateReportStruct),
            "::",
            stringify!(m_strategy_ordered_asset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategyStateReportStruct>())).m_strategy_execution_asset
                as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategyStateReportStruct),
            "::",
            stringify!(m_strategy_execution_asset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategyStateReportStruct>())).m_strategy_execution_price
                as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategyStateReportStruct),
            "::",
            stringify!(m_strategy_execution_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategyStateReportStruct>())).m_strategy_market_price
                as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategyStateReportStruct),
            "::",
            stringify!(m_strategy_market_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategyStateReportStruct>())).m_strategy_price_diff
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategyStateReportStruct),
            "::",
            stringify!(m_strategy_price_diff)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategyStateReportStruct>())).m_strategy_asset_diff
                as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategyStateReportStruct),
            "::",
            stringify!(m_strategy_asset_diff)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategyStateReportStruct>())).m_error_info as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategyStateReportStruct),
            "::",
            stringify!(m_error_info)
        )
    );
}
impl Default for XTPStrategyStateReportStruct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "\u{7b56}\u{7565}\u{72b6}\u{6001}\u{7ed3}\u{6784}\u{4f53}"]
pub type XTPStrategyStateReport = XTPStrategyStateReportStruct;
#[doc = "\u{6307}\u{5b9a}\u{7b56}\u{7565}\u{6307}\u{5b9a}\u{8bc1}\u{5238}\u{7684}\u{8bf7}\u{6c42}\u{7ed3}\u{6784}\u{4f53}"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPStrategySymbolReqStruct {
    #[doc = "< xtp\u{7b56}\u{7565}id"]
    pub m_xtp_strategy_id: u64,
    #[doc = "< \u{8bc1}\u{5238}\u{4ee3}\u{7801}"]
    pub m_ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "< \u{5e02}\u{573a}"]
    pub m_market: XTP_MARKET_TYPE,
}
#[test]
fn bindgen_test_layout_XTPStrategySymbolReqStruct() {
    assert_eq!(
        ::std::mem::size_of::<XTPStrategySymbolReqStruct>(),
        32usize,
        concat!("Size of: ", stringify!(XTPStrategySymbolReqStruct))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPStrategySymbolReqStruct>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPStrategySymbolReqStruct))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategySymbolReqStruct>())).m_xtp_strategy_id as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategySymbolReqStruct),
            "::",
            stringify!(m_xtp_strategy_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategySymbolReqStruct>())).m_ticker as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategySymbolReqStruct),
            "::",
            stringify!(m_ticker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategySymbolReqStruct>())).m_market as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategySymbolReqStruct),
            "::",
            stringify!(m_market)
        )
    );
}
impl Default for XTPStrategySymbolReqStruct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "\u{6307}\u{5b9a}\u{7b56}\u{7565}\u{6307}\u{5b9a}\u{8bc1}\u{5238}\u{7684}\u{8bf7}\u{6c42}\u{7ed3}\u{6784}\u{4f53}"]
pub type XTPStrategySymbolReq = XTPStrategySymbolReqStruct;
#[doc = "\u{7b56}\u{7565}\u{4e2d}\u{6307}\u{5b9a}\u{8bc1}\u{5238}\u{7684}\u{7b97}\u{6cd5}\u{6267}\u{884c}\u{72b6}\u{6001}\u{7ed3}\u{6784}\u{4f53}"]
#[repr(C)]
pub struct XTPStrategySymbolStateReportStruct {
    #[doc = "< \u{7b56}\u{7565}\u{4fe1}\u{606f}"]
    pub m_strategy_info: XTPStrategyInfoStruct,
    #[doc = "< \u{8bc1}\u{5238}\u{4ee3}\u{7801}"]
    pub m_ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "< \u{5e02}\u{573a}"]
    pub m_market: XTP_MARKET_TYPE,
    #[doc = "< \u{4e70}\u{5356}\u{65b9}\u{5411}\u{ff0c}=0\u{65f6}\u{4e3a}T0\u{5355}"]
    pub m_side: XTP_SIDE_TYPE,
    #[doc = "< \u{7b56}\u{7565}\u{603b}\u{91cf}"]
    pub m_strategy_qty: i64,
    #[doc = "< \u{7b56}\u{7565}\u{5df2}\u{59d4}\u{6258}\u{6570}\u{91cf}"]
    pub m_strategy_ordered_qty: i64,
    #[doc = "< \u{7b56}\u{7565}\u{5df2}\u{64a4}\u{5355}\u{6570}\u{91cf}"]
    pub m_strategy_cancelled_qty: i64,
    #[doc = "< \u{7b56}\u{7565}\u{5df2}\u{6210}\u{4ea4}\u{6570}\u{91cf}"]
    pub m_strategy_execution_qty: i64,
    #[doc = "< \u{7b56}\u{7565}\u{5df2}\u{4e70}\u{5165}\u{6570}\u{91cf}(T0)"]
    pub m_strategy_buy_qty: i64,
    #[doc = "< \u{7b56}\u{7565}\u{5df2}\u{5356}\u{51fa}\u{6570}\u{91cf}(T0)"]
    pub m_strategy_sell_qty: i64,
    #[doc = "< \u{7b56}\u{7565}\u{672a}\u{5e73}\u{4ed3}\u{6570}\u{91cf}(T0\u{5356}\u{51fa}\u{6570}\u{91cf}-\u{4e70}\u{5165}\u{6570}\u{91cf})"]
    pub m_strategy_unclosed_qty: i64,
    #[doc = "< \u{7b56}\u{7565}\u{603b}\u{91d1}\u{989d}"]
    pub m_strategy_asset: f64,
    #[doc = "< \u{7b56}\u{7565}\u{5df2}\u{59d4}\u{6258}\u{91d1}\u{989d}"]
    pub m_strategy_ordered_asset: f64,
    #[doc = "< \u{7b56}\u{7565}\u{5df2}\u{6210}\u{4ea4}\u{91d1}\u{989d}"]
    pub m_strategy_execution_asset: f64,
    #[doc = "< \u{7b56}\u{7565}\u{4e70}\u{5165}\u{91d1}\u{989d}(T0)"]
    pub m_strategy_buy_asset: f64,
    #[doc = "< \u{7b56}\u{7565}\u{5356}\u{51fa}\u{91d1}\u{989d}(TO)"]
    pub m_strategy_sell_asset: f64,
    #[doc = "< \u{7b56}\u{7565}\u{672a}\u{5e73}\u{4ed3}\u{91d1}\u{989d}(T0)"]
    pub m_strategy_unclosed_asset: f64,
    #[doc = "< \u{7b56}\u{7565}\u{6bdb}\u{6536}\u{76ca}\u{589e}\u{5f3a}\u{91d1}\u{989d}(T0)"]
    pub m_strategy_asset_diff: f64,
    #[doc = "< \u{7b56}\u{7565}\u{6267}\u{884c}\u{4ef7}\u{683c}"]
    pub m_strategy_execution_price: f64,
    #[doc = "< \u{7b56}\u{7565}\u{5e02}\u{573a}\u{4ef7}"]
    pub m_strategy_market_price: f64,
    #[doc = "< \u{7b56}\u{7565}\u{6267}\u{884c}\u{4ef7}\u{5dee}(T0\u{65f6}\u{4e3a}\u{6bdb}\u{589e}\u{5f3a}\u{6536}\u{76ca}\u{7387})"]
    pub m_strategy_price_diff: f64,
    #[doc = "< \u{9519}\u{8bef}\u{4fe1}\u{606f}"]
    pub m_error_info: XTPRI,
}
#[test]
fn bindgen_test_layout_XTPStrategySymbolStateReportStruct() {
    assert_eq!(
        ::std::mem::size_of::<XTPStrategySymbolStateReportStruct>(),
        312usize,
        concat!("Size of: ", stringify!(XTPStrategySymbolStateReportStruct))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPStrategySymbolStateReportStruct>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XTPStrategySymbolStateReportStruct)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategySymbolStateReportStruct>())).m_strategy_info
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategySymbolStateReportStruct),
            "::",
            stringify!(m_strategy_info)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategySymbolStateReportStruct>())).m_ticker as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategySymbolStateReportStruct),
            "::",
            stringify!(m_ticker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategySymbolStateReportStruct>())).m_market as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategySymbolStateReportStruct),
            "::",
            stringify!(m_market)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategySymbolStateReportStruct>())).m_side as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategySymbolStateReportStruct),
            "::",
            stringify!(m_side)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategySymbolStateReportStruct>())).m_strategy_qty
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategySymbolStateReportStruct),
            "::",
            stringify!(m_strategy_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategySymbolStateReportStruct>())).m_strategy_ordered_qty
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategySymbolStateReportStruct),
            "::",
            stringify!(m_strategy_ordered_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategySymbolStateReportStruct>())).m_strategy_cancelled_qty
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategySymbolStateReportStruct),
            "::",
            stringify!(m_strategy_cancelled_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategySymbolStateReportStruct>())).m_strategy_execution_qty
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategySymbolStateReportStruct),
            "::",
            stringify!(m_strategy_execution_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategySymbolStateReportStruct>())).m_strategy_buy_qty
                as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategySymbolStateReportStruct),
            "::",
            stringify!(m_strategy_buy_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategySymbolStateReportStruct>())).m_strategy_sell_qty
                as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategySymbolStateReportStruct),
            "::",
            stringify!(m_strategy_sell_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategySymbolStateReportStruct>())).m_strategy_unclosed_qty
                as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategySymbolStateReportStruct),
            "::",
            stringify!(m_strategy_unclosed_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategySymbolStateReportStruct>())).m_strategy_asset
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategySymbolStateReportStruct),
            "::",
            stringify!(m_strategy_asset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategySymbolStateReportStruct>())).m_strategy_ordered_asset
                as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategySymbolStateReportStruct),
            "::",
            stringify!(m_strategy_ordered_asset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategySymbolStateReportStruct>()))
                .m_strategy_execution_asset as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategySymbolStateReportStruct),
            "::",
            stringify!(m_strategy_execution_asset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategySymbolStateReportStruct>())).m_strategy_buy_asset
                as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategySymbolStateReportStruct),
            "::",
            stringify!(m_strategy_buy_asset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategySymbolStateReportStruct>())).m_strategy_sell_asset
                as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategySymbolStateReportStruct),
            "::",
            stringify!(m_strategy_sell_asset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategySymbolStateReportStruct>())).m_strategy_unclosed_asset
                as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategySymbolStateReportStruct),
            "::",
            stringify!(m_strategy_unclosed_asset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategySymbolStateReportStruct>())).m_strategy_asset_diff
                as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategySymbolStateReportStruct),
            "::",
            stringify!(m_strategy_asset_diff)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategySymbolStateReportStruct>()))
                .m_strategy_execution_price as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategySymbolStateReportStruct),
            "::",
            stringify!(m_strategy_execution_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategySymbolStateReportStruct>())).m_strategy_market_price
                as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategySymbolStateReportStruct),
            "::",
            stringify!(m_strategy_market_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategySymbolStateReportStruct>())).m_strategy_price_diff
                as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategySymbolStateReportStruct),
            "::",
            stringify!(m_strategy_price_diff)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStrategySymbolStateReportStruct>())).m_error_info as *const _
                as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStrategySymbolStateReportStruct),
            "::",
            stringify!(m_error_info)
        )
    );
}
impl Default for XTPStrategySymbolStateReportStruct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "\u{7b56}\u{7565}\u{4e2d}\u{6307}\u{5b9a}\u{8bc1}\u{5238}\u{7684}\u{7b97}\u{6cd5}\u{6267}\u{884c}\u{72b6}\u{6001}\u{7ed3}\u{6784}\u{4f53}"]
pub type XTPStrategySymbolStateReport = XTPStrategySymbolStateReportStruct;
#[repr(C)]
pub struct XTP_API_TraderSpi__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTP_API_TraderSpi {
    pub vtable_: *const XTP_API_TraderSpi__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_XTP_API_TraderSpi() {
    assert_eq!(
        ::std::mem::size_of::<XTP_API_TraderSpi>(),
        8usize,
        concat!("Size of: ", stringify!(XTP_API_TraderSpi))
    );
    assert_eq!(
        ::std::mem::align_of::<XTP_API_TraderSpi>(),
        8usize,
        concat!("Alignment of ", stringify!(XTP_API_TraderSpi))
    );
}
impl Default for XTP_API_TraderSpi {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct XTP_API_TraderApi__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct XTP_API_TraderApi {
    pub vtable_: *const XTP_API_TraderApi__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_XTP_API_TraderApi() {
    assert_eq!(
        ::std::mem::size_of::<XTP_API_TraderApi>(),
        8usize,
        concat!("Size of: ", stringify!(XTP_API_TraderApi))
    );
    assert_eq!(
        ::std::mem::align_of::<XTP_API_TraderApi>(),
        8usize,
        concat!("Alignment of ", stringify!(XTP_API_TraderApi))
    );
}
impl Default for XTP_API_TraderApi {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct XTP_API_QuoteSpi__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTP_API_QuoteSpi {
    pub vtable_: *const XTP_API_QuoteSpi__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_XTP_API_QuoteSpi() {
    assert_eq!(
        ::std::mem::size_of::<XTP_API_QuoteSpi>(),
        8usize,
        concat!("Size of: ", stringify!(XTP_API_QuoteSpi))
    );
    assert_eq!(
        ::std::mem::align_of::<XTP_API_QuoteSpi>(),
        8usize,
        concat!("Alignment of ", stringify!(XTP_API_QuoteSpi))
    );
}
impl Default for XTP_API_QuoteSpi {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct XTP_API_QuoteApi__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct XTP_API_QuoteApi {
    pub vtable_: *const XTP_API_QuoteApi__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_XTP_API_QuoteApi() {
    assert_eq!(
        ::std::mem::size_of::<XTP_API_QuoteApi>(),
        8usize,
        concat!("Size of: ", stringify!(XTP_API_QuoteApi))
    );
    assert_eq!(
        ::std::mem::align_of::<XTP_API_QuoteApi>(),
        8usize,
        concat!("Alignment of ", stringify!(XTP_API_QuoteApi))
    );
}
impl Default for XTP_API_QuoteApi {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn CreateQuoteApi(
        client_id: u8,
        save_file_path: *const ::std::os::raw::c_char,
        log_level: XTP_LOG_LEVEL,
    ) -> *mut XTP_API_QuoteApi;
}
extern "C" {
    pub fn QuoteApi_Release(self_: *mut XTP_API_QuoteApi);
}
extern "C" {
    pub fn QuoteApi_GetTradingDay(self_: *mut XTP_API_QuoteApi) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn QuoteApi_GetApiVersion(self_: *mut XTP_API_QuoteApi) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn QuoteApi_GetApiLastError(self_: *mut XTP_API_QuoteApi) -> *mut XTPRI;
}
extern "C" {
    pub fn QuoteApi_SetUDPBufferSize(self_: *mut XTP_API_QuoteApi, buff_size: u32);
}
extern "C" {
    pub fn QuoteApi_RegisterSpi(self_: *mut XTP_API_QuoteApi, spi: *mut XTP_API_QuoteSpi);
}
extern "C" {
    pub fn QuoteApi_SetHeartBeatInterval(self_: *mut XTP_API_QuoteApi, interval: u32);
}
extern "C" {
    pub fn QuoteApi_SubscribeMarketData(
        self_: *mut XTP_API_QuoteApi,
        ticker: *mut *mut ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
        exchange_id: XTP_EXCHANGE_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuoteApi_UnSubscribeMarketData(
        self_: *mut XTP_API_QuoteApi,
        ticker: *mut *mut ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
        exchange_id: XTP_EXCHANGE_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuoteApi_SubscribeOrderBook(
        self_: *mut XTP_API_QuoteApi,
        ticker: *mut *mut ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
        exchange_id: XTP_EXCHANGE_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuoteApi_UnSubscribeOrderBook(
        self_: *mut XTP_API_QuoteApi,
        ticker: *mut *mut ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
        exchange_id: XTP_EXCHANGE_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuoteApi_SubscribeTickByTick(
        self_: *mut XTP_API_QuoteApi,
        ticker: *mut *mut ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
        exchange_id: XTP_EXCHANGE_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuoteApi_UnSubscribeTickByTick(
        self_: *mut XTP_API_QuoteApi,
        ticker: *mut *mut ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
        exchange_id: XTP_EXCHANGE_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuoteApi_SubscribeAllMarketData(
        self_: *mut XTP_API_QuoteApi,
        exchange_id: XTP_EXCHANGE_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuoteApi_UnSubscribeAllMarketData(
        self_: *mut XTP_API_QuoteApi,
        exchange_id: XTP_EXCHANGE_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuoteApi_SubscribeAllOrderBook(
        self_: *mut XTP_API_QuoteApi,
        exchange_id: XTP_EXCHANGE_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuoteApi_UnSubscribeAllOrderBook(
        self_: *mut XTP_API_QuoteApi,
        exchange_id: XTP_EXCHANGE_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuoteApi_SubscribeAllTickByTick(
        self_: *mut XTP_API_QuoteApi,
        exchange_id: XTP_EXCHANGE_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuoteApi_UnSubscribeAllTickByTick(
        self_: *mut XTP_API_QuoteApi,
        exchange_id: XTP_EXCHANGE_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuoteApi_Login(
        self_: *mut XTP_API_QuoteApi,
        ip: *const ::std::os::raw::c_char,
        port: ::std::os::raw::c_int,
        user: *const ::std::os::raw::c_char,
        password: *const ::std::os::raw::c_char,
        sock_type: XTP_PROTOCOL_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuoteApi_Logout(self_: *mut XTP_API_QuoteApi) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuoteApi_QueryAllTickers(
        self_: *mut XTP_API_QuoteApi,
        exchange_id: XTP_EXCHANGE_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuoteApi_QueryTickersPriceInfo(
        self_: *mut XTP_API_QuoteApi,
        ticker: *mut *mut ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
        exchange_id: XTP_EXCHANGE_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuoteApi_QueryAllTickersPriceInfo(self_: *mut XTP_API_QuoteApi)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuoteApi_SubscribeAllOptionMarketData(
        self_: *mut XTP_API_QuoteApi,
        exchange_id: XTP_EXCHANGE_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuoteApi_UnSubscribeAllOptionMarketData(
        self_: *mut XTP_API_QuoteApi,
        exchange_id: XTP_EXCHANGE_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuoteApi_SubscribeAllOptionOrderBook(
        self_: *mut XTP_API_QuoteApi,
        exchange_id: XTP_EXCHANGE_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuoteApi_UnSubscribeAllOptionOrderBook(
        self_: *mut XTP_API_QuoteApi,
        exchange_id: XTP_EXCHANGE_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuoteApi_SubscribeAllOptionTickByTick(
        self_: *mut XTP_API_QuoteApi,
        exchange_id: XTP_EXCHANGE_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuoteApi_UnSubscribeAllOptionTickByTick(
        self_: *mut XTP_API_QuoteApi,
        exchange_id: XTP_EXCHANGE_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CreateTraderApi(
        client_id: u8,
        save_file_path: *const ::std::os::raw::c_char,
        log_level: XTP_LOG_LEVEL,
    ) -> *mut XTP_API_TraderApi;
}
extern "C" {
    pub fn TraderApi_Release(self_: *mut XTP_API_TraderApi);
}
extern "C" {
    pub fn TraderApi_GetTradingDay(self_: *mut XTP_API_TraderApi) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TraderApi_RegisterSpi(self_: *mut XTP_API_TraderApi, spi: *mut XTP_API_TraderSpi);
}
extern "C" {
    pub fn TraderApi_GetApiLastError(self_: *mut XTP_API_TraderApi) -> *mut XTPRI;
}
extern "C" {
    pub fn TraderApi_GetApiVersion(self_: *mut XTP_API_TraderApi) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TraderApi_GetClientIDByXTPID(self_: *mut XTP_API_TraderApi, order_xtp_id: u64) -> u8;
}
extern "C" {
    pub fn TraderApi_GetAccountByXTPID(
        self_: *mut XTP_API_TraderApi,
        order_xtp_id: u64,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TraderApi_SubscribePublicTopic(
        self_: *mut XTP_API_TraderApi,
        resume_type: XTP_TE_RESUME_TYPE,
    );
}
extern "C" {
    pub fn TraderApi_SetSoftwareVersion(
        self_: *mut XTP_API_TraderApi,
        version: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn TraderApi_SetSoftwareKey(
        self_: *mut XTP_API_TraderApi,
        key: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn TraderApi_SetHeartBeatInterval(self_: *mut XTP_API_TraderApi, interval: u32);
}
extern "C" {
    pub fn TraderApi_Login(
        self_: *mut XTP_API_TraderApi,
        ip: *const ::std::os::raw::c_char,
        port: ::std::os::raw::c_int,
        user: *const ::std::os::raw::c_char,
        password: *const ::std::os::raw::c_char,
        sock_type: XTP_PROTOCOL_TYPE,
    ) -> u64;
}
extern "C" {
    pub fn TraderApi_Logout(
        self_: *mut XTP_API_TraderApi,
        session_id: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TraderApi_IsServerRestart(self_: *mut XTP_API_TraderApi, session_id: u64) -> bool;
}
extern "C" {
    pub fn TraderApi_InsertOrder(
        self_: *mut XTP_API_TraderApi,
        order: *mut XTPOrderInsertInfo,
        session_id: u64,
    ) -> u64;
}
extern "C" {
    pub fn TraderApi_CancelOrder(
        self_: *mut XTP_API_TraderApi,
        order_xtp_id: u64,
        session_id: u64,
    ) -> u64;
}
extern "C" {
    pub fn TraderApi_QueryOrderByXTPID(
        self_: *mut XTP_API_TraderApi,
        order_xtp_id: u64,
        session_id: u64,
        request_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TraderApi_QueryOrders(
        self_: *mut XTP_API_TraderApi,
        query_param: *const XTPQueryOrderReq,
        session_id: u64,
        request_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TraderApi_QueryOrdersByPage(
        self_: *mut XTP_API_TraderApi,
        query_param: *const XTPQueryOrderByPageReq,
        session_id: u64,
        request_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TraderApi_QueryTradesByXTPID(
        self_: *mut XTP_API_TraderApi,
        order_xtp_id: u64,
        session_id: u64,
        request_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TraderApi_QueryTrades(
        self_: *mut XTP_API_TraderApi,
        query_param: *mut XTPQueryTraderReq,
        session_id: u64,
        request_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TraderApi_QueryTradesByPage(
        self_: *mut XTP_API_TraderApi,
        query_param: *const XTPQueryTraderByPageReq,
        session_id: u64,
        request_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TraderApi_QueryPosition(
        self_: *mut XTP_API_TraderApi,
        ticker: *const ::std::os::raw::c_char,
        session_id: u64,
        request_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TraderApi_QueryAsset(
        self_: *mut XTP_API_TraderApi,
        session_id: u64,
        request_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TraderApi_QueryStructuredFund(
        self_: *mut XTP_API_TraderApi,
        query_param: *mut XTPQueryStructuredFundInfoReq,
        session_id: u64,
        request_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TraderApi_FundTransfer(
        self_: *mut XTP_API_TraderApi,
        fund_transfer: *mut XTPFundTransferReq,
        session_id: u64,
    ) -> u64;
}
extern "C" {
    pub fn TraderApi_QueryFundTransfer(
        self_: *mut XTP_API_TraderApi,
        query_param: *mut XTPQueryFundTransferLogReq,
        session_id: u64,
        request_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TraderApi_QueryETF(
        self_: *mut XTP_API_TraderApi,
        query_param: *mut XTPQueryETFBaseReq,
        session_id: u64,
        request_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TraderApi_QueryETFTickerBasket(
        self_: *mut XTP_API_TraderApi,
        query_param: *mut XTPQueryETFComponentReq,
        session_id: u64,
        request_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TraderApi_QueryIPOInfoList(
        self_: *mut XTP_API_TraderApi,
        session_id: u64,
        request_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TraderApi_QueryIPOQuotaInfo(
        self_: *mut XTP_API_TraderApi,
        session_id: u64,
        request_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TraderApi_QueryOptionAuctionInfo(
        self_: *mut XTP_API_TraderApi,
        query_param: *mut XTPQueryOptionAuctionInfoReq,
        session_id: u64,
        request_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug)]
pub struct QuoteSpiStub {
    pub _base: XTP_API_QuoteSpi,
    pub rust_object: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_QuoteSpiStub() {
    assert_eq!(
        ::std::mem::size_of::<QuoteSpiStub>(),
        16usize,
        concat!("Size of: ", stringify!(QuoteSpiStub))
    );
    assert_eq!(
        ::std::mem::align_of::<QuoteSpiStub>(),
        8usize,
        concat!("Alignment of ", stringify!(QuoteSpiStub))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<QuoteSpiStub>())).rust_object as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(QuoteSpiStub),
            "::",
            stringify!(rust_object)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12QuoteSpiStubC1EPv"]
    pub fn QuoteSpiStub_QuoteSpiStub(
        this: *mut QuoteSpiStub,
        rust_object: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12QuoteSpiStubD1Ev"]
    pub fn QuoteSpiStub_QuoteSpiStub_destructor(this: *mut QuoteSpiStub);
}
impl Default for QuoteSpiStub {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl QuoteSpiStub {
    #[inline]
    pub unsafe fn new(rust_object: *mut ::std::os::raw::c_void) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        QuoteSpiStub_QuoteSpiStub(__bindgen_tmp.as_mut_ptr(), rust_object);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        QuoteSpiStub_QuoteSpiStub_destructor(self)
    }
}
extern "C" {
    pub fn QuoteSpiStub_Destructor(stub: *mut QuoteSpiStub);
}
#[repr(C)]
#[derive(Debug)]
pub struct TraderSpiStub {
    pub _base: XTP_API_TraderSpi,
    pub rust_object: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_TraderSpiStub() {
    assert_eq!(
        ::std::mem::size_of::<TraderSpiStub>(),
        16usize,
        concat!("Size of: ", stringify!(TraderSpiStub))
    );
    assert_eq!(
        ::std::mem::align_of::<TraderSpiStub>(),
        8usize,
        concat!("Alignment of ", stringify!(TraderSpiStub))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<TraderSpiStub>())).rust_object as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(TraderSpiStub),
            "::",
            stringify!(rust_object)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN13TraderSpiStubC1EPv"]
    pub fn TraderSpiStub_TraderSpiStub(
        this: *mut TraderSpiStub,
        rust_object: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN13TraderSpiStubD1Ev"]
    pub fn TraderSpiStub_TraderSpiStub_destructor(this: *mut TraderSpiStub);
}
impl Default for TraderSpiStub {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl TraderSpiStub {
    #[inline]
    pub unsafe fn new(rust_object: *mut ::std::os::raw::c_void) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        TraderSpiStub_TraderSpiStub(__bindgen_tmp.as_mut_ptr(), rust_object);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        TraderSpiStub_TraderSpiStub_destructor(self)
    }
}
extern "C" {
    pub fn TraderSpiStub_Destructor(stub: *mut TraderSpiStub);
}
