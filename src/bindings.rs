/// Bindgen sample, not used, just for reference.
/* automatically generated by rust-bindgen */

#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _ISOC95_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_XOPEN2K8XSI: u32 = 1;
pub const __USE_XOPEN2KXSI: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201505;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 23;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const _BITS_WCHAR_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const XTP_VERSION_LEN: u32 = 16;
pub const XTP_TRADING_DAY_LEN: u32 = 9;
pub const XTP_TICKER_LEN: u32 = 16;
pub const XTP_TICKER_NAME_LEN: u32 = 64;
pub const XTP_LOCAL_ORDER_LEN: u32 = 11;
pub const XTP_ORDER_EXCH_LEN: u32 = 17;
pub const XTP_EXEC_ID_LEN: u32 = 18;
pub const XTP_BRANCH_PBU_LEN: u32 = 7;
pub const XTP_ACCOUNT_NAME_LEN: u32 = 16;
pub const XTP_SIDE_BUY: u32 = 1;
pub const XTP_SIDE_SELL: u32 = 2;
pub const XTP_SIDE_PURCHASE: u32 = 7;
pub const XTP_SIDE_REDEMPTION: u32 = 8;
pub const XTP_SIDE_SPLIT: u32 = 9;
pub const XTP_SIDE_MERGE: u32 = 10;
pub const XTP_SIDE_COVER: u32 = 11;
pub const XTP_SIDE_FREEZE: u32 = 12;
pub const XTP_SIDE_MARGIN_TRADE: u32 = 21;
pub const XTP_SIDE_SHORT_SELL: u32 = 22;
pub const XTP_SIDE_REPAY_MARGIN: u32 = 23;
pub const XTP_SIDE_REPAY_STOCK: u32 = 24;
pub const XTP_SIDE_STOCK_REPAY_STOCK: u32 = 26;
pub const XTP_SIDE_SURSTK_TRANS: u32 = 27;
pub const XTP_SIDE_GRTSTK_TRANSIN: u32 = 28;
pub const XTP_SIDE_GRTSTK_TRANSOUT: u32 = 29;
pub const XTP_SIDE_UNKNOWN: u32 = 30;
pub const XTP_POSITION_EFFECT_INIT: u32 = 0;
pub const XTP_POSITION_EFFECT_OPEN: u32 = 1;
pub const XTP_POSITION_EFFECT_CLOSE: u32 = 2;
pub const XTP_POSITION_EFFECT_FORCECLOSE: u32 = 3;
pub const XTP_POSITION_EFFECT_CLOSETODAY: u32 = 4;
pub const XTP_POSITION_EFFECT_CLOSEYESTERDAY: u32 = 5;
pub const XTP_POSITION_EFFECT_FORCEOFF: u32 = 6;
pub const XTP_POSITION_EFFECT_LOCALFORCECLOSE: u32 = 7;
pub const XTP_POSITION_EFFECT_CREDIT_FORCE_COVER: u32 = 8;
pub const XTP_POSITION_EFFECT_CREDIT_FORCE_CLEAR: u32 = 9;
pub const XTP_POSITION_EFFECT_CREDIT_FORCE_DEBT: u32 = 10;
pub const XTP_POSITION_EFFECT_CREDIT_FORCE_UNCOND: u32 = 11;
pub const XTP_POSITION_EFFECT_UNKNOWN: u32 = 12;
pub const XTP_TRDT_COMMON: u8 = 48u8;
pub const XTP_TRDT_CASH: u8 = 49u8;
pub const XTP_TRDT_PRIMARY: u8 = 50u8;
pub const XTP_TRDT_CROSS_MKT_CASH: u8 = 51u8;
pub const XTP_ORDT_Normal: u8 = 48u8;
pub const XTP_ORDT_DeriveFromQuote: u8 = 49u8;
pub const XTP_ORDT_DeriveFromCombination: u8 = 50u8;
pub const XTP_ORDT_Combination: u8 = 51u8;
pub const XTP_ORDT_ConditionalOrder: u8 = 52u8;
pub const XTP_ORDT_Swap: u8 = 53u8;
pub const XTP_ERR_MSG_LEN: u32 = 124;
pub const XTP_ACCOUNT_PASSWORD_LEN: u32 = 64;
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type XTPVersionType = [::std::os::raw::c_char; 16usize];
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum XTP_LOG_LEVEL {
    XTP_LOG_LEVEL_FATAL = 0,
    XTP_LOG_LEVEL_ERROR = 1,
    XTP_LOG_LEVEL_WARNING = 2,
    XTP_LOG_LEVEL_INFO = 3,
    XTP_LOG_LEVEL_DEBUG = 4,
    XTP_LOG_LEVEL_TRACE = 5,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum XTP_PROTOCOL_TYPE {
    XTP_PROTOCOL_TCP = 1,
    XTP_PROTOCOL_UDP = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum XTP_EXCHANGE_TYPE {
    XTP_EXCHANGE_SH = 1,
    XTP_EXCHANGE_SZ = 2,
    XTP_EXCHANGE_UNKNOWN = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum XTP_MARKET_TYPE {
    XTP_MKT_INIT = 0,
    XTP_MKT_SZ_A = 1,
    XTP_MKT_SH_A = 2,
    XTP_MKT_UNKNOWN = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum XTP_PRICE_TYPE {
    XTP_PRICE_LIMIT = 1,
    XTP_PRICE_BEST_OR_CANCEL = 2,
    XTP_PRICE_BEST5_OR_LIMIT = 3,
    XTP_PRICE_BEST5_OR_CANCEL = 4,
    XTP_PRICE_ALL_OR_CANCEL = 5,
    XTP_PRICE_FORWARD_BEST = 6,
    XTP_PRICE_REVERSE_BEST_LIMIT = 7,
    XTP_PRICE_LIMIT_OR_CANCEL = 8,
    XTP_PRICE_TYPE_UNKNOWN = 9,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum XTP_ORDER_ACTION_STATUS_TYPE {
    XTP_ORDER_ACTION_STATUS_SUBMITTED = 1,
    XTP_ORDER_ACTION_STATUS_ACCEPTED = 2,
    XTP_ORDER_ACTION_STATUS_REJECTED = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum XTP_ORDER_STATUS_TYPE {
    XTP_ORDER_STATUS_INIT = 0,
    XTP_ORDER_STATUS_ALLTRADED = 1,
    XTP_ORDER_STATUS_PARTTRADEDQUEUEING = 2,
    XTP_ORDER_STATUS_PARTTRADEDNOTQUEUEING = 3,
    XTP_ORDER_STATUS_NOTRADEQUEUEING = 4,
    XTP_ORDER_STATUS_CANCELED = 5,
    XTP_ORDER_STATUS_REJECTED = 6,
    XTP_ORDER_STATUS_UNKNOWN = 7,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum XTP_ORDER_SUBMIT_STATUS_TYPE {
    XTP_ORDER_SUBMIT_STATUS_INSERT_SUBMITTED = 1,
    XTP_ORDER_SUBMIT_STATUS_INSERT_ACCEPTED = 2,
    XTP_ORDER_SUBMIT_STATUS_INSERT_REJECTED = 3,
    XTP_ORDER_SUBMIT_STATUS_CANCEL_SUBMITTED = 4,
    XTP_ORDER_SUBMIT_STATUS_CANCEL_REJECTED = 5,
    XTP_ORDER_SUBMIT_STATUS_CANCEL_ACCEPTED = 6,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum XTP_TE_RESUME_TYPE {
    XTP_TERT_RESTART = 0,
    XTP_TERT_RESUME = 1,
    XTP_TERT_QUICK = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ETF_REPLACE_TYPE {
    ERT_CASH_FORBIDDEN = 0,
    ERT_CASH_OPTIONAL = 1,
    ERT_CASH_MUST = 2,
    ERT_CASH_RECOMPUTE_INTER_SZ = 3,
    ERT_CASH_MUST_INTER_SZ = 4,
    ERT_CASH_RECOMPUTE_INTER_OTHER = 5,
    ERT_CASH_MUST_INTER_OTHER = 6,
    EPT_INVALID = 7,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum XTP_TICKER_TYPE {
    XTP_TICKER_TYPE_STOCK = 0,
    XTP_TICKER_TYPE_INDEX = 1,
    XTP_TICKER_TYPE_FUND = 2,
    XTP_TICKER_TYPE_BOND = 3,
    XTP_TICKER_TYPE_OPTION = 4,
    XTP_TICKER_TYPE_TECH_STOCK = 5,
    XTP_TICKER_TYPE_UNKNOWN = 6,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum XTP_BUSINESS_TYPE {
    XTP_BUSINESS_TYPE_CASH = 0,
    XTP_BUSINESS_TYPE_IPOS = 1,
    XTP_BUSINESS_TYPE_REPO = 2,
    XTP_BUSINESS_TYPE_ETF = 3,
    XTP_BUSINESS_TYPE_MARGIN = 4,
    XTP_BUSINESS_TYPE_DESIGNATION = 5,
    XTP_BUSINESS_TYPE_ALLOTMENT = 6,
    XTP_BUSINESS_TYPE_STRUCTURED_FUND_PURCHASE_REDEMPTION = 7,
    XTP_BUSINESS_TYPE_STRUCTURED_FUND_SPLIT_MERGE = 8,
    XTP_BUSINESS_TYPE_MONEY_FUND = 9,
    XTP_BUSINESS_TYPE_OPTION = 10,
    XTP_BUSINESS_TYPE_EXECUTE = 11,
    XTP_BUSINESS_TYPE_FREEZE = 12,
    XTP_BUSINESS_TYPE_UNKNOWN = 13,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum XTP_ACCOUNT_TYPE {
    XTP_ACCOUNT_NORMAL = 0,
    XTP_ACCOUNT_CREDIT = 1,
    XTP_ACCOUNT_DERIVE = 2,
    XTP_ACCOUNT_UNKNOWN = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum XTP_FUND_TRANSFER_TYPE {
    XTP_FUND_TRANSFER_OUT = 0,
    XTP_FUND_TRANSFER_IN = 1,
    XTP_FUND_INTER_TRANSFER_OUT = 2,
    XTP_FUND_INTER_TRANSFER_IN = 3,
    XTP_FUND_TRANSFER_UNKNOWN = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum XTP_FUND_OPER_STATUS {
    XTP_FUND_OPER_PROCESSING = 0,
    XTP_FUND_OPER_SUCCESS = 1,
    XTP_FUND_OPER_FAILED = 2,
    XTP_FUND_OPER_SUBMITTED = 3,
    XTP_FUND_OPER_UNKNOWN = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum XTP_SPLIT_MERGE_STATUS {
    XTP_SPLIT_MERGE_STATUS_ALLOW = 0,
    XTP_SPLIT_MERGE_STATUS_ONLY_SPLIT = 1,
    XTP_SPLIT_MERGE_STATUS_ONLY_MERGE = 2,
    XTP_SPLIT_MERGE_STATUS_FORBIDDEN = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum XTP_TBT_TYPE {
    XTP_TBT_ENTRUST = 1,
    XTP_TBT_TRADE = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum XTP_OPT_CALL_OR_PUT_TYPE {
    XTP_OPT_CALL = 1,
    XTP_OPT_PUT = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum XTP_OPT_EXERCISE_TYPE_TYPE {
    XTP_OPT_EXERCISE_TYPE_EUR = 1,
    XTP_OPT_EXERCISE_TYPE_AME = 2,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum XTP_POSITION_DIRECTION_TYPE {
    XTP_POSITION_DIRECTION_NET = 0,
    XTP_POSITION_DIRECTION_LONG = 1,
    XTP_POSITION_DIRECTION_SHORT = 2,
    XTP_POSITION_DIRECTION_COVERED = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum XTP_CRD_CR_STATUS {
    XTP_CRD_CR_INIT = 0,
    XTP_CRD_CR_SUCCESS = 1,
    XTP_CRD_CR_FAILED = 2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XTPRspInfoStruct {
    pub error_id: i32,
    pub error_msg: [::std::os::raw::c_char; 124usize],
}
pub type XTPRI = XTPRspInfoStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPSpecificTickerStruct {
    pub exchange_id: XTP_EXCHANGE_TYPE,
    pub ticker: [::std::os::raw::c_char; 16usize],
}
pub type XTPST = XTPSpecificTickerStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPMarketDataStockExData {
    pub total_bid_qty: i64,
    pub total_ask_qty: i64,
    pub ma_bid_price: f64,
    pub ma_ask_price: f64,
    pub ma_bond_bid_price: f64,
    pub ma_bond_ask_price: f64,
    pub yield_to_maturity: f64,
    pub iopv: f64,
    pub etf_buy_count: i32,
    pub etf_sell_count: i32,
    pub etf_buy_qty: f64,
    pub etf_buy_money: f64,
    pub etf_sell_qty: f64,
    pub etf_sell_money: f64,
    pub total_warrant_exec_qty: f64,
    pub warrant_lower_price: f64,
    pub warrant_upper_price: f64,
    pub cancel_buy_count: i32,
    pub cancel_sell_count: i32,
    pub cancel_buy_qty: f64,
    pub cancel_sell_qty: f64,
    pub cancel_buy_money: f64,
    pub cancel_sell_money: f64,
    pub total_buy_count: i64,
    pub total_sell_count: i64,
    pub duration_after_buy: i32,
    pub duration_after_sell: i32,
    pub num_bid_orders: i32,
    pub num_ask_orders: i32,
    pub pre_iopv: f64,
    pub r1: i64,
    pub r2: i64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPMarketDataOptionExData {
    pub auction_price: f64,
    pub auction_qty: i64,
    pub last_enquiry_time: i64,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum XTP_MARKETDATA_TYPE {
    XTP_MARKETDATA_ACTUAL = 0,
    XTP_MARKETDATA_OPTION = 1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XTPMarketDataStruct {
    pub exchange_id: XTP_EXCHANGE_TYPE,
    pub ticker: [::std::os::raw::c_char; 16usize],
    pub last_price: f64,
    pub pre_close_price: f64,
    pub open_price: f64,
    pub high_price: f64,
    pub low_price: f64,
    pub close_price: f64,
    pub pre_total_long_positon: i64,
    pub total_long_positon: i64,
    pub pre_settl_price: f64,
    pub settl_price: f64,
    pub upper_limit_price: f64,
    pub lower_limit_price: f64,
    pub pre_delta: f64,
    pub curr_delta: f64,
    pub data_time: i64,
    pub qty: i64,
    pub turnover: f64,
    pub avg_price: f64,
    pub bid: [f64; 10usize],
    pub ask: [f64; 10usize],
    pub bid_qty: [i64; 10usize],
    pub ask_qty: [i64; 10usize],
    pub trades_count: i64,
    pub ticker_status: [::std::os::raw::c_char; 8usize],
    pub __bindgen_anon_1: XTPMarketDataStruct__bindgen_ty_1,
    pub data_type: XTP_MARKETDATA_TYPE,
    pub r4: i32,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union XTPMarketDataStruct__bindgen_ty_1 {
    pub stk: XTPMarketDataStockExData,
    pub opt: XTPMarketDataOptionExData,
    _bindgen_union_align: [u64; 28usize],
}
pub type XTPMD = XTPMarketDataStruct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XTPQuoteStaticInfo {
    pub exchange_id: XTP_EXCHANGE_TYPE,
    pub ticker: [::std::os::raw::c_char; 16usize],
    pub ticker_name: [::std::os::raw::c_char; 64usize],
    pub ticker_type: XTP_TICKER_TYPE,
    pub pre_close_price: f64,
    pub upper_limit_price: f64,
    pub lower_limit_price: f64,
    pub price_tick: f64,
    pub buy_qty_unit: i32,
    pub sell_qty_unit: i32,
}
pub type XTPQSI = XTPQuoteStaticInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrderBookStruct {
    pub exchange_id: XTP_EXCHANGE_TYPE,
    pub ticker: [::std::os::raw::c_char; 16usize],
    pub last_price: f64,
    pub qty: i64,
    pub turnover: f64,
    pub trades_count: i64,
    pub bid: [f64; 10usize],
    pub ask: [f64; 10usize],
    pub bid_qty: [i64; 10usize],
    pub ask_qty: [i64; 10usize],
    pub data_time: i64,
}
pub type XTPOB = OrderBookStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPTickByTickEntrust {
    pub channel_no: i32,
    pub seq: i64,
    pub price: f64,
    pub qty: i64,
    pub side: ::std::os::raw::c_char,
    pub ord_type: ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPTickByTickTrade {
    pub channel_no: i32,
    pub seq: i64,
    pub price: f64,
    pub qty: i64,
    pub money: f64,
    pub bid_no: i64,
    pub ask_no: i64,
    pub trade_flag: ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XTPTickByTickStruct {
    pub exchange_id: XTP_EXCHANGE_TYPE,
    pub ticker: [::std::os::raw::c_char; 16usize],
    pub seq: i64,
    pub data_time: i64,
    pub type_: XTP_TBT_TYPE,
    pub __bindgen_anon_1: XTPTickByTickStruct__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union XTPTickByTickStruct__bindgen_ty_1 {
    pub entrust: XTPTickByTickEntrust,
    pub trade: XTPTickByTickTrade,
    _bindgen_union_align: [u64; 8usize],
}
pub type XTPTBT = XTPTickByTickStruct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPTickerPriceInfo {
    pub exchange_id: XTP_EXCHANGE_TYPE,
    pub ticker: [::std::os::raw::c_char; 16usize],
    pub last_price: f64,
}
pub type XTPTPI = XTPTickerPriceInfo;
#[repr(C)]
pub struct XTPOrderInsertInfo {
    pub order_xtp_id: u64,
    pub order_client_id: u32,
    pub ticker: [::std::os::raw::c_char; 16usize],
    pub market: XTP_MARKET_TYPE,
    pub price: f64,
    pub stop_price: f64,
    pub quantity: i64,
    pub price_type: XTP_PRICE_TYPE,
    pub __bindgen_anon_1: XTPOrderInsertInfo__bindgen_ty_1,
    pub business_type: XTP_BUSINESS_TYPE,
}
#[repr(C)]
pub struct XTPOrderInsertInfo__bindgen_ty_1 {
    pub u32: __BindgenUnionField<u32>,
    pub __bindgen_anon_1: __BindgenUnionField<XTPOrderInsertInfo__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: u32,
}
#[repr(C)]
pub struct XTPOrderInsertInfo__bindgen_ty_1__bindgen_ty_1 {
    pub side: XTP_SIDE_TYPE,
    pub position_effect: XTP_POSITION_EFFECT_TYPE,
    pub reserved1: u8,
    pub reserved2: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPOrderCancelInfo {
    pub order_cancel_xtp_id: u64,
    pub order_xtp_id: u64,
}
#[repr(C)]
pub struct XTPOrderInfo {
    pub order_xtp_id: u64,
    pub order_client_id: u32,
    pub order_cancel_client_id: u32,
    pub order_cancel_xtp_id: u64,
    pub ticker: [::std::os::raw::c_char; 16usize],
    pub market: XTP_MARKET_TYPE,
    pub price: f64,
    pub quantity: i64,
    pub price_type: XTP_PRICE_TYPE,
    pub __bindgen_anon_1: XTPOrderInfo__bindgen_ty_1,
    pub business_type: XTP_BUSINESS_TYPE,
    pub qty_traded: i64,
    pub qty_left: i64,
    pub insert_time: i64,
    pub update_time: i64,
    pub cancel_time: i64,
    pub trade_amount: f64,
    pub order_local_id: [::std::os::raw::c_char; 11usize],
    pub order_status: XTP_ORDER_STATUS_TYPE,
    pub order_submit_status: XTP_ORDER_SUBMIT_STATUS_TYPE,
    pub order_type: TXTPOrderTypeType,
}
#[repr(C)]
pub struct XTPOrderInfo__bindgen_ty_1 {
    pub u32: __BindgenUnionField<u32>,
    pub __bindgen_anon_1: __BindgenUnionField<XTPOrderInfo__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: u32,
}
#[repr(C)]
pub struct XTPOrderInfo__bindgen_ty_1__bindgen_ty_1 {
    pub side: XTP_SIDE_TYPE,
    pub position_effect: XTP_POSITION_EFFECT_TYPE,
    pub reserved1: u8,
    pub reserved2: u8,
}
#[repr(C)]
pub struct XTPTradeReport {
    pub order_xtp_id: u64,
    pub order_client_id: u32,
    pub ticker: [::std::os::raw::c_char; 16usize],
    pub market: XTP_MARKET_TYPE,
    pub local_order_id: u64,
    pub exec_id: [::std::os::raw::c_char; 18usize],
    pub price: f64,
    pub quantity: i64,
    pub trade_time: i64,
    pub trade_amount: f64,
    pub report_index: u64,
    pub order_exch_id: [::std::os::raw::c_char; 17usize],
    pub trade_type: TXTPTradeTypeType,
    pub __bindgen_anon_1: XTPTradeReport__bindgen_ty_1,
    pub business_type: XTP_BUSINESS_TYPE,
    pub branch_pbu: [::std::os::raw::c_char; 7usize],
}
#[repr(C)]
pub struct XTPTradeReport__bindgen_ty_1 {
    pub u32: __BindgenUnionField<u32>,
    pub __bindgen_anon_1: __BindgenUnionField<XTPTradeReport__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: u32,
}
#[repr(C)]
pub struct XTPTradeReport__bindgen_ty_1__bindgen_ty_1 {
    pub side: XTP_SIDE_TYPE,
    pub position_effect: XTP_POSITION_EFFECT_TYPE,
    pub reserved1: u8,
    pub reserved2: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryOrderReq {
    pub ticker: [::std::os::raw::c_char; 16usize],
    pub begin_time: i64,
    pub end_time: i64,
}
pub type XTPQueryOrderRsp = XTPOrderInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryOrderByPageReq {
    pub req_count: i64,
    pub reference: i64,
    pub reserved: i64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryReportByExecIdReq {
    pub order_xtp_id: u64,
    pub exec_id: [::std::os::raw::c_char; 18usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryTraderReq {
    pub ticker: [::std::os::raw::c_char; 16usize],
    pub begin_time: i64,
    pub end_time: i64,
}
pub type XTPQueryTradeRsp = XTPTradeReport;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryTraderByPageReq {
    pub req_count: i64,
    pub reference: i64,
    pub reserved: i64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryAssetRsp {
    pub total_asset: f64,
    pub buying_power: f64,
    pub security_asset: f64,
    pub fund_buy_amount: f64,
    pub fund_buy_fee: f64,
    pub fund_sell_amount: f64,
    pub fund_sell_fee: f64,
    pub withholding_amount: f64,
    pub account_type: XTP_ACCOUNT_TYPE,
    pub frozen_margin: f64,
    pub frozen_exec_cash: f64,
    pub frozen_exec_fee: f64,
    pub pay_later: f64,
    pub preadva_pay: f64,
    pub orig_banlance: f64,
    pub banlance: f64,
    pub deposit_withdraw: f64,
    pub trade_netting: f64,
    pub captial_asset: f64,
    pub force_freeze_amount: f64,
    pub preferred_amount: f64,
    pub repay_stock_aval_banlance: f64,
    pub unknown: [u64; 30usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XTPQueryStkPositionRsp {
    pub ticker: [::std::os::raw::c_char; 16usize],
    pub ticker_name: [::std::os::raw::c_char; 64usize],
    pub market: XTP_MARKET_TYPE,
    pub total_qty: i64,
    pub sellable_qty: i64,
    pub avg_price: f64,
    pub unrealized_pnl: f64,
    pub yesterday_position: i64,
    pub purchase_redeemable_qty: i64,
    pub position_direction: XTP_POSITION_DIRECTION_TYPE,
    pub reserved1: u32,
    pub executable_option: i64,
    pub lockable_position: i64,
    pub executable_underlying: i64,
    pub locked_position: i64,
    pub usable_locked_position: i64,
    pub unknown: [u64; 44usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPFundTransferNotice {
    pub serial_id: u64,
    pub transfer_type: XTP_FUND_TRANSFER_TYPE,
    pub amount: f64,
    pub oper_status: XTP_FUND_OPER_STATUS,
    pub transfer_time: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryFundTransferLogReq {
    pub serial_id: u64,
}
pub type XTPFundTransferLog = XTPFundTransferNotice;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryStructuredFundInfoReq {
    pub exchange_id: XTP_EXCHANGE_TYPE,
    pub sf_ticker: [::std::os::raw::c_char; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XTPStructuredFundInfo {
    pub exchange_id: XTP_EXCHANGE_TYPE,
    pub sf_ticker: [::std::os::raw::c_char; 16usize],
    pub sf_ticker_name: [::std::os::raw::c_char; 64usize],
    pub ticker: [::std::os::raw::c_char; 16usize],
    pub ticker_name: [::std::os::raw::c_char; 64usize],
    pub split_merge_status: XTP_SPLIT_MERGE_STATUS,
    pub ratio: u32,
    pub min_split_qty: u32,
    pub min_merge_qty: u32,
    pub net_price: f64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryETFBaseReq {
    pub market: XTP_MARKET_TYPE,
    pub ticker: [::std::os::raw::c_char; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryETFBaseRsp {
    pub market: XTP_MARKET_TYPE,
    pub etf: [::std::os::raw::c_char; 16usize],
    pub subscribe_redemption_ticker: [::std::os::raw::c_char; 16usize],
    pub unit: i32,
    pub subscribe_status: i32,
    pub redemption_status: i32,
    pub max_cash_ratio: f64,
    pub estimate_amount: f64,
    pub cash_component: f64,
    pub net_value: f64,
    pub total_amount: f64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryETFComponentReq {
    pub market: XTP_MARKET_TYPE,
    pub ticker: [::std::os::raw::c_char; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XTPQueryETFComponentRsp {
    pub market: XTP_MARKET_TYPE,
    pub ticker: [::std::os::raw::c_char; 16usize],
    pub component_ticker: [::std::os::raw::c_char; 16usize],
    pub component_name: [::std::os::raw::c_char; 64usize],
    pub quantity: i64,
    pub component_market: XTP_MARKET_TYPE,
    pub replace_type: ETF_REPLACE_TYPE,
    pub premium_ratio: f64,
    pub amount: f64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XTPQueryIPOTickerRsp {
    pub market: XTP_MARKET_TYPE,
    pub ticker: [::std::os::raw::c_char; 16usize],
    pub ticker_name: [::std::os::raw::c_char; 64usize],
    pub ticker_type: XTP_TICKER_TYPE,
    pub price: f64,
    pub unit: i32,
    pub qty_upper_limit: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryIPOQuotaRspV1 {
    pub market: XTP_MARKET_TYPE,
    pub quantity: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryIPOQuotaRsp {
    pub market: XTP_MARKET_TYPE,
    pub quantity: i32,
    pub tech_quantity: i32,
    pub unused: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryOptionAuctionInfoReq {
    pub market: XTP_MARKET_TYPE,
    pub ticker: [::std::os::raw::c_char; 16usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XTPQueryOptionAuctionInfoRsp {
    pub ticker: [::std::os::raw::c_char; 16usize],
    pub security_id_source: XTP_MARKET_TYPE,
    pub symbol: [::std::os::raw::c_char; 64usize],
    pub contract_id: [::std::os::raw::c_char; 64usize],
    pub underlying_security_id: [::std::os::raw::c_char; 16usize],
    pub underlying_security_id_source: XTP_MARKET_TYPE,
    pub list_date: u32,
    pub last_trade_date: u32,
    pub ticker_type: XTP_TICKER_TYPE,
    pub day_trading: i32,
    pub call_or_put: XTP_OPT_CALL_OR_PUT_TYPE,
    pub delivery_day: u32,
    pub delivery_month: u32,
    pub exercise_type: XTP_OPT_EXERCISE_TYPE_TYPE,
    pub exercise_begin_date: u32,
    pub exercise_end_date: u32,
    pub exercise_price: f64,
    pub qty_unit: i64,
    pub contract_unit: i64,
    pub contract_position: i64,
    pub prev_close_price: f64,
    pub prev_clearing_price: f64,
    pub lmt_buy_max_qty: i64,
    pub lmt_buy_min_qty: i64,
    pub lmt_sell_max_qty: i64,
    pub lmt_sell_min_qty: i64,
    pub mkt_buy_max_qty: i64,
    pub mkt_buy_min_qty: i64,
    pub mkt_sell_max_qty: i64,
    pub mkt_sell_min_qty: i64,
    pub price_tick: f64,
    pub upper_limit_price: f64,
    pub lower_limit_price: f64,
    pub sell_margin: f64,
    pub margin_ratio_param1: f64,
    pub margin_ratio_param2: f64,
    pub unknown: [u64; 20usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPCrdCashRepayRsp {
    pub xtp_id: i64,
    pub request_amount: f64,
    pub cash_repay_amount: f64,
}
#[repr(C)]
pub struct XTPCrdCashRepayInfo {
    pub xtp_id: i64,
    pub status: XTP_CRD_CR_STATUS,
    pub request_amount: f64,
    pub cash_repay_amount: f64,
    pub position_effect: XTP_POSITION_EFFECT_TYPE,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XTPCrdDebtInfo {
    pub debt_type: i32,
    pub debt_id: [::std::os::raw::c_char; 33usize],
    pub position_id: i64,
    pub order_xtp_id: u64,
    pub debt_status: i32,
    pub market: XTP_MARKET_TYPE,
    pub ticker: [::std::os::raw::c_char; 16usize],
    pub order_date: u64,
    pub end_date: u64,
    pub orig_end_date: u64,
    pub is_extended: bool,
    pub remain_amt: f64,
    pub remain_qty: i64,
    pub remain_principal: f64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPCrdFundInfo {
    pub maintenance_ratio: f64,
    pub line_of_credit: f64,
    pub guaranty: f64,
    pub position_amount: f64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPClientQueryCrdDebtStockReq {
    pub market: XTP_MARKET_TYPE,
    pub ticker: [::std::os::raw::c_char; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPCrdDebtStockInfo {
    pub market: XTP_MARKET_TYPE,
    pub ticker: [::std::os::raw::c_char; 16usize],
    pub remain_quantity: i64,
    pub order_withhold_quantity: i64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPClientQueryCrdPositionStockReq {
    pub market: XTP_MARKET_TYPE,
    pub ticker: [::std::os::raw::c_char; 16usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPClientQueryCrdPositionStkInfo {
    pub market: XTP_MARKET_TYPE,
    pub ticker: [::std::os::raw::c_char; 16usize],
    pub limit_qty: i64,
    pub yesterday_qty: i64,
    pub left_qty: i64,
    pub frozen_qty: i64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XTPFundTransferReq {
    pub serial_id: u64,
    pub fund_account: [::std::os::raw::c_char; 16usize],
    pub password: [::std::os::raw::c_char; 64usize],
    pub amount: f64,
    pub transfer_type: XTP_FUND_TRANSFER_TYPE,
}
pub type XTPFundTransferAck = XTPFundTransferNotice;
#[repr(C)]
pub struct XTP_API_TraderSpi__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTP_API_TraderSpi {
    pub vtable_: *const XTP_API_TraderSpi__bindgen_vtable,
}
#[repr(C)]
pub struct XTP_API_TraderApi__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct XTP_API_TraderApi {
    pub vtable_: *const XTP_API_TraderApi__bindgen_vtable,
}
extern "C" {
    #[link_name = "\u{1}_ZN3XTP3API9TraderApiD1Ev"]
    pub fn XTP_API_TraderApi_TraderApi_destructor(this: *mut XTP_API_TraderApi);
}
impl XTP_API_TraderApi {
    #[inline]
    pub unsafe fn destruct(&mut self) {
        XTP_API_TraderApi_TraderApi_destructor(self)
    }
}
#[repr(C)]
pub struct XTP_API_QuoteSpi__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTP_API_QuoteSpi {
    pub vtable_: *const XTP_API_QuoteSpi__bindgen_vtable,
}
#[repr(C)]
pub struct XTP_API_QuoteApi__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct XTP_API_QuoteApi {
    pub vtable_: *const XTP_API_QuoteApi__bindgen_vtable,
}
extern "C" {
    #[link_name = "\u{1}_ZN3XTP3API8QuoteApiD1Ev"]
    pub fn XTP_API_QuoteApi_QuoteApi_destructor(this: *mut XTP_API_QuoteApi);
}
impl XTP_API_QuoteApi {
    #[inline]
    pub unsafe fn destruct(&mut self) {
        XTP_API_QuoteApi_QuoteApi_destructor(self)
    }
}
extern "C" {
    pub fn CreateQuoteApi(
        client_id: u8,
        save_file_path: *const ::std::os::raw::c_char,
        log_level: XTP_LOG_LEVEL,
    ) -> *mut XTP_API_QuoteApi;
}
extern "C" {
    pub fn QuoteApi_Release(self_: *mut XTP_API_QuoteApi);
}
extern "C" {
    pub fn QuoteApi_GetTradingDay(self_: *mut XTP_API_QuoteApi) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn QuoteApi_GetApiVersion(self_: *mut XTP_API_QuoteApi) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn QuoteApi_GetApiLastError(self_: *mut XTP_API_QuoteApi) -> *mut XTPRI;
}
extern "C" {
    pub fn QuoteApi_SetUDPBufferSize(self_: *mut XTP_API_QuoteApi, buff_size: u32);
}
extern "C" {
    pub fn QuoteApi_RegisterSpi(self_: *mut XTP_API_QuoteApi, spi: *mut XTP_API_QuoteSpi);
}
extern "C" {
    pub fn QuoteApi_SetHeartBeatInterval(self_: *mut XTP_API_QuoteApi, interval: u32);
}
extern "C" {
    pub fn QuoteApi_SubscribeMarketData(
        self_: *mut XTP_API_QuoteApi,
        ticker: *mut *mut ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
        exchange_id: XTP_EXCHANGE_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuoteApi_UnSubscribeMarketData(
        self_: *mut XTP_API_QuoteApi,
        ticker: *mut *mut ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
        exchange_id: XTP_EXCHANGE_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuoteApi_SubscribeOrderBook(
        self_: *mut XTP_API_QuoteApi,
        ticker: *mut *mut ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
        exchange_id: XTP_EXCHANGE_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuoteApi_UnSubscribeOrderBook(
        self_: *mut XTP_API_QuoteApi,
        ticker: *mut *mut ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
        exchange_id: XTP_EXCHANGE_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuoteApi_SubscribeTickByTick(
        self_: *mut XTP_API_QuoteApi,
        ticker: *mut *mut ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
        exchange_id: XTP_EXCHANGE_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuoteApi_UnSubscribeTickByTick(
        self_: *mut XTP_API_QuoteApi,
        ticker: *mut *mut ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
        exchange_id: XTP_EXCHANGE_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuoteApi_SubscribeAllMarketData(
        self_: *mut XTP_API_QuoteApi,
        exchange_id: XTP_EXCHANGE_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuoteApi_UnSubscribeAllMarketData(
        self_: *mut XTP_API_QuoteApi,
        exchange_id: XTP_EXCHANGE_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuoteApi_SubscribeAllOrderBook(
        self_: *mut XTP_API_QuoteApi,
        exchange_id: XTP_EXCHANGE_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuoteApi_UnSubscribeAllOrderBook(
        self_: *mut XTP_API_QuoteApi,
        exchange_id: XTP_EXCHANGE_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuoteApi_SubscribeAllTickByTick(
        self_: *mut XTP_API_QuoteApi,
        exchange_id: XTP_EXCHANGE_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuoteApi_UnSubscribeAllTickByTick(
        self_: *mut XTP_API_QuoteApi,
        exchange_id: XTP_EXCHANGE_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuoteApi_Login(
        self_: *mut XTP_API_QuoteApi,
        ip: *const ::std::os::raw::c_char,
        port: ::std::os::raw::c_int,
        user: *const ::std::os::raw::c_char,
        password: *const ::std::os::raw::c_char,
        sock_type: XTP_PROTOCOL_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuoteApi_Logout(self_: *mut XTP_API_QuoteApi) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuoteApi_QueryAllTickers(
        self_: *mut XTP_API_QuoteApi,
        exchange_id: XTP_EXCHANGE_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuoteApi_QueryTickersPriceInfo(
        self_: *mut XTP_API_QuoteApi,
        ticker: *mut *mut ::std::os::raw::c_char,
        count: ::std::os::raw::c_int,
        exchange_id: XTP_EXCHANGE_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuoteApi_QueryAllTickersPriceInfo(self_: *mut XTP_API_QuoteApi)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuoteApi_SubscribeAllOptionMarketData(
        self_: *mut XTP_API_QuoteApi,
        exchange_id: XTP_EXCHANGE_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuoteApi_UnSubscribeAllOptionMarketData(
        self_: *mut XTP_API_QuoteApi,
        exchange_id: XTP_EXCHANGE_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuoteApi_SubscribeAllOptionOrderBook(
        self_: *mut XTP_API_QuoteApi,
        exchange_id: XTP_EXCHANGE_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuoteApi_UnSubscribeAllOptionOrderBook(
        self_: *mut XTP_API_QuoteApi,
        exchange_id: XTP_EXCHANGE_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuoteApi_SubscribeAllOptionTickByTick(
        self_: *mut XTP_API_QuoteApi,
        exchange_id: XTP_EXCHANGE_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn QuoteApi_UnSubscribeAllOptionTickByTick(
        self_: *mut XTP_API_QuoteApi,
        exchange_id: XTP_EXCHANGE_TYPE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn CreateTraderApi(
        client_id: u8,
        save_file_path: *const ::std::os::raw::c_char,
        log_level: XTP_LOG_LEVEL,
    ) -> *mut XTP_API_TraderApi;
}
extern "C" {
    pub fn TraderApi_Release(self_: *mut XTP_API_TraderApi);
}
extern "C" {
    pub fn GetTradingDay(self_: *mut XTP_API_TraderApi) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TraderApi_RegisterSpi(self_: *mut XTP_API_TraderApi, spi: *mut XTP_API_TraderSpi);
}
extern "C" {
    pub fn GetApiLastError(self_: *mut XTP_API_TraderApi) -> *mut XTPRI;
}
extern "C" {
    pub fn TraderApi_GetApiVersion(self_: *mut XTP_API_TraderApi) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TraderApi_GetClientIDByXTPID(self_: *mut XTP_API_TraderApi, order_xtp_id: u64) -> u8;
}
extern "C" {
    pub fn TraderApi_GetAccountByXTPID(
        self_: *mut XTP_API_TraderApi,
        order_xtp_id: u64,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TraderApi_SubscribePublicTopic(
        self_: *mut XTP_API_TraderApi,
        resume_type: XTP_TE_RESUME_TYPE,
    );
}
extern "C" {
    pub fn TraderApi_SetSoftwareVersion(
        self_: *mut XTP_API_TraderApi,
        version: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn TraderApi_SetSoftwareKey(
        self_: *mut XTP_API_TraderApi,
        key: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn TraderApi_SetHeartBeatInterval(self_: *mut XTP_API_TraderApi, interval: u32);
}
extern "C" {
    pub fn TraderApi_Login(
        self_: *mut XTP_API_TraderApi,
        ip: *const ::std::os::raw::c_char,
        port: ::std::os::raw::c_int,
        user: *const ::std::os::raw::c_char,
        password: *const ::std::os::raw::c_char,
        sock_type: XTP_PROTOCOL_TYPE,
    ) -> u64;
}
extern "C" {
    pub fn TraderApi_Logout(
        self_: *mut XTP_API_TraderApi,
        session_id: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TraderApi_IsServerRestart(self_: *mut XTP_API_TraderApi, session_id: u64) -> bool;
}
extern "C" {
    pub fn TraderApi_InsertOrder(
        self_: *mut XTP_API_TraderApi,
        order: *mut XTPOrderInsertInfo,
        session_id: u64,
    ) -> u64;
}
extern "C" {
    pub fn TraderApi_CancelOrder(
        self_: *mut XTP_API_TraderApi,
        order_xtp_id: u64,
        session_id: u64,
    ) -> u64;
}
extern "C" {
    pub fn TraderApi_QueryOrderByXTPID(
        self_: *mut XTP_API_TraderApi,
        order_xtp_id: u64,
        session_id: u64,
        request_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TraderApi_QueryOrders(
        self_: *mut XTP_API_TraderApi,
        query_param: *const XTPQueryOrderReq,
        session_id: u64,
        request_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TraderApi_QueryOrdersByPage(
        self_: *mut XTP_API_TraderApi,
        query_param: *const XTPQueryOrderByPageReq,
        session_id: u64,
        request_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TraderApi_QueryTradesByXTPID(
        self_: *mut XTP_API_TraderApi,
        order_xtp_id: u64,
        session_id: u64,
        request_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TraderApi_QueryTrades(
        self_: *mut XTP_API_TraderApi,
        query_param: *mut XTPQueryTraderReq,
        session_id: u64,
        request_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TraderApi_QueryTradesByPage(
        self_: *mut XTP_API_TraderApi,
        query_param: *const XTPQueryTraderByPageReq,
        session_id: u64,
        request_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TraderApi_QueryPosition(
        self_: *mut XTP_API_TraderApi,
        ticker: *const ::std::os::raw::c_char,
        session_id: u64,
        request_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TraderApi_QueryAsset(
        self_: *mut XTP_API_TraderApi,
        session_id: u64,
        request_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TraderApi_QueryStructuredFund(
        self_: *mut XTP_API_TraderApi,
        query_param: *mut XTPQueryStructuredFundInfoReq,
        session_id: u64,
        request_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TraderApi_FundTransfer(
        self_: *mut XTP_API_TraderApi,
        fund_transfer: *mut XTPFundTransferReq,
        session_id: u64,
    ) -> u64;
}
extern "C" {
    pub fn TraderApi_QueryFundTransfer(
        self_: *mut XTP_API_TraderApi,
        query_param: *mut XTPQueryFundTransferLogReq,
        session_id: u64,
        request_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TraderApi_QueryETF(
        self_: *mut XTP_API_TraderApi,
        query_param: *mut XTPQueryETFBaseReq,
        session_id: u64,
        request_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TraderApi_QueryETFTickerBasket(
        self_: *mut XTP_API_TraderApi,
        query_param: *mut XTPQueryETFComponentReq,
        session_id: u64,
        request_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TraderApi_QueryIPOInfoList(
        self_: *mut XTP_API_TraderApi,
        session_id: u64,
        request_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TraderApi_QueryIPOQuotaInfo(
        self_: *mut XTP_API_TraderApi,
        session_id: u64,
        request_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TraderApi_QueryOptionAuctionInfo(
        self_: *mut XTP_API_TraderApi,
        query_param: *mut XTPQueryOptionAuctionInfoReq,
        session_id: u64,
        request_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug)]
pub struct QuoteSpiStub {
    pub _base: XTP_API_QuoteSpi,
    pub rust_object: *mut ::std::os::raw::c_void,
}
extern "C" {
    #[link_name = "\u{1}_ZN12QuoteSpiStubC1EPv"]
    pub fn QuoteSpiStub_QuoteSpiStub(
        this: *mut QuoteSpiStub,
        rust_object: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN12QuoteSpiStubD1Ev"]
    pub fn QuoteSpiStub_QuoteSpiStub_destructor(this: *mut QuoteSpiStub);
}
impl QuoteSpiStub {
    #[inline]
    pub unsafe fn new(rust_object: *mut ::std::os::raw::c_void) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        QuoteSpiStub_QuoteSpiStub(&mut __bindgen_tmp, rust_object);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        QuoteSpiStub_QuoteSpiStub_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct TraderSpiStub {
    pub _base: XTP_API_TraderSpi,
    pub rust_object: *mut ::std::os::raw::c_void,
}
extern "C" {
    #[link_name = "\u{1}_ZN13TraderSpiStubC1EPv"]
    pub fn TraderSpiStub_TraderSpiStub(
        this: *mut TraderSpiStub,
        rust_object: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN13TraderSpiStubD1Ev"]
    pub fn TraderSpiStub_TraderSpiStub_destructor(this: *mut TraderSpiStub);
}
impl TraderSpiStub {
    #[inline]
    pub unsafe fn new(rust_object: *mut ::std::os::raw::c_void) -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        TraderSpiStub_TraderSpiStub(&mut __bindgen_tmp, rust_object);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        TraderSpiStub_TraderSpiStub_destructor(self)
    }
}
