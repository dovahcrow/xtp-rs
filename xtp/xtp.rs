/* automatically generated by rust-bindgen */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _ISOC95_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_XOPEN2K8XSI: u32 = 1;
pub const __USE_XOPEN2KXSI: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201505;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 23;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const _BITS_WCHAR_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const XTP_VERSION_LEN: u32 = 16;
pub const XTP_TRADING_DAY_LEN: u32 = 9;
pub const XTP_TICKER_LEN: u32 = 16;
pub const XTP_TICKER_NAME_LEN: u32 = 64;
pub const XTP_LOCAL_ORDER_LEN: u32 = 11;
pub const XTP_ORDER_EXCH_LEN: u32 = 17;
pub const XTP_EXEC_ID_LEN: u32 = 18;
pub const XTP_BRANCH_PBU_LEN: u32 = 7;
pub const XTP_ACCOUNT_NAME_LEN: u32 = 16;
pub const XTP_SIDE_BUY: u32 = 1;
pub const XTP_SIDE_SELL: u32 = 2;
pub const XTP_SIDE_PURCHASE: u32 = 7;
pub const XTP_SIDE_REDEMPTION: u32 = 8;
pub const XTP_SIDE_SPLIT: u32 = 9;
pub const XTP_SIDE_MERGE: u32 = 10;
pub const XTP_SIDE_COVER: u32 = 11;
pub const XTP_SIDE_FREEZE: u32 = 12;
pub const XTP_SIDE_MARGIN_TRADE: u32 = 21;
pub const XTP_SIDE_SHORT_SELL: u32 = 22;
pub const XTP_SIDE_REPAY_MARGIN: u32 = 23;
pub const XTP_SIDE_REPAY_STOCK: u32 = 24;
pub const XTP_SIDE_STOCK_REPAY_STOCK: u32 = 26;
pub const XTP_SIDE_SURSTK_TRANS: u32 = 27;
pub const XTP_SIDE_GRTSTK_TRANSIN: u32 = 28;
pub const XTP_SIDE_GRTSTK_TRANSOUT: u32 = 29;
pub const XTP_SIDE_UNKNOWN: u32 = 30;
pub const XTP_POSITION_EFFECT_INIT: u32 = 0;
pub const XTP_POSITION_EFFECT_OPEN: u32 = 1;
pub const XTP_POSITION_EFFECT_CLOSE: u32 = 2;
pub const XTP_POSITION_EFFECT_FORCECLOSE: u32 = 3;
pub const XTP_POSITION_EFFECT_CLOSETODAY: u32 = 4;
pub const XTP_POSITION_EFFECT_CLOSEYESTERDAY: u32 = 5;
pub const XTP_POSITION_EFFECT_FORCEOFF: u32 = 6;
pub const XTP_POSITION_EFFECT_LOCALFORCECLOSE: u32 = 7;
pub const XTP_POSITION_EFFECT_CREDIT_FORCE_COVER: u32 = 8;
pub const XTP_POSITION_EFFECT_CREDIT_FORCE_CLEAR: u32 = 9;
pub const XTP_POSITION_EFFECT_CREDIT_FORCE_DEBT: u32 = 10;
pub const XTP_POSITION_EFFECT_CREDIT_FORCE_UNCOND: u32 = 11;
pub const XTP_POSITION_EFFECT_UNKNOWN: u32 = 12;
pub const XTP_TRDT_COMMON: u8 = 48u8;
pub const XTP_TRDT_CASH: u8 = 49u8;
pub const XTP_TRDT_PRIMARY: u8 = 50u8;
pub const XTP_TRDT_CROSS_MKT_CASH: u8 = 51u8;
pub const XTP_ORDT_Normal: u8 = 48u8;
pub const XTP_ORDT_DeriveFromQuote: u8 = 49u8;
pub const XTP_ORDT_DeriveFromCombination: u8 = 50u8;
pub const XTP_ORDT_Combination: u8 = 51u8;
pub const XTP_ORDT_ConditionalOrder: u8 = 52u8;
pub const XTP_ORDT_Swap: u8 = 53u8;
pub const XTP_ERR_MSG_LEN: u32 = 124;
pub const XTP_ACCOUNT_PASSWORD_LEN: u32 = 64;
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
#[doc = " 版本号类型"]
pub type XTPVersionType = [::std::os::raw::c_char; 16usize];
#[doc = "<严重错误级别"]
pub const XTP_LOG_LEVEL_XTP_LOG_LEVEL_FATAL: XTP_LOG_LEVEL = 0;
#[doc = "<错误级别"]
pub const XTP_LOG_LEVEL_XTP_LOG_LEVEL_ERROR: XTP_LOG_LEVEL = 1;
#[doc = "<警告级别"]
pub const XTP_LOG_LEVEL_XTP_LOG_LEVEL_WARNING: XTP_LOG_LEVEL = 2;
#[doc = "<info级别"]
pub const XTP_LOG_LEVEL_XTP_LOG_LEVEL_INFO: XTP_LOG_LEVEL = 3;
#[doc = "<debug级别"]
pub const XTP_LOG_LEVEL_XTP_LOG_LEVEL_DEBUG: XTP_LOG_LEVEL = 4;
#[doc = "<trace级别"]
pub const XTP_LOG_LEVEL_XTP_LOG_LEVEL_TRACE: XTP_LOG_LEVEL = 5;
#[doc = ""]
#[doc = "@brief XTP_LOG_LEVEL是日志输出级别类型"]
#[doc = ""]
pub type XTP_LOG_LEVEL = u32;
#[doc = "<采用TCP方式传输"]
pub const XTP_PROTOCOL_TYPE_XTP_PROTOCOL_TCP: XTP_PROTOCOL_TYPE = 1;
#[doc = "<采用UDP方式传输(仅行情接口支持)"]
pub const XTP_PROTOCOL_TYPE_XTP_PROTOCOL_UDP: XTP_PROTOCOL_TYPE = 2;
#[doc = ""]
#[doc = "@brief XTP_PROTOCOL_TYPE是通讯传输协议方式"]
#[doc = ""]
pub type XTP_PROTOCOL_TYPE = u32;
#[doc = "<上证"]
pub const XTP_EXCHANGE_TYPE_XTP_EXCHANGE_SH: XTP_EXCHANGE_TYPE = 1;
#[doc = "<深证"]
pub const XTP_EXCHANGE_TYPE_XTP_EXCHANGE_SZ: XTP_EXCHANGE_TYPE = 2;
#[doc = "<不存在的交易所类型"]
pub const XTP_EXCHANGE_TYPE_XTP_EXCHANGE_UNKNOWN: XTP_EXCHANGE_TYPE = 3;
#[doc = ""]
#[doc = "@brief XTP_EXCHANGE_TYPE是交易所类型"]
#[doc = ""]
pub type XTP_EXCHANGE_TYPE = u32;
#[doc = "<初始化值或者未知"]
pub const XTP_MARKET_TYPE_XTP_MKT_INIT: XTP_MARKET_TYPE = 0;
#[doc = "<深圳A股"]
pub const XTP_MARKET_TYPE_XTP_MKT_SZ_A: XTP_MARKET_TYPE = 1;
#[doc = "<上海A股"]
pub const XTP_MARKET_TYPE_XTP_MKT_SH_A: XTP_MARKET_TYPE = 2;
#[doc = "<未知交易市场类型"]
pub const XTP_MARKET_TYPE_XTP_MKT_UNKNOWN: XTP_MARKET_TYPE = 3;
#[doc = ""]
#[doc = "@brief XTP_MARKET_TYPE市场类型"]
#[doc = ""]
pub type XTP_MARKET_TYPE = u32;
#[doc = "<限价单-沪 / 深 / 沪期权（除普通股票业务外，其余业务均使用此种类型）"]
pub const XTP_PRICE_TYPE_XTP_PRICE_LIMIT: XTP_PRICE_TYPE = 1;
#[doc = "<即时成交剩余转撤销，市价单-深 / 沪期权"]
pub const XTP_PRICE_TYPE_XTP_PRICE_BEST_OR_CANCEL: XTP_PRICE_TYPE = 2;
#[doc = "<最优五档即时成交剩余转限价，市价单-沪"]
pub const XTP_PRICE_TYPE_XTP_PRICE_BEST5_OR_LIMIT: XTP_PRICE_TYPE = 3;
#[doc = "<最优5档即时成交剩余转撤销，市价单-沪深"]
pub const XTP_PRICE_TYPE_XTP_PRICE_BEST5_OR_CANCEL: XTP_PRICE_TYPE = 4;
#[doc = "<全部成交或撤销,市价单-深 / 沪期权"]
pub const XTP_PRICE_TYPE_XTP_PRICE_ALL_OR_CANCEL: XTP_PRICE_TYPE = 5;
#[doc = "<本方最优，市价单-深"]
pub const XTP_PRICE_TYPE_XTP_PRICE_FORWARD_BEST: XTP_PRICE_TYPE = 6;
#[doc = "<对方最优剩余转限价，市价单-深 / 沪期权"]
pub const XTP_PRICE_TYPE_XTP_PRICE_REVERSE_BEST_LIMIT: XTP_PRICE_TYPE = 7;
#[doc = "<期权限价申报FOK"]
pub const XTP_PRICE_TYPE_XTP_PRICE_LIMIT_OR_CANCEL: XTP_PRICE_TYPE = 8;
#[doc = "<未知或者无效价格类型"]
pub const XTP_PRICE_TYPE_XTP_PRICE_TYPE_UNKNOWN: XTP_PRICE_TYPE = 9;
#[doc = ""]
#[doc = "@brief XTP_PRICE_TYPE是价格类型"]
#[doc = ""]
pub type XTP_PRICE_TYPE = u32;
#[doc = ""]
#[doc = "@brief XTP_SIDE_TYPE是买卖方向类型"]
#[doc = ""]
pub type XTP_SIDE_TYPE = u8;
#[doc = ""]
#[doc = "@brief XTP_POSITION_EFFECT_TYPE是开平标识类型"]
#[doc = ""]
pub type XTP_POSITION_EFFECT_TYPE = u8;
#[doc = "<已经提交"]
pub const XTP_ORDER_ACTION_STATUS_TYPE_XTP_ORDER_ACTION_STATUS_SUBMITTED:
    XTP_ORDER_ACTION_STATUS_TYPE = 1;
#[doc = "<已经接受"]
pub const XTP_ORDER_ACTION_STATUS_TYPE_XTP_ORDER_ACTION_STATUS_ACCEPTED:
    XTP_ORDER_ACTION_STATUS_TYPE = 2;
#[doc = "<已经被拒绝"]
pub const XTP_ORDER_ACTION_STATUS_TYPE_XTP_ORDER_ACTION_STATUS_REJECTED:
    XTP_ORDER_ACTION_STATUS_TYPE = 3;
#[doc = ""]
#[doc = "@brief XTP_ORDER_ACTION_STATUS_TYPE是报单操作状态类型"]
#[doc = ""]
pub type XTP_ORDER_ACTION_STATUS_TYPE = u32;
#[doc = "<初始化"]
pub const XTP_ORDER_STATUS_TYPE_XTP_ORDER_STATUS_INIT: XTP_ORDER_STATUS_TYPE = 0;
#[doc = "<全部成交"]
pub const XTP_ORDER_STATUS_TYPE_XTP_ORDER_STATUS_ALLTRADED: XTP_ORDER_STATUS_TYPE = 1;
#[doc = "<部分成交"]
pub const XTP_ORDER_STATUS_TYPE_XTP_ORDER_STATUS_PARTTRADEDQUEUEING: XTP_ORDER_STATUS_TYPE = 2;
#[doc = "<部分撤单"]
pub const XTP_ORDER_STATUS_TYPE_XTP_ORDER_STATUS_PARTTRADEDNOTQUEUEING: XTP_ORDER_STATUS_TYPE = 3;
#[doc = "<未成交"]
pub const XTP_ORDER_STATUS_TYPE_XTP_ORDER_STATUS_NOTRADEQUEUEING: XTP_ORDER_STATUS_TYPE = 4;
#[doc = "<已撤单"]
pub const XTP_ORDER_STATUS_TYPE_XTP_ORDER_STATUS_CANCELED: XTP_ORDER_STATUS_TYPE = 5;
#[doc = "<已拒绝"]
pub const XTP_ORDER_STATUS_TYPE_XTP_ORDER_STATUS_REJECTED: XTP_ORDER_STATUS_TYPE = 6;
#[doc = "<未知订单状态"]
pub const XTP_ORDER_STATUS_TYPE_XTP_ORDER_STATUS_UNKNOWN: XTP_ORDER_STATUS_TYPE = 7;
#[doc = ""]
#[doc = "@brief XTP_ORDER_STATUS_TYPE是报单状态类型"]
#[doc = ""]
pub type XTP_ORDER_STATUS_TYPE = u32;
#[doc = "<订单已经提交"]
pub const XTP_ORDER_SUBMIT_STATUS_TYPE_XTP_ORDER_SUBMIT_STATUS_INSERT_SUBMITTED:
    XTP_ORDER_SUBMIT_STATUS_TYPE = 1;
#[doc = "<订单已经被接受"]
pub const XTP_ORDER_SUBMIT_STATUS_TYPE_XTP_ORDER_SUBMIT_STATUS_INSERT_ACCEPTED:
    XTP_ORDER_SUBMIT_STATUS_TYPE = 2;
#[doc = "<订单已经被拒绝"]
pub const XTP_ORDER_SUBMIT_STATUS_TYPE_XTP_ORDER_SUBMIT_STATUS_INSERT_REJECTED:
    XTP_ORDER_SUBMIT_STATUS_TYPE = 3;
#[doc = "<撤单已经提交"]
pub const XTP_ORDER_SUBMIT_STATUS_TYPE_XTP_ORDER_SUBMIT_STATUS_CANCEL_SUBMITTED:
    XTP_ORDER_SUBMIT_STATUS_TYPE = 4;
#[doc = "<撤单已经被拒绝"]
pub const XTP_ORDER_SUBMIT_STATUS_TYPE_XTP_ORDER_SUBMIT_STATUS_CANCEL_REJECTED:
    XTP_ORDER_SUBMIT_STATUS_TYPE = 5;
#[doc = "<撤单已经被接受"]
pub const XTP_ORDER_SUBMIT_STATUS_TYPE_XTP_ORDER_SUBMIT_STATUS_CANCEL_ACCEPTED:
    XTP_ORDER_SUBMIT_STATUS_TYPE = 6;
#[doc = ""]
#[doc = "@brief XTP_ORDER_SUBMIT_STATUS_TYPE是报单提交状态类型"]
#[doc = ""]
pub type XTP_ORDER_SUBMIT_STATUS_TYPE = u32;
#[doc = "<从本交易日开始重传"]
pub const XTP_TE_RESUME_TYPE_XTP_TERT_RESTART: XTP_TE_RESUME_TYPE = 0;
#[doc = "<从从上次收到的续传（暂未支持）"]
pub const XTP_TE_RESUME_TYPE_XTP_TERT_RESUME: XTP_TE_RESUME_TYPE = 1;
#[doc = "<只传送登录后公有流（订单响应、成交回报）的内容"]
pub const XTP_TE_RESUME_TYPE_XTP_TERT_QUICK: XTP_TE_RESUME_TYPE = 2;
#[doc = ""]
#[doc = "@brief XTP_TE_RESUME_TYPE是公有流（订单响应、成交回报）重传方式"]
#[doc = ""]
pub type XTP_TE_RESUME_TYPE = u32;
#[doc = "<禁止现金替代"]
pub const ETF_REPLACE_TYPE_ERT_CASH_FORBIDDEN: ETF_REPLACE_TYPE = 0;
#[doc = "<可以现金替代"]
pub const ETF_REPLACE_TYPE_ERT_CASH_OPTIONAL: ETF_REPLACE_TYPE = 1;
#[doc = "<必须现金替代"]
pub const ETF_REPLACE_TYPE_ERT_CASH_MUST: ETF_REPLACE_TYPE = 2;
#[doc = "<深市退补现金替代"]
pub const ETF_REPLACE_TYPE_ERT_CASH_RECOMPUTE_INTER_SZ: ETF_REPLACE_TYPE = 3;
#[doc = "<深市必须现金替代"]
pub const ETF_REPLACE_TYPE_ERT_CASH_MUST_INTER_SZ: ETF_REPLACE_TYPE = 4;
#[doc = "<非沪深市场成分证券退补现金替代"]
pub const ETF_REPLACE_TYPE_ERT_CASH_RECOMPUTE_INTER_OTHER: ETF_REPLACE_TYPE = 5;
#[doc = "<表示非沪深市场成份证券必须现金替代"]
pub const ETF_REPLACE_TYPE_ERT_CASH_MUST_INTER_OTHER: ETF_REPLACE_TYPE = 6;
#[doc = "<无效值"]
pub const ETF_REPLACE_TYPE_EPT_INVALID: ETF_REPLACE_TYPE = 7;
#[doc = ""]
#[doc = "@brief ETF_REPLACE_TYPE现金替代标识定义"]
#[doc = ""]
pub type ETF_REPLACE_TYPE = u32;
#[doc = "<普通股票"]
pub const XTP_TICKER_TYPE_XTP_TICKER_TYPE_STOCK: XTP_TICKER_TYPE = 0;
#[doc = "<指数"]
pub const XTP_TICKER_TYPE_XTP_TICKER_TYPE_INDEX: XTP_TICKER_TYPE = 1;
#[doc = "<基金"]
pub const XTP_TICKER_TYPE_XTP_TICKER_TYPE_FUND: XTP_TICKER_TYPE = 2;
#[doc = "<债券"]
pub const XTP_TICKER_TYPE_XTP_TICKER_TYPE_BOND: XTP_TICKER_TYPE = 3;
#[doc = "<期权"]
pub const XTP_TICKER_TYPE_XTP_TICKER_TYPE_OPTION: XTP_TICKER_TYPE = 4;
#[doc = "<科创板股票（上海）"]
pub const XTP_TICKER_TYPE_XTP_TICKER_TYPE_TECH_STOCK: XTP_TICKER_TYPE = 5;
#[doc = "<未知类型"]
pub const XTP_TICKER_TYPE_XTP_TICKER_TYPE_UNKNOWN: XTP_TICKER_TYPE = 6;
#[doc = ""]
#[doc = "@brief XTP_TICKER_TYPE证券类型"]
#[doc = ""]
pub type XTP_TICKER_TYPE = u32;
#[doc = "<普通股票业务（股票买卖，ETF买卖等）"]
pub const XTP_BUSINESS_TYPE_XTP_BUSINESS_TYPE_CASH: XTP_BUSINESS_TYPE = 0;
#[doc = "<新股申购业务（对应的price type需选择限价类型）"]
pub const XTP_BUSINESS_TYPE_XTP_BUSINESS_TYPE_IPOS: XTP_BUSINESS_TYPE = 1;
#[doc = "<回购业务 ( 对应的price type填为限价，side填为卖 )"]
pub const XTP_BUSINESS_TYPE_XTP_BUSINESS_TYPE_REPO: XTP_BUSINESS_TYPE = 2;
#[doc = "<ETF申赎业务"]
pub const XTP_BUSINESS_TYPE_XTP_BUSINESS_TYPE_ETF: XTP_BUSINESS_TYPE = 3;
#[doc = "<融资融券业务（暂未支持）"]
pub const XTP_BUSINESS_TYPE_XTP_BUSINESS_TYPE_MARGIN: XTP_BUSINESS_TYPE = 4;
#[doc = "<转托管（未支持）"]
pub const XTP_BUSINESS_TYPE_XTP_BUSINESS_TYPE_DESIGNATION: XTP_BUSINESS_TYPE = 5;
#[doc = "<配股业务（对应的price type需选择限价类型,side填为买）"]
pub const XTP_BUSINESS_TYPE_XTP_BUSINESS_TYPE_ALLOTMENT: XTP_BUSINESS_TYPE = 6;
#[doc = "<分级基金申赎业务"]
pub const XTP_BUSINESS_TYPE_XTP_BUSINESS_TYPE_STRUCTURED_FUND_PURCHASE_REDEMPTION:
    XTP_BUSINESS_TYPE = 7;
#[doc = "<分级基金拆分合并业务"]
pub const XTP_BUSINESS_TYPE_XTP_BUSINESS_TYPE_STRUCTURED_FUND_SPLIT_MERGE: XTP_BUSINESS_TYPE = 8;
#[doc = "<货币基金业务（暂未支持）"]
pub const XTP_BUSINESS_TYPE_XTP_BUSINESS_TYPE_MONEY_FUND: XTP_BUSINESS_TYPE = 9;
#[doc = "<期权业务"]
pub const XTP_BUSINESS_TYPE_XTP_BUSINESS_TYPE_OPTION: XTP_BUSINESS_TYPE = 10;
#[doc = "<行权"]
pub const XTP_BUSINESS_TYPE_XTP_BUSINESS_TYPE_EXECUTE: XTP_BUSINESS_TYPE = 11;
#[doc = "<锁定解锁，暂不支持"]
pub const XTP_BUSINESS_TYPE_XTP_BUSINESS_TYPE_FREEZE: XTP_BUSINESS_TYPE = 12;
#[doc = "<未知类型"]
pub const XTP_BUSINESS_TYPE_XTP_BUSINESS_TYPE_UNKNOWN: XTP_BUSINESS_TYPE = 13;
#[doc = ""]
#[doc = "@brief XTP_BUSINESS_TYPE证券业务类型"]
#[doc = ""]
pub type XTP_BUSINESS_TYPE = u32;
#[doc = "<普通账户"]
pub const XTP_ACCOUNT_TYPE_XTP_ACCOUNT_NORMAL: XTP_ACCOUNT_TYPE = 0;
#[doc = "<信用账户"]
pub const XTP_ACCOUNT_TYPE_XTP_ACCOUNT_CREDIT: XTP_ACCOUNT_TYPE = 1;
#[doc = "<衍生品账户"]
pub const XTP_ACCOUNT_TYPE_XTP_ACCOUNT_DERIVE: XTP_ACCOUNT_TYPE = 2;
#[doc = "<未知账户类型"]
pub const XTP_ACCOUNT_TYPE_XTP_ACCOUNT_UNKNOWN: XTP_ACCOUNT_TYPE = 3;
#[doc = ""]
#[doc = "@brief XTP_ACCOUNT_TYPE账户类型"]
#[doc = ""]
pub type XTP_ACCOUNT_TYPE = u32;
#[doc = "<转出 从XTP转出到柜台"]
pub const XTP_FUND_TRANSFER_TYPE_XTP_FUND_TRANSFER_OUT: XTP_FUND_TRANSFER_TYPE = 0;
#[doc = "<转入 从柜台转入XTP"]
pub const XTP_FUND_TRANSFER_TYPE_XTP_FUND_TRANSFER_IN: XTP_FUND_TRANSFER_TYPE = 1;
#[doc = "<跨节点转出 从本XTP节点1，转出到对端XTP节点2，XTP服务器之间划拨，只能跨账户用户使用"]
pub const XTP_FUND_TRANSFER_TYPE_XTP_FUND_INTER_TRANSFER_OUT: XTP_FUND_TRANSFER_TYPE = 2;
#[doc = "<跨节点转入 从对端XTP节点2，转入到本XTP节点1，XTP服务器之间划拨，只能跨账户用户使用"]
pub const XTP_FUND_TRANSFER_TYPE_XTP_FUND_INTER_TRANSFER_IN: XTP_FUND_TRANSFER_TYPE = 3;
#[doc = "<未知类型"]
pub const XTP_FUND_TRANSFER_TYPE_XTP_FUND_TRANSFER_UNKNOWN: XTP_FUND_TRANSFER_TYPE = 4;
#[doc = ""]
#[doc = "@brief XTP_FUND_TRANSFER_TYPE是资金流转方向类型"]
#[doc = ""]
pub type XTP_FUND_TRANSFER_TYPE = u32;
#[doc = "<XTP已收到，正在处理中"]
pub const XTP_FUND_OPER_STATUS_XTP_FUND_OPER_PROCESSING: XTP_FUND_OPER_STATUS = 0;
#[doc = "<成功"]
pub const XTP_FUND_OPER_STATUS_XTP_FUND_OPER_SUCCESS: XTP_FUND_OPER_STATUS = 1;
#[doc = "<失败"]
pub const XTP_FUND_OPER_STATUS_XTP_FUND_OPER_FAILED: XTP_FUND_OPER_STATUS = 2;
#[doc = "<已提交到集中柜台处理"]
pub const XTP_FUND_OPER_STATUS_XTP_FUND_OPER_SUBMITTED: XTP_FUND_OPER_STATUS = 3;
#[doc = "<未知"]
pub const XTP_FUND_OPER_STATUS_XTP_FUND_OPER_UNKNOWN: XTP_FUND_OPER_STATUS = 4;
#[doc = ""]
#[doc = "@brief XTP_FUND_OPER_STATUS柜台资金操作结果"]
#[doc = ""]
pub type XTP_FUND_OPER_STATUS = u32;
#[doc = "<允许拆分和合并"]
pub const XTP_SPLIT_MERGE_STATUS_XTP_SPLIT_MERGE_STATUS_ALLOW: XTP_SPLIT_MERGE_STATUS = 0;
#[doc = "<只允许拆分，不允许合并"]
pub const XTP_SPLIT_MERGE_STATUS_XTP_SPLIT_MERGE_STATUS_ONLY_SPLIT: XTP_SPLIT_MERGE_STATUS = 1;
#[doc = "<只允许合并，不允许拆分"]
pub const XTP_SPLIT_MERGE_STATUS_XTP_SPLIT_MERGE_STATUS_ONLY_MERGE: XTP_SPLIT_MERGE_STATUS = 2;
#[doc = "<不允许拆分合并"]
pub const XTP_SPLIT_MERGE_STATUS_XTP_SPLIT_MERGE_STATUS_FORBIDDEN: XTP_SPLIT_MERGE_STATUS = 3;
#[doc = ""]
#[doc = "@brief XTP_SPLIT_MERGE_STATUS是一个基金当天拆分合并状态类型"]
#[doc = ""]
pub type XTP_SPLIT_MERGE_STATUS = u32;
#[doc = "<逐笔委托"]
pub const XTP_TBT_TYPE_XTP_TBT_ENTRUST: XTP_TBT_TYPE = 1;
#[doc = "<逐笔成交"]
pub const XTP_TBT_TYPE_XTP_TBT_TRADE: XTP_TBT_TYPE = 2;
#[doc = ""]
#[doc = "@brief XTP_TBT_TYPE是一个逐笔回报类型"]
#[doc = ""]
pub type XTP_TBT_TYPE = u32;
#[doc = "<认购"]
pub const XTP_OPT_CALL_OR_PUT_TYPE_XTP_OPT_CALL: XTP_OPT_CALL_OR_PUT_TYPE = 1;
#[doc = "<认沽"]
pub const XTP_OPT_CALL_OR_PUT_TYPE_XTP_OPT_PUT: XTP_OPT_CALL_OR_PUT_TYPE = 2;
#[doc = ""]
#[doc = "@brief XTP_OPT_CALL_OR_PUT_TYPE是一个认沽或认购类型"]
#[doc = ""]
pub type XTP_OPT_CALL_OR_PUT_TYPE = u32;
#[doc = "<欧式"]
pub const XTP_OPT_EXERCISE_TYPE_TYPE_XTP_OPT_EXERCISE_TYPE_EUR: XTP_OPT_EXERCISE_TYPE_TYPE = 1;
#[doc = "<美式"]
pub const XTP_OPT_EXERCISE_TYPE_TYPE_XTP_OPT_EXERCISE_TYPE_AME: XTP_OPT_EXERCISE_TYPE_TYPE = 2;
#[doc = ""]
#[doc = "@brief XTP_OPT_EXERCISE_TYPE_TYPE是一个行权方式类型"]
#[doc = ""]
pub type XTP_OPT_EXERCISE_TYPE_TYPE = u32;
#[doc = "<净"]
pub const XTP_POSITION_DIRECTION_TYPE_XTP_POSITION_DIRECTION_NET: XTP_POSITION_DIRECTION_TYPE = 0;
#[doc = "<多（期权则为权利方）"]
pub const XTP_POSITION_DIRECTION_TYPE_XTP_POSITION_DIRECTION_LONG: XTP_POSITION_DIRECTION_TYPE = 1;
#[doc = "<空（期权则为义务方）"]
pub const XTP_POSITION_DIRECTION_TYPE_XTP_POSITION_DIRECTION_SHORT: XTP_POSITION_DIRECTION_TYPE = 2;
#[doc = "<备兑（期权则为备兑义务方）"]
pub const XTP_POSITION_DIRECTION_TYPE_XTP_POSITION_DIRECTION_COVERED: XTP_POSITION_DIRECTION_TYPE =
    3;
#[doc = ""]
#[doc = "@brief XTP_POSITION_DIRECTION_TYPE是一个持仓方向类型"]
#[doc = ""]
pub type XTP_POSITION_DIRECTION_TYPE = u32;
#[doc = "< 初始、未处理状态"]
pub const XTP_CRD_CR_STATUS_XTP_CRD_CR_INIT: XTP_CRD_CR_STATUS = 0;
#[doc = "< 已成功处理状态"]
pub const XTP_CRD_CR_STATUS_XTP_CRD_CR_SUCCESS: XTP_CRD_CR_STATUS = 1;
#[doc = "< 处理失败状态"]
pub const XTP_CRD_CR_STATUS_XTP_CRD_CR_FAILED: XTP_CRD_CR_STATUS = 2;
#[doc = ""]
#[doc = "@brief XTP_CRD_CASH_REPAY_STATUS是一个融资融券直接还款状态类型"]
#[doc = ""]
pub type XTP_CRD_CR_STATUS = u32;
#[doc = ""]
#[doc = "TXTPTradeTypeType是成交类型类型"]
#[doc = ""]
pub type TXTPTradeTypeType = ::std::os::raw::c_char;
#[doc = ""]
#[doc = "TXTPOrderTypeType是报单类型类型"]
#[doc = ""]
pub type TXTPOrderTypeType = ::std::os::raw::c_char;
#[doc = "响应信息"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XTPRspInfoStruct {
    #[doc = "错误代码"]
    pub error_id: i32,
    #[doc = "错误信息"]
    pub error_msg: [::std::os::raw::c_char; 124usize],
}
#[test]
fn bindgen_test_layout_XTPRspInfoStruct() {
    assert_eq!(
        ::std::mem::size_of::<XTPRspInfoStruct>(),
        128usize,
        concat!("Size of: ", stringify!(XTPRspInfoStruct))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPRspInfoStruct>(),
        4usize,
        concat!("Alignment of ", stringify!(XTPRspInfoStruct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPRspInfoStruct>())).error_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPRspInfoStruct),
            "::",
            stringify!(error_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPRspInfoStruct>())).error_msg as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPRspInfoStruct),
            "::",
            stringify!(error_msg)
        )
    );
}
pub type XTPRI = XTPRspInfoStruct;
#[doc = "指定的合约"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPSpecificTickerStruct {
    #[doc = "交易所代码"]
    pub exchange_id: XTP_EXCHANGE_TYPE,
    #[doc = "合约代码（不包含交易所信息）例如"600000"，不带空格，以'\0'结尾"]
    pub ticker: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_XTPSpecificTickerStruct() {
    assert_eq!(
        ::std::mem::size_of::<XTPSpecificTickerStruct>(),
        20usize,
        concat!("Size of: ", stringify!(XTPSpecificTickerStruct))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPSpecificTickerStruct>(),
        4usize,
        concat!("Alignment of ", stringify!(XTPSpecificTickerStruct))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPSpecificTickerStruct>())).exchange_id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPSpecificTickerStruct),
            "::",
            stringify!(exchange_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPSpecificTickerStruct>())).ticker as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPSpecificTickerStruct),
            "::",
            stringify!(ticker)
        )
    );
}
pub type XTPST = XTPSpecificTickerStruct;
#[doc = "股票、基金、债券等额外数据"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPMarketDataStockExData {
    #[doc = "委托买入总量(SH,SZ)"]
    pub total_bid_qty: i64,
    #[doc = "委托卖出总量(SH,SZ)"]
    pub total_ask_qty: i64,
    #[doc = "加权平均委买价格(SH,SZ)"]
    pub ma_bid_price: f64,
    #[doc = "加权平均委卖价格(SH,SZ)"]
    pub ma_ask_price: f64,
    #[doc = "债券加权平均委买价格(SH)"]
    pub ma_bond_bid_price: f64,
    #[doc = "债券加权平均委卖价格(SH)"]
    pub ma_bond_ask_price: f64,
    #[doc = "债券到期收益率(SH)"]
    pub yield_to_maturity: f64,
    #[doc = "基金实时参考净值(SH,SZ)"]
    pub iopv: f64,
    #[doc = "ETF申购笔数(SH)"]
    pub etf_buy_count: i32,
    #[doc = "ETF赎回笔数(SH)"]
    pub etf_sell_count: i32,
    #[doc = "ETF申购数量(SH)"]
    pub etf_buy_qty: f64,
    #[doc = "ETF申购金额(SH)"]
    pub etf_buy_money: f64,
    #[doc = "ETF赎回数量(SH)"]
    pub etf_sell_qty: f64,
    #[doc = "ETF赎回金额(SH)"]
    pub etf_sell_money: f64,
    #[doc = "权证执行的总数量(SH)"]
    pub total_warrant_exec_qty: f64,
    #[doc = "权证跌停价格（元）(SH)"]
    pub warrant_lower_price: f64,
    #[doc = "权证涨停价格（元）(SH)"]
    pub warrant_upper_price: f64,
    #[doc = "买入撤单笔数(SH)"]
    pub cancel_buy_count: i32,
    #[doc = "卖出撤单笔数(SH)"]
    pub cancel_sell_count: i32,
    #[doc = "买入撤单数量(SH)"]
    pub cancel_buy_qty: f64,
    #[doc = "卖出撤单数量(SH)"]
    pub cancel_sell_qty: f64,
    #[doc = "买入撤单金额(SH)"]
    pub cancel_buy_money: f64,
    #[doc = "卖出撤单金额(SH)"]
    pub cancel_sell_money: f64,
    #[doc = "买入总笔数(SH)"]
    pub total_buy_count: i64,
    #[doc = "卖出总笔数(SH)"]
    pub total_sell_count: i64,
    #[doc = "买入委托成交最大等待时间(SH)"]
    pub duration_after_buy: i32,
    #[doc = "卖出委托成交最大等待时间(SH)"]
    pub duration_after_sell: i32,
    #[doc = "买方委托价位数(SH)"]
    pub num_bid_orders: i32,
    #[doc = "卖方委托价位数(SH)"]
    pub num_ask_orders: i32,
    #[doc = "基金T-1日净值(SZ)"]
    pub pre_iopv: f64,
    #[doc = "预留"]
    pub r1: i64,
    #[doc = "预留"]
    pub r2: i64,
}
#[test]
fn bindgen_test_layout_XTPMarketDataStockExData() {
    assert_eq!(
        ::std::mem::size_of::<XTPMarketDataStockExData>(),
        224usize,
        concat!("Size of: ", stringify!(XTPMarketDataStockExData))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPMarketDataStockExData>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPMarketDataStockExData))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).total_bid_qty as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(total_bid_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).total_ask_qty as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(total_ask_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).ma_bid_price as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(ma_bid_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).ma_ask_price as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(ma_ask_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).ma_bond_bid_price as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(ma_bond_bid_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).ma_bond_ask_price as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(ma_bond_ask_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).yield_to_maturity as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(yield_to_maturity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStockExData>())).iopv as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(iopv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).etf_buy_count as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(etf_buy_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).etf_sell_count as *const _ as usize
        },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(etf_sell_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).etf_buy_qty as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(etf_buy_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).etf_buy_money as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(etf_buy_money)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).etf_sell_qty as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(etf_sell_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).etf_sell_money as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(etf_sell_money)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).total_warrant_exec_qty as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(total_warrant_exec_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).warrant_lower_price as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(warrant_lower_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).warrant_upper_price as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(warrant_upper_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).cancel_buy_count as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(cancel_buy_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).cancel_sell_count as *const _
                as usize
        },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(cancel_sell_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).cancel_buy_qty as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(cancel_buy_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).cancel_sell_qty as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(cancel_sell_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).cancel_buy_money as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(cancel_buy_money)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).cancel_sell_money as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(cancel_sell_money)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).total_buy_count as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(total_buy_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).total_sell_count as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(total_sell_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).duration_after_buy as *const _
                as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(duration_after_buy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).duration_after_sell as *const _
                as usize
        },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(duration_after_sell)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).num_bid_orders as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(num_bid_orders)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).num_ask_orders as *const _ as usize
        },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(num_ask_orders)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStockExData>())).pre_iopv as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(pre_iopv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStockExData>())).r1 as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(r1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStockExData>())).r2 as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStockExData),
            "::",
            stringify!(r2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPMarketDataOptionExData {
    #[doc = "波段性中断参考价(SH)"]
    pub auction_price: f64,
    #[doc = "波段性中断集合竞价虚拟匹配量(SH)"]
    pub auction_qty: i64,
    #[doc = "最近询价时间(SH)"]
    pub last_enquiry_time: i64,
}
#[test]
fn bindgen_test_layout_XTPMarketDataOptionExData() {
    assert_eq!(
        ::std::mem::size_of::<XTPMarketDataOptionExData>(),
        24usize,
        concat!("Size of: ", stringify!(XTPMarketDataOptionExData))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPMarketDataOptionExData>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPMarketDataOptionExData))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataOptionExData>())).auction_price as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataOptionExData),
            "::",
            stringify!(auction_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataOptionExData>())).auction_qty as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataOptionExData),
            "::",
            stringify!(auction_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataOptionExData>())).last_enquiry_time as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataOptionExData),
            "::",
            stringify!(last_enquiry_time)
        )
    );
}
pub const XTP_MARKETDATA_TYPE_XTP_MARKETDATA_ACTUAL: XTP_MARKETDATA_TYPE = 0;
pub const XTP_MARKETDATA_TYPE_XTP_MARKETDATA_OPTION: XTP_MARKETDATA_TYPE = 1;
pub type XTP_MARKETDATA_TYPE = u32;
#[doc = "行情"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XTPMarketDataStruct {
    #[doc = "交易所代码"]
    pub exchange_id: XTP_EXCHANGE_TYPE,
    #[doc = "合约代码（不包含交易所信息），不带空格，以'\0'结尾"]
    pub ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "最新价"]
    pub last_price: f64,
    #[doc = "昨收盘"]
    pub pre_close_price: f64,
    #[doc = "今开盘"]
    pub open_price: f64,
    #[doc = "最高价"]
    pub high_price: f64,
    #[doc = "最低价"]
    pub low_price: f64,
    #[doc = "今收盘"]
    pub close_price: f64,
    #[doc = "昨日持仓量(张)(目前未填写)"]
    pub pre_total_long_positon: i64,
    #[doc = "持仓量(张)"]
    pub total_long_positon: i64,
    #[doc = "昨日结算价"]
    pub pre_settl_price: f64,
    #[doc = "今日结算价"]
    pub settl_price: f64,
    #[doc = "涨停价"]
    pub upper_limit_price: f64,
    #[doc = "跌停价"]
    pub lower_limit_price: f64,
    #[doc = "预留"]
    pub pre_delta: f64,
    #[doc = "预留"]
    pub curr_delta: f64,
    #[doc = " 时间类，格式为YYYYMMDDHHMMSSsss"]
    pub data_time: i64,
    #[doc = "数量，为总成交量（单位股，与交易所一致）"]
    pub qty: i64,
    #[doc = "成交金额，为总成交金额（单位元，与交易所一致）"]
    pub turnover: f64,
    #[doc = "当日均价=(turnover/qty)"]
    pub avg_price: f64,
    #[doc = "十档申买价"]
    pub bid: [f64; 10usize],
    #[doc = "十档申卖价"]
    pub ask: [f64; 10usize],
    #[doc = "十档申买量"]
    pub bid_qty: [i64; 10usize],
    #[doc = "十档申卖量"]
    pub ask_qty: [i64; 10usize],
    #[doc = "成交笔数"]
    pub trades_count: i64,
    #[doc = "当前交易状态说明"]
    pub ticker_status: [::std::os::raw::c_char; 8usize],
    pub __bindgen_anon_1: XTPMarketDataStruct__bindgen_ty_1,
    #[doc = "决定了union是哪种数据类型"]
    pub data_type: XTP_MARKETDATA_TYPE,
    #[doc = "预留"]
    pub r4: i32,
}
#[doc = "数据"]
#[repr(C)]
#[derive(Copy, Clone)]
pub union XTPMarketDataStruct__bindgen_ty_1 {
    pub stk: XTPMarketDataStockExData,
    pub opt: XTPMarketDataOptionExData,
    _bindgen_union_align: [u64; 28usize],
}
#[test]
fn bindgen_test_layout_XTPMarketDataStruct__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<XTPMarketDataStruct__bindgen_ty_1>(),
        224usize,
        concat!("Size of: ", stringify!(XTPMarketDataStruct__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPMarketDataStruct__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XTPMarketDataStruct__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStruct__bindgen_ty_1>())).stk as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct__bindgen_ty_1),
            "::",
            stringify!(stk)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStruct__bindgen_ty_1>())).opt as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct__bindgen_ty_1),
            "::",
            stringify!(opt)
        )
    );
}
#[test]
fn bindgen_test_layout_XTPMarketDataStruct() {
    assert_eq!(
        ::std::mem::size_of::<XTPMarketDataStruct>(),
        736usize,
        concat!("Size of: ", stringify!(XTPMarketDataStruct))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPMarketDataStruct>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPMarketDataStruct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStruct>())).exchange_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(exchange_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStruct>())).ticker as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(ticker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStruct>())).last_price as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(last_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStruct>())).pre_close_price as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(pre_close_price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStruct>())).open_price as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(open_price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStruct>())).high_price as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(high_price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStruct>())).low_price as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(low_price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStruct>())).close_price as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(close_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStruct>())).pre_total_long_positon as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(pre_total_long_positon)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStruct>())).total_long_positon as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(total_long_positon)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStruct>())).pre_settl_price as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(pre_settl_price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStruct>())).settl_price as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(settl_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStruct>())).upper_limit_price as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(upper_limit_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStruct>())).lower_limit_price as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(lower_limit_price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStruct>())).pre_delta as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(pre_delta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStruct>())).curr_delta as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(curr_delta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStruct>())).data_time as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(data_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStruct>())).qty as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(qty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStruct>())).turnover as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(turnover)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStruct>())).avg_price as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(avg_price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStruct>())).bid as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(bid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStruct>())).ask as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(ask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStruct>())).bid_qty as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(bid_qty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStruct>())).ask_qty as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(ask_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStruct>())).trades_count as *const _ as usize
        },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(trades_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPMarketDataStruct>())).ticker_status as *const _ as usize
        },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(ticker_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStruct>())).data_type as *const _ as usize },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(data_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPMarketDataStruct>())).r4 as *const _ as usize },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPMarketDataStruct),
            "::",
            stringify!(r4)
        )
    );
}
pub type XTPMD = XTPMarketDataStruct;
#[doc = "股票行情静态信息"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XTPQuoteStaticInfo {
    #[doc = "交易所代码"]
    pub exchange_id: XTP_EXCHANGE_TYPE,
    #[doc = "合约代码（不包含交易所信息），不带空格，以'\0'结尾"]
    pub ticker: [::std::os::raw::c_char; 16usize],
    #[doc = " 合约名称"]
    pub ticker_name: [::std::os::raw::c_char; 64usize],
    #[doc = " 合约类型"]
    pub ticker_type: XTP_TICKER_TYPE,
    #[doc = "昨收盘"]
    pub pre_close_price: f64,
    #[doc = "涨停板价"]
    pub upper_limit_price: f64,
    #[doc = "跌停板价"]
    pub lower_limit_price: f64,
    #[doc = "最小变动价位"]
    pub price_tick: f64,
    #[doc = " 合约最小交易量(买)"]
    pub buy_qty_unit: i32,
    #[doc = " 合约最小交易量(卖)"]
    pub sell_qty_unit: i32,
}
#[test]
fn bindgen_test_layout_XTPQuoteStaticInfo() {
    assert_eq!(
        ::std::mem::size_of::<XTPQuoteStaticInfo>(),
        128usize,
        concat!("Size of: ", stringify!(XTPQuoteStaticInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQuoteStaticInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPQuoteStaticInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQuoteStaticInfo>())).exchange_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteStaticInfo),
            "::",
            stringify!(exchange_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQuoteStaticInfo>())).ticker as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteStaticInfo),
            "::",
            stringify!(ticker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQuoteStaticInfo>())).ticker_name as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteStaticInfo),
            "::",
            stringify!(ticker_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQuoteStaticInfo>())).ticker_type as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteStaticInfo),
            "::",
            stringify!(ticker_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQuoteStaticInfo>())).pre_close_price as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteStaticInfo),
            "::",
            stringify!(pre_close_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQuoteStaticInfo>())).upper_limit_price as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteStaticInfo),
            "::",
            stringify!(upper_limit_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQuoteStaticInfo>())).lower_limit_price as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteStaticInfo),
            "::",
            stringify!(lower_limit_price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQuoteStaticInfo>())).price_tick as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteStaticInfo),
            "::",
            stringify!(price_tick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQuoteStaticInfo>())).buy_qty_unit as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteStaticInfo),
            "::",
            stringify!(buy_qty_unit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQuoteStaticInfo>())).sell_qty_unit as *const _ as usize
        },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQuoteStaticInfo),
            "::",
            stringify!(sell_qty_unit)
        )
    );
}
pub type XTPQSI = XTPQuoteStaticInfo;
#[doc = "定单薄"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OrderBookStruct {
    #[doc = "交易所代码"]
    pub exchange_id: XTP_EXCHANGE_TYPE,
    #[doc = "合约代码（不包含交易所信息），不带空格，以'\0'结尾"]
    pub ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "最新价"]
    pub last_price: f64,
    #[doc = "数量，为总成交量"]
    pub qty: i64,
    #[doc = "成交金额，为总成交金额"]
    pub turnover: f64,
    #[doc = "成交笔数"]
    pub trades_count: i64,
    #[doc = "十档申买价"]
    pub bid: [f64; 10usize],
    #[doc = "十档申卖价"]
    pub ask: [f64; 10usize],
    #[doc = "十档申买量"]
    pub bid_qty: [i64; 10usize],
    #[doc = "十档申卖量"]
    pub ask_qty: [i64; 10usize],
    #[doc = " 时间类"]
    pub data_time: i64,
}
#[test]
fn bindgen_test_layout_OrderBookStruct() {
    assert_eq!(
        ::std::mem::size_of::<OrderBookStruct>(),
        384usize,
        concat!("Size of: ", stringify!(OrderBookStruct))
    );
    assert_eq!(
        ::std::mem::align_of::<OrderBookStruct>(),
        8usize,
        concat!("Alignment of ", stringify!(OrderBookStruct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrderBookStruct>())).exchange_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OrderBookStruct),
            "::",
            stringify!(exchange_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrderBookStruct>())).ticker as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(OrderBookStruct),
            "::",
            stringify!(ticker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrderBookStruct>())).last_price as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(OrderBookStruct),
            "::",
            stringify!(last_price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrderBookStruct>())).qty as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(OrderBookStruct),
            "::",
            stringify!(qty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrderBookStruct>())).turnover as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(OrderBookStruct),
            "::",
            stringify!(turnover)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrderBookStruct>())).trades_count as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(OrderBookStruct),
            "::",
            stringify!(trades_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrderBookStruct>())).bid as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(OrderBookStruct),
            "::",
            stringify!(bid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrderBookStruct>())).ask as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(OrderBookStruct),
            "::",
            stringify!(ask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrderBookStruct>())).bid_qty as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(OrderBookStruct),
            "::",
            stringify!(bid_qty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrderBookStruct>())).ask_qty as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(OrderBookStruct),
            "::",
            stringify!(ask_qty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OrderBookStruct>())).data_time as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(OrderBookStruct),
            "::",
            stringify!(data_time)
        )
    );
}
pub type XTPOB = OrderBookStruct;
#[doc = "逐笔委托(仅适用深交所)"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPTickByTickEntrust {
    #[doc = "频道代码"]
    pub channel_no: i32,
    #[doc = "委托序号(在同一个channel_no内唯一，从1开始连续)"]
    pub seq: i64,
    #[doc = "委托价格"]
    pub price: f64,
    #[doc = "委托数量"]
    pub qty: i64,
    #[doc = "'1':买; '2':卖; 'G':借入; 'F':出借"]
    pub side: ::std::os::raw::c_char,
    #[doc = "订单类别: '1': 市价; '2': 限价; 'U': 本方最优"]
    pub ord_type: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_XTPTickByTickEntrust() {
    assert_eq!(
        ::std::mem::size_of::<XTPTickByTickEntrust>(),
        40usize,
        concat!("Size of: ", stringify!(XTPTickByTickEntrust))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPTickByTickEntrust>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPTickByTickEntrust))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickByTickEntrust>())).channel_no as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickEntrust),
            "::",
            stringify!(channel_no)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickByTickEntrust>())).seq as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickEntrust),
            "::",
            stringify!(seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickByTickEntrust>())).price as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickEntrust),
            "::",
            stringify!(price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickByTickEntrust>())).qty as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickEntrust),
            "::",
            stringify!(qty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickByTickEntrust>())).side as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickEntrust),
            "::",
            stringify!(side)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickByTickEntrust>())).ord_type as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickEntrust),
            "::",
            stringify!(ord_type)
        )
    );
}
#[doc = "逐笔成交"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPTickByTickTrade {
    #[doc = "频道代码"]
    pub channel_no: i32,
    #[doc = "委托序号(在同一个channel_no内唯一，从1开始连续)"]
    pub seq: i64,
    #[doc = "成交价格"]
    pub price: f64,
    #[doc = "成交量"]
    pub qty: i64,
    #[doc = "成交金额(仅适用上交所)"]
    pub money: f64,
    #[doc = "买方订单号"]
    pub bid_no: i64,
    #[doc = "卖方订单号"]
    pub ask_no: i64,
    #[doc = " SH: 内外盘标识('B':主动买; 'S':主动卖; 'N':未知)"]
    #[doc = " SZ: 成交标识('4':撤; 'F':成交)"]
    pub trade_flag: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_XTPTickByTickTrade() {
    assert_eq!(
        ::std::mem::size_of::<XTPTickByTickTrade>(),
        64usize,
        concat!("Size of: ", stringify!(XTPTickByTickTrade))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPTickByTickTrade>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPTickByTickTrade))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickByTickTrade>())).channel_no as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickTrade),
            "::",
            stringify!(channel_no)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickByTickTrade>())).seq as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickTrade),
            "::",
            stringify!(seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickByTickTrade>())).price as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickTrade),
            "::",
            stringify!(price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickByTickTrade>())).qty as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickTrade),
            "::",
            stringify!(qty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickByTickTrade>())).money as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickTrade),
            "::",
            stringify!(money)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickByTickTrade>())).bid_no as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickTrade),
            "::",
            stringify!(bid_no)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickByTickTrade>())).ask_no as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickTrade),
            "::",
            stringify!(ask_no)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickByTickTrade>())).trade_flag as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickTrade),
            "::",
            stringify!(trade_flag)
        )
    );
}
#[doc = "逐笔数据信息"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XTPTickByTickStruct {
    #[doc = "交易所代码"]
    pub exchange_id: XTP_EXCHANGE_TYPE,
    #[doc = "合约代码（不包含交易所信息），不带空格，以'\0'结尾"]
    pub ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "预留"]
    pub seq: i64,
    #[doc = "委托时间 or 成交时间"]
    pub data_time: i64,
    #[doc = "委托 or 成交"]
    pub type_: XTP_TBT_TYPE,
    pub __bindgen_anon_1: XTPTickByTickStruct__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union XTPTickByTickStruct__bindgen_ty_1 {
    pub entrust: XTPTickByTickEntrust,
    pub trade: XTPTickByTickTrade,
    _bindgen_union_align: [u64; 8usize],
}
#[test]
fn bindgen_test_layout_XTPTickByTickStruct__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<XTPTickByTickStruct__bindgen_ty_1>(),
        64usize,
        concat!("Size of: ", stringify!(XTPTickByTickStruct__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPTickByTickStruct__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XTPTickByTickStruct__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPTickByTickStruct__bindgen_ty_1>())).entrust as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickStruct__bindgen_ty_1),
            "::",
            stringify!(entrust)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPTickByTickStruct__bindgen_ty_1>())).trade as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickStruct__bindgen_ty_1),
            "::",
            stringify!(trade)
        )
    );
}
#[test]
fn bindgen_test_layout_XTPTickByTickStruct() {
    assert_eq!(
        ::std::mem::size_of::<XTPTickByTickStruct>(),
        112usize,
        concat!("Size of: ", stringify!(XTPTickByTickStruct))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPTickByTickStruct>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPTickByTickStruct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickByTickStruct>())).exchange_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickStruct),
            "::",
            stringify!(exchange_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickByTickStruct>())).ticker as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickStruct),
            "::",
            stringify!(ticker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickByTickStruct>())).seq as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickStruct),
            "::",
            stringify!(seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickByTickStruct>())).data_time as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickStruct),
            "::",
            stringify!(data_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickByTickStruct>())).type_ as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickByTickStruct),
            "::",
            stringify!(type_)
        )
    );
}
pub type XTPTBT = XTPTickByTickStruct;
#[doc = "供查询的最新信息"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPTickerPriceInfo {
    #[doc = "交易所代码"]
    pub exchange_id: XTP_EXCHANGE_TYPE,
    #[doc = "合约代码（不包含交易所信息），不带空格，以'\0'结尾"]
    pub ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "最新价"]
    pub last_price: f64,
}
#[test]
fn bindgen_test_layout_XTPTickerPriceInfo() {
    assert_eq!(
        ::std::mem::size_of::<XTPTickerPriceInfo>(),
        32usize,
        concat!("Size of: ", stringify!(XTPTickerPriceInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPTickerPriceInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPTickerPriceInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickerPriceInfo>())).exchange_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickerPriceInfo),
            "::",
            stringify!(exchange_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickerPriceInfo>())).ticker as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickerPriceInfo),
            "::",
            stringify!(ticker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTickerPriceInfo>())).last_price as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTickerPriceInfo),
            "::",
            stringify!(last_price)
        )
    );
}
pub type XTPTPI = XTPTickerPriceInfo;
#[doc = "新订单请求"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XTPOrderInsertInfo {
    #[doc = "XTP系统订单ID，无需用户填写，在XTP系统中唯一"]
    pub order_xtp_id: u64,
    #[doc = "报单引用，由客户自定义"]
    pub order_client_id: u32,
    #[doc = "合约代码 客户端请求不带空格，以'\0'结尾"]
    pub ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "交易市场"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "价格"]
    pub price: f64,
    #[doc = "止损价（保留字段）"]
    pub stop_price: f64,
    #[doc = "数量(股票单位为股，逆回购单位为张)"]
    pub quantity: i64,
    #[doc = "报单价格"]
    pub price_type: XTP_PRICE_TYPE,
    pub __bindgen_anon_1: XTPOrderInsertInfo__bindgen_ty_1,
    #[doc = "业务类型"]
    pub business_type: XTP_BUSINESS_TYPE,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union XTPOrderInsertInfo__bindgen_ty_1 {
    pub u32: u32,
    pub __bindgen_anon_1: XTPOrderInsertInfo__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPOrderInsertInfo__bindgen_ty_1__bindgen_ty_1 {
    #[doc = "买卖方向"]
    pub side: XTP_SIDE_TYPE,
    #[doc = "开平标志"]
    pub position_effect: XTP_POSITION_EFFECT_TYPE,
    #[doc = "预留字段1"]
    pub reserved1: u8,
    #[doc = "预留字段2"]
    pub reserved2: u8,
}
#[test]
fn bindgen_test_layout_XTPOrderInsertInfo__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<XTPOrderInsertInfo__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(XTPOrderInsertInfo__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XTPOrderInsertInfo__bindgen_ty_1__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(XTPOrderInsertInfo__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOrderInsertInfo__bindgen_ty_1__bindgen_ty_1>())).side
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInsertInfo__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(side)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOrderInsertInfo__bindgen_ty_1__bindgen_ty_1>()))
                .position_effect as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInsertInfo__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(position_effect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOrderInsertInfo__bindgen_ty_1__bindgen_ty_1>())).reserved1
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInsertInfo__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOrderInsertInfo__bindgen_ty_1__bindgen_ty_1>())).reserved2
                as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInsertInfo__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(reserved2)
        )
    );
}
#[test]
fn bindgen_test_layout_XTPOrderInsertInfo__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<XTPOrderInsertInfo__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(XTPOrderInsertInfo__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPOrderInsertInfo__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(XTPOrderInsertInfo__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOrderInsertInfo__bindgen_ty_1>())).u32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInsertInfo__bindgen_ty_1),
            "::",
            stringify!(u32)
        )
    );
}
#[test]
fn bindgen_test_layout_XTPOrderInsertInfo() {
    assert_eq!(
        ::std::mem::size_of::<XTPOrderInsertInfo>(),
        72usize,
        concat!("Size of: ", stringify!(XTPOrderInsertInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPOrderInsertInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPOrderInsertInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInsertInfo>())).order_xtp_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInsertInfo),
            "::",
            stringify!(order_xtp_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOrderInsertInfo>())).order_client_id as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInsertInfo),
            "::",
            stringify!(order_client_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInsertInfo>())).ticker as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInsertInfo),
            "::",
            stringify!(ticker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInsertInfo>())).market as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInsertInfo),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInsertInfo>())).price as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInsertInfo),
            "::",
            stringify!(price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInsertInfo>())).stop_price as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInsertInfo),
            "::",
            stringify!(stop_price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInsertInfo>())).quantity as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInsertInfo),
            "::",
            stringify!(quantity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInsertInfo>())).price_type as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInsertInfo),
            "::",
            stringify!(price_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOrderInsertInfo>())).business_type as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInsertInfo),
            "::",
            stringify!(business_type)
        )
    );
}
#[doc = "撤单失败响应消息"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPOrderCancelInfo {
    #[doc = "撤单XTPID"]
    pub order_cancel_xtp_id: u64,
    #[doc = "原始订单XTPID"]
    pub order_xtp_id: u64,
}
#[test]
fn bindgen_test_layout_XTPOrderCancelInfo() {
    assert_eq!(
        ::std::mem::size_of::<XTPOrderCancelInfo>(),
        16usize,
        concat!("Size of: ", stringify!(XTPOrderCancelInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPOrderCancelInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPOrderCancelInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOrderCancelInfo>())).order_cancel_xtp_id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderCancelInfo),
            "::",
            stringify!(order_cancel_xtp_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderCancelInfo>())).order_xtp_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderCancelInfo),
            "::",
            stringify!(order_xtp_id)
        )
    );
}
#[doc = "报单响应结构体"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XTPOrderInfo {
    #[doc = "XTP系统订单ID，在XTP系统中唯一"]
    pub order_xtp_id: u64,
    #[doc = "报单引用，用户自定义"]
    pub order_client_id: u32,
    #[doc = "报单操作引用，用户自定义（暂未使用）"]
    pub order_cancel_client_id: u32,
    #[doc = "撤单在XTP系统中的id，在XTP系统中唯一"]
    pub order_cancel_xtp_id: u64,
    #[doc = "合约代码"]
    pub ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "交易市场"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "价格"]
    pub price: f64,
    #[doc = "数量，此订单的报单数量"]
    pub quantity: i64,
    #[doc = "报单价格条件"]
    pub price_type: XTP_PRICE_TYPE,
    pub __bindgen_anon_1: XTPOrderInfo__bindgen_ty_1,
    #[doc = "业务类型"]
    pub business_type: XTP_BUSINESS_TYPE,
    #[doc = "今成交数量，为此订单累计成交数量"]
    pub qty_traded: i64,
    #[doc = "剩余数量，当撤单成功时，表示撤单数量"]
    pub qty_left: i64,
    #[doc = "委托时间，格式为YYYYMMDDHHMMSSsss"]
    pub insert_time: i64,
    #[doc = "最后修改时间，格式为YYYYMMDDHHMMSSsss"]
    pub update_time: i64,
    #[doc = "撤销时间，格式为YYYYMMDDHHMMSSsss"]
    pub cancel_time: i64,
    #[doc = "成交金额，为此订单的成交总金额"]
    pub trade_amount: f64,
    #[doc = "本地报单编号 OMS生成的单号，不等同于order_xtp_id，为服务器传到报盘的单号"]
    pub order_local_id: [::std::os::raw::c_char; 11usize],
    #[doc = "报单状态，订单响应中没有部分成交状态的推送，在查询订单结果中，会有部分成交状态"]
    pub order_status: XTP_ORDER_STATUS_TYPE,
    #[doc = "报单提交状态，OMS内部使用，用户无需关心"]
    pub order_submit_status: XTP_ORDER_SUBMIT_STATUS_TYPE,
    #[doc = "报单类型"]
    pub order_type: TXTPOrderTypeType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union XTPOrderInfo__bindgen_ty_1 {
    pub u32: u32,
    pub __bindgen_anon_1: XTPOrderInfo__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPOrderInfo__bindgen_ty_1__bindgen_ty_1 {
    #[doc = "买卖方向"]
    pub side: XTP_SIDE_TYPE,
    #[doc = "开平标志"]
    pub position_effect: XTP_POSITION_EFFECT_TYPE,
    #[doc = "预留字段1"]
    pub reserved1: u8,
    #[doc = "预留字段2"]
    pub reserved2: u8,
}
#[test]
fn bindgen_test_layout_XTPOrderInfo__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<XTPOrderInfo__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(XTPOrderInfo__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XTPOrderInfo__bindgen_ty_1__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(XTPOrderInfo__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOrderInfo__bindgen_ty_1__bindgen_ty_1>())).side as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(side)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOrderInfo__bindgen_ty_1__bindgen_ty_1>())).position_effect
                as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(position_effect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOrderInfo__bindgen_ty_1__bindgen_ty_1>())).reserved1
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOrderInfo__bindgen_ty_1__bindgen_ty_1>())).reserved2
                as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(reserved2)
        )
    );
}
#[test]
fn bindgen_test_layout_XTPOrderInfo__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<XTPOrderInfo__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(XTPOrderInfo__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPOrderInfo__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(XTPOrderInfo__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfo__bindgen_ty_1>())).u32 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo__bindgen_ty_1),
            "::",
            stringify!(u32)
        )
    );
}
#[test]
fn bindgen_test_layout_XTPOrderInfo() {
    assert_eq!(
        ::std::mem::size_of::<XTPOrderInfo>(),
        152usize,
        concat!("Size of: ", stringify!(XTPOrderInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPOrderInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPOrderInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfo>())).order_xtp_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo),
            "::",
            stringify!(order_xtp_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfo>())).order_client_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo),
            "::",
            stringify!(order_client_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOrderInfo>())).order_cancel_client_id as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo),
            "::",
            stringify!(order_cancel_client_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOrderInfo>())).order_cancel_xtp_id as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo),
            "::",
            stringify!(order_cancel_xtp_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfo>())).ticker as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo),
            "::",
            stringify!(ticker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfo>())).market as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfo>())).price as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo),
            "::",
            stringify!(price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfo>())).quantity as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo),
            "::",
            stringify!(quantity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfo>())).price_type as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo),
            "::",
            stringify!(price_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfo>())).business_type as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo),
            "::",
            stringify!(business_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfo>())).qty_traded as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo),
            "::",
            stringify!(qty_traded)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfo>())).qty_left as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo),
            "::",
            stringify!(qty_left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfo>())).insert_time as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo),
            "::",
            stringify!(insert_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfo>())).update_time as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo),
            "::",
            stringify!(update_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfo>())).cancel_time as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo),
            "::",
            stringify!(cancel_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfo>())).trade_amount as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo),
            "::",
            stringify!(trade_amount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfo>())).order_local_id as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo),
            "::",
            stringify!(order_local_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfo>())).order_status as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo),
            "::",
            stringify!(order_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPOrderInfo>())).order_submit_status as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo),
            "::",
            stringify!(order_submit_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPOrderInfo>())).order_type as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPOrderInfo),
            "::",
            stringify!(order_type)
        )
    );
}
#[doc = "报单成交结构体"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XTPTradeReport {
    #[doc = "XTP系统订单ID，此成交回报相关的订单ID，在XTP系统中唯一"]
    pub order_xtp_id: u64,
    #[doc = "报单引用"]
    pub order_client_id: u32,
    #[doc = "合约代码"]
    pub ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "交易市场"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "订单号，引入XTPID后，该字段实际和order_xtp_id重复。接口中暂时保留。"]
    pub local_order_id: u64,
    #[doc = "成交编号，深交所唯一，上交所每笔交易唯一，当发现2笔成交回报拥有相同的exec_id，则可以认为此笔交易自成交"]
    pub exec_id: [::std::os::raw::c_char; 18usize],
    #[doc = "价格，此次成交的价格"]
    pub price: f64,
    #[doc = "数量，此次成交的数量，不是累计数量"]
    pub quantity: i64,
    #[doc = "成交时间，格式为YYYYMMDDHHMMSSsss"]
    pub trade_time: i64,
    #[doc = "成交金额，此次成交的总金额 = price*quantity"]
    pub trade_amount: f64,
    #[doc = "成交序号 --回报记录号，每个交易所唯一,report_index+market字段可以组成唯一标识表示成交回报"]
    pub report_index: u64,
    #[doc = "报单编号 --交易所单号，上交所为空，深交所有此字段"]
    pub order_exch_id: [::std::os::raw::c_char; 17usize],
    #[doc = "成交类型  --成交回报中的执行类型"]
    pub trade_type: TXTPTradeTypeType,
    pub __bindgen_anon_1: XTPTradeReport__bindgen_ty_1,
    #[doc = "业务类型"]
    pub business_type: XTP_BUSINESS_TYPE,
    #[doc = "交易所交易员代码"]
    pub branch_pbu: [::std::os::raw::c_char; 7usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union XTPTradeReport__bindgen_ty_1 {
    pub u32: u32,
    pub __bindgen_anon_1: XTPTradeReport__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPTradeReport__bindgen_ty_1__bindgen_ty_1 {
    #[doc = "买卖方向"]
    pub side: XTP_SIDE_TYPE,
    #[doc = "开平标志"]
    pub position_effect: XTP_POSITION_EFFECT_TYPE,
    #[doc = "预留字段1"]
    pub reserved1: u8,
    #[doc = "预留字段2"]
    pub reserved2: u8,
}
#[test]
fn bindgen_test_layout_XTPTradeReport__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<XTPTradeReport__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(XTPTradeReport__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<XTPTradeReport__bindgen_ty_1__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(XTPTradeReport__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPTradeReport__bindgen_ty_1__bindgen_ty_1>())).side as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTradeReport__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(side)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPTradeReport__bindgen_ty_1__bindgen_ty_1>())).position_effect
                as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTradeReport__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(position_effect)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPTradeReport__bindgen_ty_1__bindgen_ty_1>())).reserved1
                as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTradeReport__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPTradeReport__bindgen_ty_1__bindgen_ty_1>())).reserved2
                as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTradeReport__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(reserved2)
        )
    );
}
#[test]
fn bindgen_test_layout_XTPTradeReport__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<XTPTradeReport__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(XTPTradeReport__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPTradeReport__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(XTPTradeReport__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPTradeReport__bindgen_ty_1>())).u32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTradeReport__bindgen_ty_1),
            "::",
            stringify!(u32)
        )
    );
}
#[test]
fn bindgen_test_layout_XTPTradeReport() {
    assert_eq!(
        ::std::mem::size_of::<XTPTradeReport>(),
        144usize,
        concat!("Size of: ", stringify!(XTPTradeReport))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPTradeReport>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPTradeReport))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTradeReport>())).order_xtp_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTradeReport),
            "::",
            stringify!(order_xtp_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTradeReport>())).order_client_id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTradeReport),
            "::",
            stringify!(order_client_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTradeReport>())).ticker as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTradeReport),
            "::",
            stringify!(ticker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTradeReport>())).market as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTradeReport),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTradeReport>())).local_order_id as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTradeReport),
            "::",
            stringify!(local_order_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTradeReport>())).exec_id as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTradeReport),
            "::",
            stringify!(exec_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTradeReport>())).price as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTradeReport),
            "::",
            stringify!(price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTradeReport>())).quantity as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTradeReport),
            "::",
            stringify!(quantity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTradeReport>())).trade_time as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTradeReport),
            "::",
            stringify!(trade_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTradeReport>())).trade_amount as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTradeReport),
            "::",
            stringify!(trade_amount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTradeReport>())).report_index as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTradeReport),
            "::",
            stringify!(report_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTradeReport>())).order_exch_id as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTradeReport),
            "::",
            stringify!(order_exch_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTradeReport>())).trade_type as *const _ as usize },
        121usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTradeReport),
            "::",
            stringify!(trade_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTradeReport>())).business_type as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTradeReport),
            "::",
            stringify!(business_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPTradeReport>())).branch_pbu as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPTradeReport),
            "::",
            stringify!(branch_pbu)
        )
    );
}
#[doc = ""]
#[doc = "报单查询"]
#[doc = ""]
#[doc = "报单查询请求-条件查询"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryOrderReq {
    #[doc = "证券代码，可以为空，如果为空，则默认查询时间段内的所有成交回报"]
    pub ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "格式为YYYYMMDDHHMMSSsss，为0则默认当前交易日0点"]
    pub begin_time: i64,
    #[doc = "格式为YYYYMMDDHHMMSSsss，为0则默认当前时间"]
    pub end_time: i64,
}
#[test]
fn bindgen_test_layout_XTPQueryOrderReq() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryOrderReq>(),
        32usize,
        concat!("Size of: ", stringify!(XTPQueryOrderReq))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryOrderReq>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPQueryOrderReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryOrderReq>())).ticker as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOrderReq),
            "::",
            stringify!(ticker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryOrderReq>())).begin_time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOrderReq),
            "::",
            stringify!(begin_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryOrderReq>())).end_time as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOrderReq),
            "::",
            stringify!(end_time)
        )
    );
}
#[doc = "报单查询响应结构体"]
pub type XTPQueryOrderRsp = XTPOrderInfo;
#[doc = "查询订单请求-分页查询"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryOrderByPageReq {
    #[doc = "需要查询的订单条数"]
    pub req_count: i64,
    #[doc = "上一次收到的查询订单结果中带回来的索引，如果是从头查询，请置0"]
    pub reference: i64,
    #[doc = "保留字段"]
    pub reserved: i64,
}
#[test]
fn bindgen_test_layout_XTPQueryOrderByPageReq() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryOrderByPageReq>(),
        24usize,
        concat!("Size of: ", stringify!(XTPQueryOrderByPageReq))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryOrderByPageReq>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPQueryOrderByPageReq))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOrderByPageReq>())).req_count as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOrderByPageReq),
            "::",
            stringify!(req_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOrderByPageReq>())).reference as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOrderByPageReq),
            "::",
            stringify!(reference)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryOrderByPageReq>())).reserved as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOrderByPageReq),
            "::",
            stringify!(reserved)
        )
    );
}
#[doc = ""]
#[doc = "成交回报查询"]
#[doc = ""]
#[doc = "查询成交报告请求-根据执行编号查询（保留字段）"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryReportByExecIdReq {
    #[doc = "XTP订单系统ID"]
    pub order_xtp_id: u64,
    #[doc = "成交执行编号"]
    pub exec_id: [::std::os::raw::c_char; 18usize],
}
#[test]
fn bindgen_test_layout_XTPQueryReportByExecIdReq() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryReportByExecIdReq>(),
        32usize,
        concat!("Size of: ", stringify!(XTPQueryReportByExecIdReq))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryReportByExecIdReq>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPQueryReportByExecIdReq))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryReportByExecIdReq>())).order_xtp_id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryReportByExecIdReq),
            "::",
            stringify!(order_xtp_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryReportByExecIdReq>())).exec_id as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryReportByExecIdReq),
            "::",
            stringify!(exec_id)
        )
    );
}
#[doc = "查询成交回报请求-查询条件"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryTraderReq {
    #[doc = "证券代码，可以为空，如果为空，则默认查询时间段内的所有成交回报"]
    pub ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "开始时间，格式为YYYYMMDDHHMMSSsss，为0则默认当前交易日0点"]
    pub begin_time: i64,
    #[doc = "结束时间，格式为YYYYMMDDHHMMSSsss，为0则默认当前时间"]
    pub end_time: i64,
}
#[test]
fn bindgen_test_layout_XTPQueryTraderReq() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryTraderReq>(),
        32usize,
        concat!("Size of: ", stringify!(XTPQueryTraderReq))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryTraderReq>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPQueryTraderReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryTraderReq>())).ticker as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryTraderReq),
            "::",
            stringify!(ticker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryTraderReq>())).begin_time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryTraderReq),
            "::",
            stringify!(begin_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryTraderReq>())).end_time as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryTraderReq),
            "::",
            stringify!(end_time)
        )
    );
}
#[doc = "成交回报查询响应结构体"]
pub type XTPQueryTradeRsp = XTPTradeReport;
#[doc = "查询成交回报请求-分页查询"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryTraderByPageReq {
    #[doc = "需要查询的成交回报条数"]
    pub req_count: i64,
    #[doc = "上一次收到的查询成交回报结果中带回来的索引，如果是从头查询，请置0"]
    pub reference: i64,
    #[doc = "保留字段"]
    pub reserved: i64,
}
#[test]
fn bindgen_test_layout_XTPQueryTraderByPageReq() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryTraderByPageReq>(),
        24usize,
        concat!("Size of: ", stringify!(XTPQueryTraderByPageReq))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryTraderByPageReq>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPQueryTraderByPageReq))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryTraderByPageReq>())).req_count as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryTraderByPageReq),
            "::",
            stringify!(req_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryTraderByPageReq>())).reference as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryTraderByPageReq),
            "::",
            stringify!(reference)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryTraderByPageReq>())).reserved as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryTraderByPageReq),
            "::",
            stringify!(reserved)
        )
    );
}
#[doc = ""]
#[doc = "账户资金查询响应结构体"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryAssetRsp {
    #[doc = "总资产(=可用资金 + 证券资产（目前为0）+ 预扣的资金)"]
    pub total_asset: f64,
    #[doc = "可用资金"]
    pub buying_power: f64,
    #[doc = "证券资产（保留字段，目前为0）"]
    pub security_asset: f64,
    #[doc = "累计买入成交证券占用资金"]
    pub fund_buy_amount: f64,
    #[doc = "累计买入成交交易费用"]
    pub fund_buy_fee: f64,
    #[doc = "累计卖出成交证券所得资金"]
    pub fund_sell_amount: f64,
    #[doc = "累计卖出成交交易费用"]
    pub fund_sell_fee: f64,
    #[doc = "XTP系统预扣的资金（包括购买卖股票时预扣的交易资金+预扣手续费）"]
    pub withholding_amount: f64,
    #[doc = "账户类型"]
    pub account_type: XTP_ACCOUNT_TYPE,
    #[doc = "冻结的保证金"]
    pub frozen_margin: f64,
    #[doc = "行权冻结资金"]
    pub frozen_exec_cash: f64,
    #[doc = "行权费用"]
    pub frozen_exec_fee: f64,
    #[doc = "垫付资金"]
    pub pay_later: f64,
    #[doc = "预垫付资金"]
    pub preadva_pay: f64,
    #[doc = "昨日余额"]
    pub orig_banlance: f64,
    #[doc = "当前余额"]
    pub banlance: f64,
    #[doc = "当天出入金"]
    pub deposit_withdraw: f64,
    #[doc = "当日交易资金轧差"]
    pub trade_netting: f64,
    #[doc = "资金资产"]
    pub captial_asset: f64,
    #[doc = "强锁资金"]
    pub force_freeze_amount: f64,
    #[doc = "可取资金"]
    pub preferred_amount: f64,
    pub repay_stock_aval_banlance: f64,
    #[doc = "(保留字段)"]
    pub unknown: [u64; 30usize],
}
#[test]
fn bindgen_test_layout_XTPQueryAssetRsp() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryAssetRsp>(),
        416usize,
        concat!("Size of: ", stringify!(XTPQueryAssetRsp))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryAssetRsp>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPQueryAssetRsp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryAssetRsp>())).total_asset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(total_asset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryAssetRsp>())).buying_power as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(buying_power)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryAssetRsp>())).security_asset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(security_asset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryAssetRsp>())).fund_buy_amount as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(fund_buy_amount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryAssetRsp>())).fund_buy_fee as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(fund_buy_fee)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryAssetRsp>())).fund_sell_amount as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(fund_sell_amount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryAssetRsp>())).fund_sell_fee as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(fund_sell_fee)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryAssetRsp>())).withholding_amount as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(withholding_amount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryAssetRsp>())).account_type as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(account_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryAssetRsp>())).frozen_margin as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(frozen_margin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryAssetRsp>())).frozen_exec_cash as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(frozen_exec_cash)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryAssetRsp>())).frozen_exec_fee as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(frozen_exec_fee)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryAssetRsp>())).pay_later as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(pay_later)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryAssetRsp>())).preadva_pay as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(preadva_pay)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryAssetRsp>())).orig_banlance as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(orig_banlance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryAssetRsp>())).banlance as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(banlance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryAssetRsp>())).deposit_withdraw as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(deposit_withdraw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryAssetRsp>())).trade_netting as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(trade_netting)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryAssetRsp>())).captial_asset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(captial_asset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryAssetRsp>())).force_freeze_amount as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(force_freeze_amount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryAssetRsp>())).preferred_amount as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(preferred_amount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryAssetRsp>())).repay_stock_aval_banlance as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(repay_stock_aval_banlance)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryAssetRsp>())).unknown as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryAssetRsp),
            "::",
            stringify!(unknown)
        )
    );
}
#[doc = ""]
#[doc = "查询股票持仓情况"]
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XTPQueryStkPositionRsp {
    #[doc = "证券代码"]
    pub ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "证券名称"]
    pub ticker_name: [::std::os::raw::c_char; 64usize],
    #[doc = "交易市场"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "总持仓"]
    pub total_qty: i64,
    #[doc = "可卖持仓"]
    pub sellable_qty: i64,
    #[doc = "持仓成本"]
    pub avg_price: f64,
    #[doc = "浮动盈亏（保留字段）"]
    pub unrealized_pnl: f64,
    #[doc = "昨日持仓"]
    pub yesterday_position: i64,
    #[doc = "今日申购赎回数量（申购和赎回数量不可能同时存在，因此可以共用一个字段）"]
    pub purchase_redeemable_qty: i64,
    #[doc = " 持仓方向"]
    pub position_direction: XTP_POSITION_DIRECTION_TYPE,
    #[doc = "保留字段1"]
    pub reserved1: u32,
    #[doc = " 可行权合约"]
    pub executable_option: i64,
    #[doc = " 可锁定标的"]
    pub lockable_position: i64,
    #[doc = " 可行权标的"]
    pub executable_underlying: i64,
    #[doc = " 已锁定标的"]
    pub locked_position: i64,
    #[doc = " 可用已锁定标的"]
    pub usable_locked_position: i64,
    #[doc = "(保留字段)"]
    pub unknown: [u64; 44usize],
}
#[test]
fn bindgen_test_layout_XTPQueryStkPositionRsp() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryStkPositionRsp>(),
        536usize,
        concat!("Size of: ", stringify!(XTPQueryStkPositionRsp))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryStkPositionRsp>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPQueryStkPositionRsp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryStkPositionRsp>())).ticker as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryStkPositionRsp),
            "::",
            stringify!(ticker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryStkPositionRsp>())).ticker_name as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryStkPositionRsp),
            "::",
            stringify!(ticker_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryStkPositionRsp>())).market as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryStkPositionRsp),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryStkPositionRsp>())).total_qty as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryStkPositionRsp),
            "::",
            stringify!(total_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryStkPositionRsp>())).sellable_qty as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryStkPositionRsp),
            "::",
            stringify!(sellable_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryStkPositionRsp>())).avg_price as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryStkPositionRsp),
            "::",
            stringify!(avg_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryStkPositionRsp>())).unrealized_pnl as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryStkPositionRsp),
            "::",
            stringify!(unrealized_pnl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryStkPositionRsp>())).yesterday_position as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryStkPositionRsp),
            "::",
            stringify!(yesterday_position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryStkPositionRsp>())).purchase_redeemable_qty as *const _
                as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryStkPositionRsp),
            "::",
            stringify!(purchase_redeemable_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryStkPositionRsp>())).position_direction as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryStkPositionRsp),
            "::",
            stringify!(position_direction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryStkPositionRsp>())).reserved1 as *const _ as usize
        },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryStkPositionRsp),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryStkPositionRsp>())).executable_option as *const _
                as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryStkPositionRsp),
            "::",
            stringify!(executable_option)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryStkPositionRsp>())).lockable_position as *const _
                as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryStkPositionRsp),
            "::",
            stringify!(lockable_position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryStkPositionRsp>())).executable_underlying as *const _
                as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryStkPositionRsp),
            "::",
            stringify!(executable_underlying)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryStkPositionRsp>())).locked_position as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryStkPositionRsp),
            "::",
            stringify!(locked_position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryStkPositionRsp>())).usable_locked_position as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryStkPositionRsp),
            "::",
            stringify!(usable_locked_position)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryStkPositionRsp>())).unknown as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryStkPositionRsp),
            "::",
            stringify!(unknown)
        )
    );
}
#[doc = ""]
#[doc = "资金内转流水通知"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPFundTransferNotice {
    #[doc = "资金内转编号"]
    pub serial_id: u64,
    #[doc = "内转类型"]
    pub transfer_type: XTP_FUND_TRANSFER_TYPE,
    #[doc = "金额"]
    pub amount: f64,
    #[doc = "操作结果"]
    pub oper_status: XTP_FUND_OPER_STATUS,
    #[doc = "操作时间"]
    pub transfer_time: u64,
}
#[test]
fn bindgen_test_layout_XTPFundTransferNotice() {
    assert_eq!(
        ::std::mem::size_of::<XTPFundTransferNotice>(),
        40usize,
        concat!("Size of: ", stringify!(XTPFundTransferNotice))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPFundTransferNotice>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPFundTransferNotice))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPFundTransferNotice>())).serial_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPFundTransferNotice),
            "::",
            stringify!(serial_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPFundTransferNotice>())).transfer_type as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPFundTransferNotice),
            "::",
            stringify!(transfer_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPFundTransferNotice>())).amount as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPFundTransferNotice),
            "::",
            stringify!(amount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPFundTransferNotice>())).oper_status as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPFundTransferNotice),
            "::",
            stringify!(oper_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPFundTransferNotice>())).transfer_time as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPFundTransferNotice),
            "::",
            stringify!(transfer_time)
        )
    );
}
#[doc = ""]
#[doc = "资金内转流水查询请求与响应"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryFundTransferLogReq {
    #[doc = "资金内转编号"]
    pub serial_id: u64,
}
#[test]
fn bindgen_test_layout_XTPQueryFundTransferLogReq() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryFundTransferLogReq>(),
        8usize,
        concat!("Size of: ", stringify!(XTPQueryFundTransferLogReq))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryFundTransferLogReq>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPQueryFundTransferLogReq))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryFundTransferLogReq>())).serial_id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryFundTransferLogReq),
            "::",
            stringify!(serial_id)
        )
    );
}
#[doc = ""]
#[doc = "资金内转流水记录结构体"]
#[doc = ""]
pub type XTPFundTransferLog = XTPFundTransferNotice;
#[doc = ""]
#[doc = "查询分级基金信息结构体"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryStructuredFundInfoReq {
    #[doc = "<交易所代码，不可为空"]
    pub exchange_id: XTP_EXCHANGE_TYPE,
    #[doc = "<分级基金母基金代码，可以为空，如果为空，则默认查询所有的分级基金"]
    pub sf_ticker: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_XTPQueryStructuredFundInfoReq() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryStructuredFundInfoReq>(),
        20usize,
        concat!("Size of: ", stringify!(XTPQueryStructuredFundInfoReq))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryStructuredFundInfoReq>(),
        4usize,
        concat!("Alignment of ", stringify!(XTPQueryStructuredFundInfoReq))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryStructuredFundInfoReq>())).exchange_id as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryStructuredFundInfoReq),
            "::",
            stringify!(exchange_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryStructuredFundInfoReq>())).sf_ticker as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryStructuredFundInfoReq),
            "::",
            stringify!(sf_ticker)
        )
    );
}
#[doc = ""]
#[doc = "查询分级基金信息响应结构体"]
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XTPStructuredFundInfo {
    #[doc = "<交易所代码"]
    pub exchange_id: XTP_EXCHANGE_TYPE,
    #[doc = "<分级基金母基金代码"]
    pub sf_ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "<分级基金母基金名称"]
    pub sf_ticker_name: [::std::os::raw::c_char; 64usize],
    #[doc = "<分级基金子基金代码"]
    pub ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "<分级基金子基金名称"]
    pub ticker_name: [::std::os::raw::c_char; 64usize],
    #[doc = "<基金允许拆分合并状态"]
    pub split_merge_status: XTP_SPLIT_MERGE_STATUS,
    #[doc = "<拆分合并比例"]
    pub ratio: u32,
    #[doc = "<最小拆分数量"]
    pub min_split_qty: u32,
    #[doc = "<最小合并数量"]
    pub min_merge_qty: u32,
    #[doc = "<基金净值"]
    pub net_price: f64,
}
#[test]
fn bindgen_test_layout_XTPStructuredFundInfo() {
    assert_eq!(
        ::std::mem::size_of::<XTPStructuredFundInfo>(),
        192usize,
        concat!("Size of: ", stringify!(XTPStructuredFundInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPStructuredFundInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPStructuredFundInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStructuredFundInfo>())).exchange_id as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStructuredFundInfo),
            "::",
            stringify!(exchange_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPStructuredFundInfo>())).sf_ticker as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStructuredFundInfo),
            "::",
            stringify!(sf_ticker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStructuredFundInfo>())).sf_ticker_name as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStructuredFundInfo),
            "::",
            stringify!(sf_ticker_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPStructuredFundInfo>())).ticker as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStructuredFundInfo),
            "::",
            stringify!(ticker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStructuredFundInfo>())).ticker_name as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStructuredFundInfo),
            "::",
            stringify!(ticker_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStructuredFundInfo>())).split_merge_status as *const _
                as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStructuredFundInfo),
            "::",
            stringify!(split_merge_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPStructuredFundInfo>())).ratio as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStructuredFundInfo),
            "::",
            stringify!(ratio)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStructuredFundInfo>())).min_split_qty as *const _ as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStructuredFundInfo),
            "::",
            stringify!(min_split_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPStructuredFundInfo>())).min_merge_qty as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStructuredFundInfo),
            "::",
            stringify!(min_merge_qty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPStructuredFundInfo>())).net_price as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPStructuredFundInfo),
            "::",
            stringify!(net_price)
        )
    );
}
#[doc = ""]
#[doc = "查询股票ETF合约基本情况--请求结构体,"]
#[doc = "请求参数为多条件参数:1,不填则返回所有市场的ETF合约信息。"]
#[doc = "                  2,只填写market,返回该交易市场下结果"]
#[doc = "                   3,填写market及ticker参数,只返回该etf信息。"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryETFBaseReq {
    #[doc = "交易市场"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "ETF买卖代码"]
    pub ticker: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_XTPQueryETFBaseReq() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryETFBaseReq>(),
        20usize,
        concat!("Size of: ", stringify!(XTPQueryETFBaseReq))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryETFBaseReq>(),
        4usize,
        concat!("Alignment of ", stringify!(XTPQueryETFBaseReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryETFBaseReq>())).market as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFBaseReq),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryETFBaseReq>())).ticker as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFBaseReq),
            "::",
            stringify!(ticker)
        )
    );
}
#[doc = ""]
#[doc = "查询股票ETF合约基本情况--响应结构体"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryETFBaseRsp {
    #[doc = "<交易市场"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "<etf代码,买卖,申赎统一使用该代码"]
    pub etf: [::std::os::raw::c_char; 16usize],
    #[doc = "<etf申购赎回代码"]
    pub subscribe_redemption_ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "<最小申购赎回单位对应的ETF份数,例如上证"50ETF"就是900000"]
    pub unit: i32,
    #[doc = "<是否允许申购,1-允许,0-禁止"]
    pub subscribe_status: i32,
    #[doc = "<是否允许赎回,1-允许,0-禁止"]
    pub redemption_status: i32,
    #[doc = "<最大现金替代比例,小于1的数值   TODO 是否采用double"]
    pub max_cash_ratio: f64,
    #[doc = "<T日预估金额"]
    pub estimate_amount: f64,
    #[doc = "<T-X日现金差额"]
    pub cash_component: f64,
    #[doc = "<基金单位净值"]
    pub net_value: f64,
    #[doc = "<最小申赎单位净值总金额=net_value*unit"]
    pub total_amount: f64,
}
#[test]
fn bindgen_test_layout_XTPQueryETFBaseRsp() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryETFBaseRsp>(),
        88usize,
        concat!("Size of: ", stringify!(XTPQueryETFBaseRsp))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryETFBaseRsp>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPQueryETFBaseRsp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryETFBaseRsp>())).market as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFBaseRsp),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryETFBaseRsp>())).etf as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFBaseRsp),
            "::",
            stringify!(etf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryETFBaseRsp>())).subscribe_redemption_ticker as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFBaseRsp),
            "::",
            stringify!(subscribe_redemption_ticker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryETFBaseRsp>())).unit as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFBaseRsp),
            "::",
            stringify!(unit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryETFBaseRsp>())).subscribe_status as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFBaseRsp),
            "::",
            stringify!(subscribe_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryETFBaseRsp>())).redemption_status as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFBaseRsp),
            "::",
            stringify!(redemption_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryETFBaseRsp>())).max_cash_ratio as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFBaseRsp),
            "::",
            stringify!(max_cash_ratio)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryETFBaseRsp>())).estimate_amount as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFBaseRsp),
            "::",
            stringify!(estimate_amount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryETFBaseRsp>())).cash_component as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFBaseRsp),
            "::",
            stringify!(cash_component)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryETFBaseRsp>())).net_value as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFBaseRsp),
            "::",
            stringify!(net_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryETFBaseRsp>())).total_amount as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFBaseRsp),
            "::",
            stringify!(total_amount)
        )
    );
}
#[doc = ""]
#[doc = "查询股票ETF合约成分股信息--请求结构体,请求参数为:交易市场+ETF买卖代码"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryETFComponentReq {
    #[doc = "交易市场"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "ETF买卖代码"]
    pub ticker: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_XTPQueryETFComponentReq() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryETFComponentReq>(),
        20usize,
        concat!("Size of: ", stringify!(XTPQueryETFComponentReq))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryETFComponentReq>(),
        4usize,
        concat!("Alignment of ", stringify!(XTPQueryETFComponentReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryETFComponentReq>())).market as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFComponentReq),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryETFComponentReq>())).ticker as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFComponentReq),
            "::",
            stringify!(ticker)
        )
    );
}
#[doc = ""]
#[doc = "查询股票ETF合约成分股信息--响应结构体"]
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XTPQueryETFComponentRsp {
    #[doc = "交易市场"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "ETF代码"]
    pub ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "成份股代码"]
    pub component_ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "成份股名称"]
    pub component_name: [::std::os::raw::c_char; 64usize],
    #[doc = "成份股数量"]
    pub quantity: i64,
    #[doc = "成份股交易市场"]
    pub component_market: XTP_MARKET_TYPE,
    #[doc = "成份股替代标识"]
    pub replace_type: ETF_REPLACE_TYPE,
    #[doc = "溢价比例"]
    pub premium_ratio: f64,
    #[doc = "成分股替代标识为必须现金替代时候的总金额"]
    pub amount: f64,
}
#[test]
fn bindgen_test_layout_XTPQueryETFComponentRsp() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryETFComponentRsp>(),
        136usize,
        concat!("Size of: ", stringify!(XTPQueryETFComponentRsp))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryETFComponentRsp>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPQueryETFComponentRsp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryETFComponentRsp>())).market as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFComponentRsp),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryETFComponentRsp>())).ticker as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFComponentRsp),
            "::",
            stringify!(ticker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryETFComponentRsp>())).component_ticker as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFComponentRsp),
            "::",
            stringify!(component_ticker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryETFComponentRsp>())).component_name as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFComponentRsp),
            "::",
            stringify!(component_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryETFComponentRsp>())).quantity as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFComponentRsp),
            "::",
            stringify!(quantity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryETFComponentRsp>())).component_market as *const _
                as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFComponentRsp),
            "::",
            stringify!(component_market)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryETFComponentRsp>())).replace_type as *const _ as usize
        },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFComponentRsp),
            "::",
            stringify!(replace_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryETFComponentRsp>())).premium_ratio as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFComponentRsp),
            "::",
            stringify!(premium_ratio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryETFComponentRsp>())).amount as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryETFComponentRsp),
            "::",
            stringify!(amount)
        )
    );
}
#[doc = ""]
#[doc = "查询当日可申购新股信息"]
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XTPQueryIPOTickerRsp {
    #[doc = "交易市场"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "申购代码"]
    pub ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "申购股票名称"]
    pub ticker_name: [::std::os::raw::c_char; 64usize],
    pub ticker_type: XTP_TICKER_TYPE,
    #[doc = "申购价格"]
    pub price: f64,
    #[doc = "申购单元"]
    pub unit: i32,
    #[doc = "最大允许申购数量"]
    pub qty_upper_limit: i32,
}
#[test]
fn bindgen_test_layout_XTPQueryIPOTickerRsp() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryIPOTickerRsp>(),
        104usize,
        concat!("Size of: ", stringify!(XTPQueryIPOTickerRsp))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryIPOTickerRsp>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPQueryIPOTickerRsp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryIPOTickerRsp>())).market as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryIPOTickerRsp),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryIPOTickerRsp>())).ticker as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryIPOTickerRsp),
            "::",
            stringify!(ticker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryIPOTickerRsp>())).ticker_name as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryIPOTickerRsp),
            "::",
            stringify!(ticker_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryIPOTickerRsp>())).ticker_type as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryIPOTickerRsp),
            "::",
            stringify!(ticker_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryIPOTickerRsp>())).price as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryIPOTickerRsp),
            "::",
            stringify!(price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryIPOTickerRsp>())).unit as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryIPOTickerRsp),
            "::",
            stringify!(unit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryIPOTickerRsp>())).qty_upper_limit as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryIPOTickerRsp),
            "::",
            stringify!(qty_upper_limit)
        )
    );
}
#[doc = ""]
#[doc = "查询用户申购额度-旧版"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryIPOQuotaRspV1 {
    #[doc = "交易市场"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "可申购额度"]
    pub quantity: i32,
}
#[test]
fn bindgen_test_layout_XTPQueryIPOQuotaRspV1() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryIPOQuotaRspV1>(),
        8usize,
        concat!("Size of: ", stringify!(XTPQueryIPOQuotaRspV1))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryIPOQuotaRspV1>(),
        4usize,
        concat!("Alignment of ", stringify!(XTPQueryIPOQuotaRspV1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryIPOQuotaRspV1>())).market as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryIPOQuotaRspV1),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryIPOQuotaRspV1>())).quantity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryIPOQuotaRspV1),
            "::",
            stringify!(quantity)
        )
    );
}
#[doc = ""]
#[doc = "查询用户申购额度-包含创业板额度"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryIPOQuotaRsp {
    #[doc = "交易市场"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "可申购额度"]
    pub quantity: i32,
    pub tech_quantity: i32,
    pub unused: i32,
}
#[test]
fn bindgen_test_layout_XTPQueryIPOQuotaRsp() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryIPOQuotaRsp>(),
        16usize,
        concat!("Size of: ", stringify!(XTPQueryIPOQuotaRsp))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryIPOQuotaRsp>(),
        4usize,
        concat!("Alignment of ", stringify!(XTPQueryIPOQuotaRsp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryIPOQuotaRsp>())).market as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryIPOQuotaRsp),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryIPOQuotaRsp>())).quantity as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryIPOQuotaRsp),
            "::",
            stringify!(quantity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryIPOQuotaRsp>())).tech_quantity as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryIPOQuotaRsp),
            "::",
            stringify!(tech_quantity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPQueryIPOQuotaRsp>())).unused as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryIPOQuotaRsp),
            "::",
            stringify!(unused)
        )
    );
}
#[doc = ""]
#[doc = "查询期权竞价交易业务参考信息--请求结构体,请求参数为:交易市场+8位期权代码"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPQueryOptionAuctionInfoReq {
    #[doc = "交易市场"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "8位期权合约代码"]
    pub ticker: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_XTPQueryOptionAuctionInfoReq() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryOptionAuctionInfoReq>(),
        20usize,
        concat!("Size of: ", stringify!(XTPQueryOptionAuctionInfoReq))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryOptionAuctionInfoReq>(),
        4usize,
        concat!("Alignment of ", stringify!(XTPQueryOptionAuctionInfoReq))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoReq>())).market as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoReq),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoReq>())).ticker as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoReq),
            "::",
            stringify!(ticker)
        )
    );
}
#[doc = ""]
#[doc = "查询期权竞价交易业务参考信息"]
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XTPQueryOptionAuctionInfoRsp {
    #[doc = "<合约编码，报单ticker采用本字段"]
    pub ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "<证券代码源"]
    pub security_id_source: XTP_MARKET_TYPE,
    #[doc = "<合约简称"]
    pub symbol: [::std::os::raw::c_char; 64usize],
    #[doc = "<合约交易代码"]
    pub contract_id: [::std::os::raw::c_char; 64usize],
    #[doc = "<基础证券代码"]
    pub underlying_security_id: [::std::os::raw::c_char; 16usize],
    #[doc = "<基础证券代码源"]
    pub underlying_security_id_source: XTP_MARKET_TYPE,
    #[doc = "<上市日期，格式为YYYYMMDD"]
    pub list_date: u32,
    #[doc = "<最后交易日，格式为YYYYMMDD"]
    pub last_trade_date: u32,
    #[doc = "<证券类别"]
    pub ticker_type: XTP_TICKER_TYPE,
    #[doc = "<是否支持当日回转交易，1-允许，0-不允许"]
    pub day_trading: i32,
    #[doc = "<认购或认沽"]
    pub call_or_put: XTP_OPT_CALL_OR_PUT_TYPE,
    #[doc = "<行权交割日，格式为YYYYMMDD"]
    pub delivery_day: u32,
    #[doc = "<交割月份，格式为YYYYMM"]
    pub delivery_month: u32,
    #[doc = "<行权方式"]
    pub exercise_type: XTP_OPT_EXERCISE_TYPE_TYPE,
    #[doc = "<行权起始日期，格式为YYYYMMDD"]
    pub exercise_begin_date: u32,
    #[doc = "<行权结束日期，格式为YYYYMMDD"]
    pub exercise_end_date: u32,
    #[doc = "<行权价格"]
    pub exercise_price: f64,
    #[doc = "<数量单位，对于某一证券申报的委托，其委托数量字段必须为该证券数量单位的整数倍"]
    pub qty_unit: i64,
    #[doc = "<合约单位"]
    pub contract_unit: i64,
    #[doc = "<合约持仓量"]
    pub contract_position: i64,
    #[doc = "<合约前收盘价"]
    pub prev_close_price: f64,
    #[doc = "<合约前结算价"]
    pub prev_clearing_price: f64,
    #[doc = "<限价买最大量"]
    pub lmt_buy_max_qty: i64,
    #[doc = "<限价买最小量"]
    pub lmt_buy_min_qty: i64,
    #[doc = "<限价卖最大量"]
    pub lmt_sell_max_qty: i64,
    #[doc = "<限价卖最小量"]
    pub lmt_sell_min_qty: i64,
    #[doc = "<市价买最大量"]
    pub mkt_buy_max_qty: i64,
    #[doc = "<市价买最小量"]
    pub mkt_buy_min_qty: i64,
    #[doc = "<市价卖最大量"]
    pub mkt_sell_max_qty: i64,
    #[doc = "<市价卖最小量"]
    pub mkt_sell_min_qty: i64,
    #[doc = "<最小报价单位"]
    pub price_tick: f64,
    #[doc = "<涨停价"]
    pub upper_limit_price: f64,
    #[doc = "<跌停价"]
    pub lower_limit_price: f64,
    #[doc = "<今卖开每张保证金"]
    pub sell_margin: f64,
    #[doc = "<交易所保证金比例计算参数一"]
    pub margin_ratio_param1: f64,
    #[doc = "<交易所保证金比例计算参数二"]
    pub margin_ratio_param2: f64,
    #[doc = "<（保留字段）"]
    pub unknown: [u64; 20usize],
}
#[test]
fn bindgen_test_layout_XTPQueryOptionAuctionInfoRsp() {
    assert_eq!(
        ::std::mem::size_of::<XTPQueryOptionAuctionInfoRsp>(),
        528usize,
        concat!("Size of: ", stringify!(XTPQueryOptionAuctionInfoRsp))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPQueryOptionAuctionInfoRsp>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPQueryOptionAuctionInfoRsp))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).ticker as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(ticker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).security_id_source as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(security_id_source)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).symbol as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(symbol)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).contract_id as *const _
                as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(contract_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).underlying_security_id
                as *const _ as usize
        },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(underlying_security_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).underlying_security_id_source
                as *const _ as usize
        },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(underlying_security_id_source)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).list_date as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(list_date)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).last_trade_date as *const _
                as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(last_trade_date)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).ticker_type as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(ticker_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).day_trading as *const _
                as usize
        },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(day_trading)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).call_or_put as *const _
                as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(call_or_put)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).delivery_day as *const _
                as usize
        },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(delivery_day)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).delivery_month as *const _
                as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(delivery_month)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).exercise_type as *const _
                as usize
        },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(exercise_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).exercise_begin_date as *const _
                as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(exercise_begin_date)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).exercise_end_date as *const _
                as usize
        },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(exercise_end_date)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).exercise_price as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(exercise_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).qty_unit as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(qty_unit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).contract_unit as *const _
                as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(contract_unit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).contract_position as *const _
                as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(contract_position)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).prev_close_price as *const _
                as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(prev_close_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).prev_clearing_price as *const _
                as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(prev_clearing_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).lmt_buy_max_qty as *const _
                as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(lmt_buy_max_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).lmt_buy_min_qty as *const _
                as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(lmt_buy_min_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).lmt_sell_max_qty as *const _
                as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(lmt_sell_max_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).lmt_sell_min_qty as *const _
                as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(lmt_sell_min_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).mkt_buy_max_qty as *const _
                as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(mkt_buy_max_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).mkt_buy_min_qty as *const _
                as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(mkt_buy_min_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).mkt_sell_max_qty as *const _
                as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(mkt_sell_max_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).mkt_sell_min_qty as *const _
                as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(mkt_sell_min_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).price_tick as *const _ as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(price_tick)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).upper_limit_price as *const _
                as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(upper_limit_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).lower_limit_price as *const _
                as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(lower_limit_price)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).sell_margin as *const _
                as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(sell_margin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).margin_ratio_param1 as *const _
                as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(margin_ratio_param1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).margin_ratio_param2 as *const _
                as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(margin_ratio_param2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPQueryOptionAuctionInfoRsp>())).unknown as *const _ as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPQueryOptionAuctionInfoRsp),
            "::",
            stringify!(unknown)
        )
    );
}
#[doc = ""]
#[doc = "融资融券直接还款响应信息"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPCrdCashRepayRsp {
    #[doc = "< 直接还款操作的XTPID"]
    pub xtp_id: i64,
    #[doc = "< 直接还款的申请金额"]
    pub request_amount: f64,
    #[doc = "< 实际还款使用金额"]
    pub cash_repay_amount: f64,
}
#[test]
fn bindgen_test_layout_XTPCrdCashRepayRsp() {
    assert_eq!(
        ::std::mem::size_of::<XTPCrdCashRepayRsp>(),
        24usize,
        concat!("Size of: ", stringify!(XTPCrdCashRepayRsp))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPCrdCashRepayRsp>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPCrdCashRepayRsp))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdCashRepayRsp>())).xtp_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdCashRepayRsp),
            "::",
            stringify!(xtp_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPCrdCashRepayRsp>())).request_amount as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdCashRepayRsp),
            "::",
            stringify!(request_amount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPCrdCashRepayRsp>())).cash_repay_amount as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdCashRepayRsp),
            "::",
            stringify!(cash_repay_amount)
        )
    );
}
#[doc = ""]
#[doc = "单条融资融券直接还款记录信息"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPCrdCashRepayInfo {
    #[doc = "< 直接还款操作的XTPID"]
    pub xtp_id: i64,
    #[doc = "< 直接还款处理状态"]
    pub status: XTP_CRD_CR_STATUS,
    #[doc = "< 直接还款的申请金额"]
    pub request_amount: f64,
    #[doc = "< 实际还款使用金额"]
    pub cash_repay_amount: f64,
    #[doc = "< 强平标志"]
    pub position_effect: XTP_POSITION_EFFECT_TYPE,
}
#[test]
fn bindgen_test_layout_XTPCrdCashRepayInfo() {
    assert_eq!(
        ::std::mem::size_of::<XTPCrdCashRepayInfo>(),
        40usize,
        concat!("Size of: ", stringify!(XTPCrdCashRepayInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPCrdCashRepayInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPCrdCashRepayInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdCashRepayInfo>())).xtp_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdCashRepayInfo),
            "::",
            stringify!(xtp_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdCashRepayInfo>())).status as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdCashRepayInfo),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPCrdCashRepayInfo>())).request_amount as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdCashRepayInfo),
            "::",
            stringify!(request_amount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPCrdCashRepayInfo>())).cash_repay_amount as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdCashRepayInfo),
            "::",
            stringify!(cash_repay_amount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPCrdCashRepayInfo>())).position_effect as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdCashRepayInfo),
            "::",
            stringify!(position_effect)
        )
    );
}
#[doc = ""]
#[doc = "单条融资融券负债记录信息"]
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XTPCrdDebtInfo {
    #[doc = "< 负债合约类型"]
    pub debt_type: i32,
    #[doc = "< 负债合约编号"]
    pub debt_id: [::std::os::raw::c_char; 33usize],
    #[doc = "< 负债对应两融头寸编号"]
    pub position_id: i64,
    #[doc = "< 生成负债的订单编号，非当日负债无此项"]
    pub order_xtp_id: u64,
    #[doc = "< 负债合约状态"]
    pub debt_status: i32,
    #[doc = "< 市场"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "< 证券代码"]
    pub ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "< 委托日期"]
    pub order_date: u64,
    #[doc = "< 负债截止日期"]
    pub end_date: u64,
    #[doc = "< 负债原始截止日期"]
    pub orig_end_date: u64,
    #[doc = "< 当日是否接收到展期请求"]
    pub is_extended: bool,
    #[doc = "< 未偿还金额"]
    pub remain_amt: f64,
    #[doc = "< 未偿还数量"]
    pub remain_qty: i64,
    #[doc = "< 未偿还本金金额"]
    pub remain_principal: f64,
}
#[test]
fn bindgen_test_layout_XTPCrdDebtInfo() {
    assert_eq!(
        ::std::mem::size_of::<XTPCrdDebtInfo>(),
        136usize,
        concat!("Size of: ", stringify!(XTPCrdDebtInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPCrdDebtInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPCrdDebtInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdDebtInfo>())).debt_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdDebtInfo),
            "::",
            stringify!(debt_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdDebtInfo>())).debt_id as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdDebtInfo),
            "::",
            stringify!(debt_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdDebtInfo>())).position_id as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdDebtInfo),
            "::",
            stringify!(position_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdDebtInfo>())).order_xtp_id as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdDebtInfo),
            "::",
            stringify!(order_xtp_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdDebtInfo>())).debt_status as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdDebtInfo),
            "::",
            stringify!(debt_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdDebtInfo>())).market as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdDebtInfo),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdDebtInfo>())).ticker as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdDebtInfo),
            "::",
            stringify!(ticker)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdDebtInfo>())).order_date as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdDebtInfo),
            "::",
            stringify!(order_date)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdDebtInfo>())).end_date as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdDebtInfo),
            "::",
            stringify!(end_date)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdDebtInfo>())).orig_end_date as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdDebtInfo),
            "::",
            stringify!(orig_end_date)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdDebtInfo>())).is_extended as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdDebtInfo),
            "::",
            stringify!(is_extended)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdDebtInfo>())).remain_amt as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdDebtInfo),
            "::",
            stringify!(remain_amt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdDebtInfo>())).remain_qty as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdDebtInfo),
            "::",
            stringify!(remain_qty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdDebtInfo>())).remain_principal as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdDebtInfo),
            "::",
            stringify!(remain_principal)
        )
    );
}
#[doc = ""]
#[doc = "融资融券特有帐户数据"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPCrdFundInfo {
    #[doc = "< 维持担保品比例"]
    pub maintenance_ratio: f64,
    #[doc = "< 两融授信额度"]
    pub line_of_credit: f64,
    #[doc = "< 两融保证金可用数"]
    pub guaranty: f64,
    #[doc = "< 融资头寸可用金额，内部接口，正式版本需要删除"]
    pub position_amount: f64,
}
#[test]
fn bindgen_test_layout_XTPCrdFundInfo() {
    assert_eq!(
        ::std::mem::size_of::<XTPCrdFundInfo>(),
        32usize,
        concat!("Size of: ", stringify!(XTPCrdFundInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPCrdFundInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPCrdFundInfo))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPCrdFundInfo>())).maintenance_ratio as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdFundInfo),
            "::",
            stringify!(maintenance_ratio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdFundInfo>())).line_of_credit as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdFundInfo),
            "::",
            stringify!(line_of_credit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdFundInfo>())).guaranty as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdFundInfo),
            "::",
            stringify!(guaranty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdFundInfo>())).position_amount as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdFundInfo),
            "::",
            stringify!(position_amount)
        )
    );
}
#[doc = ""]
#[doc = "融资融券指定证券上的负债未还数量"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPClientQueryCrdDebtStockReq {
    #[doc = "< 市场"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "< 证券代码"]
    pub ticker: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_XTPClientQueryCrdDebtStockReq() {
    assert_eq!(
        ::std::mem::size_of::<XTPClientQueryCrdDebtStockReq>(),
        20usize,
        concat!("Size of: ", stringify!(XTPClientQueryCrdDebtStockReq))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPClientQueryCrdDebtStockReq>(),
        4usize,
        concat!("Alignment of ", stringify!(XTPClientQueryCrdDebtStockReq))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPClientQueryCrdDebtStockReq>())).market as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPClientQueryCrdDebtStockReq),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPClientQueryCrdDebtStockReq>())).ticker as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPClientQueryCrdDebtStockReq),
            "::",
            stringify!(ticker)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPCrdDebtStockInfo {
    #[doc = "< 市场"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "< 证券代码"]
    pub ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "< 负债未还数量"]
    pub remain_quantity: i64,
    #[doc = "< 挂单未成还券数量"]
    pub order_withhold_quantity: i64,
}
#[test]
fn bindgen_test_layout_XTPCrdDebtStockInfo() {
    assert_eq!(
        ::std::mem::size_of::<XTPCrdDebtStockInfo>(),
        40usize,
        concat!("Size of: ", stringify!(XTPCrdDebtStockInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPCrdDebtStockInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPCrdDebtStockInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdDebtStockInfo>())).market as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdDebtStockInfo),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPCrdDebtStockInfo>())).ticker as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdDebtStockInfo),
            "::",
            stringify!(ticker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPCrdDebtStockInfo>())).remain_quantity as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdDebtStockInfo),
            "::",
            stringify!(remain_quantity)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPCrdDebtStockInfo>())).order_withhold_quantity as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPCrdDebtStockInfo),
            "::",
            stringify!(order_withhold_quantity)
        )
    );
}
#[doc = ""]
#[doc = "融券头寸证券查询"]
#[doc = ""]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPClientQueryCrdPositionStockReq {
    #[doc = "< 证券市场"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "< 证券代码"]
    pub ticker: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_XTPClientQueryCrdPositionStockReq() {
    assert_eq!(
        ::std::mem::size_of::<XTPClientQueryCrdPositionStockReq>(),
        20usize,
        concat!("Size of: ", stringify!(XTPClientQueryCrdPositionStockReq))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPClientQueryCrdPositionStockReq>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(XTPClientQueryCrdPositionStockReq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPClientQueryCrdPositionStockReq>())).market as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPClientQueryCrdPositionStockReq),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPClientQueryCrdPositionStockReq>())).ticker as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPClientQueryCrdPositionStockReq),
            "::",
            stringify!(ticker)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTPClientQueryCrdPositionStkInfo {
    #[doc = "< 证券市场"]
    pub market: XTP_MARKET_TYPE,
    #[doc = "< 证券代码"]
    pub ticker: [::std::os::raw::c_char; 16usize],
    #[doc = "< 融券限量"]
    pub limit_qty: i64,
    #[doc = "< 昨日日融券数量"]
    pub yesterday_qty: i64,
    #[doc = "< 剩余可融券数量"]
    pub left_qty: i64,
    #[doc = "< 冻结融券数量"]
    pub frozen_qty: i64,
}
#[test]
fn bindgen_test_layout_XTPClientQueryCrdPositionStkInfo() {
    assert_eq!(
        ::std::mem::size_of::<XTPClientQueryCrdPositionStkInfo>(),
        56usize,
        concat!("Size of: ", stringify!(XTPClientQueryCrdPositionStkInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPClientQueryCrdPositionStkInfo>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(XTPClientQueryCrdPositionStkInfo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPClientQueryCrdPositionStkInfo>())).market as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPClientQueryCrdPositionStkInfo),
            "::",
            stringify!(market)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPClientQueryCrdPositionStkInfo>())).ticker as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPClientQueryCrdPositionStkInfo),
            "::",
            stringify!(ticker)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPClientQueryCrdPositionStkInfo>())).limit_qty as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPClientQueryCrdPositionStkInfo),
            "::",
            stringify!(limit_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPClientQueryCrdPositionStkInfo>())).yesterday_qty as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPClientQueryCrdPositionStkInfo),
            "::",
            stringify!(yesterday_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPClientQueryCrdPositionStkInfo>())).left_qty as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPClientQueryCrdPositionStkInfo),
            "::",
            stringify!(left_qty)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPClientQueryCrdPositionStkInfo>())).frozen_qty as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPClientQueryCrdPositionStkInfo),
            "::",
            stringify!(frozen_qty)
        )
    );
}
#[doc = ""]
#[doc = "用户资金请求"]
#[doc = ""]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct XTPFundTransferReq {
    #[doc = "资金内转编号，无需用户填写，类似于xtp_id"]
    pub serial_id: u64,
    #[doc = "资金账户代码"]
    pub fund_account: [::std::os::raw::c_char; 16usize],
    #[doc = "资金账户密码"]
    pub password: [::std::os::raw::c_char; 64usize],
    #[doc = "金额"]
    pub amount: f64,
    #[doc = "内转类型"]
    pub transfer_type: XTP_FUND_TRANSFER_TYPE,
}
#[test]
fn bindgen_test_layout_XTPFundTransferReq() {
    assert_eq!(
        ::std::mem::size_of::<XTPFundTransferReq>(),
        104usize,
        concat!("Size of: ", stringify!(XTPFundTransferReq))
    );
    assert_eq!(
        ::std::mem::align_of::<XTPFundTransferReq>(),
        8usize,
        concat!("Alignment of ", stringify!(XTPFundTransferReq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPFundTransferReq>())).serial_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPFundTransferReq),
            "::",
            stringify!(serial_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPFundTransferReq>())).fund_account as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPFundTransferReq),
            "::",
            stringify!(fund_account)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPFundTransferReq>())).password as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPFundTransferReq),
            "::",
            stringify!(password)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<XTPFundTransferReq>())).amount as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPFundTransferReq),
            "::",
            stringify!(amount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<XTPFundTransferReq>())).transfer_type as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(XTPFundTransferReq),
            "::",
            stringify!(transfer_type)
        )
    );
}
#[doc = ""]
#[doc = "用户资金划转请求的响应-复用资金通知结构体"]
#[doc = ""]
pub type XTPFundTransferAck = XTPFundTransferNotice;
#[repr(C)]
pub struct XTP_API_TraderSpi__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTP_API_TraderSpi {
    pub vtable_: *const XTP_API_TraderSpi__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_XTP_API_TraderSpi() {
    assert_eq!(
        ::std::mem::size_of::<XTP_API_TraderSpi>(),
        8usize,
        concat!("Size of: ", stringify!(XTP_API_TraderSpi))
    );
    assert_eq!(
        ::std::mem::align_of::<XTP_API_TraderSpi>(),
        8usize,
        concat!("Alignment of ", stringify!(XTP_API_TraderSpi))
    );
}
extern "C" {
    #[doc = "当客户端的某个连接与交易后台通信连接断开时，该方法被调用。"]
    #[doc = "@param reason 错误原因，请与错误代码表对应"]
    #[doc = "@param session_id 资金账户对应的session_id，登录时得到"]
    #[doc = "@remark 用户主动调用logout导致的断线，不会触发此函数。api不会自动重连，当断线发生时，请用户自行选择后续操作，可以在此函数中调用Login重新登录，并更新session_id，此时用户收到的数据跟断线之前是连续的"]
    #[link_name = "_ZN3XTP3API9TraderSpi14OnDisconnectedEmi"]
    pub fn XTP_API_TraderSpi_OnDisconnected(
        this: *mut ::std::os::raw::c_void,
        session_id: u64,
        reason: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[doc = "错误应答"]
    #[doc = "@param error_info 当服务器响应发生错误时的具体的错误代码和错误信息,当error_info为空，或者error_info.error_id为0时，表明没有错误"]
    #[doc = "@remark 此函数只有在服务器发生错误时才会调用，一般无需用户处理"]
    #[link_name = "_ZN3XTP3API9TraderSpi7OnErrorEP16XTPRspInfoStruct"]
    pub fn XTP_API_TraderSpi_OnError(this: *mut ::std::os::raw::c_void, error_info: *mut XTPRI);
}
extern "C" {
    #[doc = "报单通知"]
    #[doc = "@param order_info 订单响应具体信息，用户可以通过order_info.order_xtp_id来管理订单，通过GetClientIDByXTPID() == client_id来过滤自己的订单，order_info.qty_left字段在订单为未成交、部成、全成、废单状态时，表示此订单还没有成交的数量，在部撤、全撤状态时，表示此订单被撤的数量。order_info.order_cancel_xtp_id为其所对应的撤单ID，不为0时表示此单被撤成功"]
    #[doc = "@param error_info 订单被拒绝或者发生错误时错误代码和错误信息，当error_info为空，或者error_info.error_id为0时，表明没有错误"]
    #[doc = "@param session_id 资金账户对应的session_id，登录时得到"]
    #[doc = "@remark 每次订单状态更新时，都会被调用，需要快速返回，否则会堵塞后续消息，当堵塞严重时，会触发断线，在订单未成交、全部成交、全部撤单、部分撤单、已拒绝这些状态时会有响应，对于部分成交的情况，请由订单的成交回报来自行确认。所有登录了此用户的客户端都将收到此用户的订单响应"]
    #[link_name = "_ZN3XTP3API9TraderSpi12OnOrderEventEP12XTPOrderInfoP16XTPRspInfoStructm"]
    pub fn XTP_API_TraderSpi_OnOrderEvent(
        this: *mut ::std::os::raw::c_void,
        order_info: *mut XTPOrderInfo,
        error_info: *mut XTPRI,
        session_id: u64,
    );
}
extern "C" {
    #[doc = "成交通知"]
    #[doc = "@param trade_info 成交回报的具体信息，用户可以通过trade_info.order_xtp_id来管理订单，通过GetClientIDByXTPID() == client_id来过滤自己的订单。对于上交所，exec_id可以唯一标识一笔成交。当发现2笔成交回报拥有相同的exec_id，则可以认为此笔交易自成交了。对于深交所，exec_id是唯一的，暂时无此判断机制。report_index+market字段可以组成唯一标识表示成交回报。"]
    #[doc = "@param session_id 资金账户对应的session_id，登录时得到"]
    #[doc = "@remark 订单有成交发生的时候，会被调用，需要快速返回，否则会堵塞后续消息，当堵塞严重时，会触发断线。所有登录了此用户的客户端都将收到此用户的成交回报。相关订单为部成状态，需要用户通过成交回报的成交数量来确定，OnOrderEvent()不会推送部成状态。"]
    #[link_name = "_ZN3XTP3API9TraderSpi12OnTradeEventEP14XTPTradeReportm"]
    pub fn XTP_API_TraderSpi_OnTradeEvent(
        this: *mut ::std::os::raw::c_void,
        trade_info: *mut XTPTradeReport,
        session_id: u64,
    );
}
extern "C" {
    #[doc = "撤单出错响应"]
    #[doc = "@param cancel_info 撤单具体信息，包括撤单的order_cancel_xtp_id和待撤单的order_xtp_id"]
    #[doc = "@param error_info 撤单被拒绝或者发生错误时错误代码和错误信息，需要快速返回，否则会堵塞后续消息，当堵塞严重时，会触发断线，当error_info为空，或者error_info.error_id为0时，表明没有错误"]
    #[doc = "@param session_id 资金账户对应的session_id，登录时得到"]
    #[doc = "@remark 此响应只会在撤单发生错误时被回调"]
    #[link_name = "_ZN3XTP3API9TraderSpi18OnCancelOrderErrorEP18XTPOrderCancelInfoP16XTPRspInfoStructm"]
    pub fn XTP_API_TraderSpi_OnCancelOrderError(
        this: *mut ::std::os::raw::c_void,
        cancel_info: *mut XTPOrderCancelInfo,
        error_info: *mut XTPRI,
        session_id: u64,
    );
}
extern "C" {
    #[doc = "请求查询报单响应"]
    #[doc = "@param order_info 查询到的一个报单"]
    #[doc = "@param error_info 查询报单时发生错误时，返回的错误信息，当error_info为空，或者error_info.error_id为0时，表明没有错误"]
    #[doc = "@param request_id 此消息响应函数对应的请求ID"]
    #[doc = "@param is_last 此消息响应函数是否为request_id这条请求所对应的最后一个响应，当为最后一个的时候为true，如果为false，表示还有其他后续消息响应"]
    #[doc = "@param session_id 资金账户对应的session_id，登录时得到"]
    #[doc = "@remark 由于支持分时段查询，一个查询请求可能对应多个响应，需要快速返回，否则会堵塞后续消息，当堵塞严重时，会触发断线。此对应的请求函数不建议轮询使用，当报单量过多时，容易造成用户线路拥堵，导致api断线"]
    #[link_name = "_ZN3XTP3API9TraderSpi12OnQueryOrderEP12XTPOrderInfoP16XTPRspInfoStructibm"]
    pub fn XTP_API_TraderSpi_OnQueryOrder(
        this: *mut ::std::os::raw::c_void,
        order_info: *mut XTPQueryOrderRsp,
        error_info: *mut XTPRI,
        request_id: ::std::os::raw::c_int,
        is_last: bool,
        session_id: u64,
    );
}
extern "C" {
    #[doc = "分页请求查询报单响应"]
    #[doc = "@param order_info 查询到的一个报单"]
    #[doc = "@param req_count 分页请求的最大数量"]
    #[doc = "@param order_sequence 分页请求的当前回报数量"]
    #[doc = "@param query_reference 当前报单信息所对应的查询索引，需要记录下来，在进行下一次分页查询的时候需要用到"]
    #[doc = "@param request_id 此消息响应函数对应的请求ID"]
    #[doc = "@param is_last 此消息响应函数是否为request_id这条请求所对应的最后一个响应，当为最后一个的时候为true，如果为false，表示还有其他后续消息响应"]
    #[doc = "@param session_id 资金账户对应的session_id，登录时得到"]
    #[doc = "@remark 当order_sequence为0，表明当次查询没有查到任何记录，当is_last为true时，如果order_sequence等于req_count，那么表示还有报单，可以进行下一次分页查询，如果不等，表示所有报单已经查询完毕。一个查询请求可能对应多个响应，需要快速返回，否则会堵塞后续消息，当堵塞严重时，会触发断线。"]
    #[link_name = "_ZN3XTP3API9TraderSpi18OnQueryOrderByPageEP12XTPOrderInfolllibm"]
    pub fn XTP_API_TraderSpi_OnQueryOrderByPage(
        this: *mut ::std::os::raw::c_void,
        order_info: *mut XTPQueryOrderRsp,
        req_count: i64,
        order_sequence: i64,
        query_reference: i64,
        request_id: ::std::os::raw::c_int,
        is_last: bool,
        session_id: u64,
    );
}
extern "C" {
    #[doc = "请求查询成交响应"]
    #[doc = "@param trade_info 查询到的一个成交回报"]
    #[doc = "@param error_info 查询成交回报发生错误时返回的错误信息，当error_info为空，或者error_info.error_id为0时，表明没有错误"]
    #[doc = "@param request_id 此消息响应函数对应的请求ID"]
    #[doc = "@param is_last 此消息响应函数是否为request_id这条请求所对应的最后一个响应，当为最后一个的时候为true，如果为false，表示还有其他后续消息响应"]
    #[doc = "@param session_id 资金账户对应的session_id，登录时得到"]
    #[doc = "@remark 由于支持分时段查询，一个查询请求可能对应多个响应，需要快速返回，否则会堵塞后续消息，当堵塞严重时，会触发断线。此对应的请求函数不建议轮询使用，当报单量过多时，容易造成用户线路拥堵，导致api断线"]
    #[link_name = "_ZN3XTP3API9TraderSpi12OnQueryTradeEP14XTPTradeReportP16XTPRspInfoStructibm"]
    pub fn XTP_API_TraderSpi_OnQueryTrade(
        this: *mut ::std::os::raw::c_void,
        trade_info: *mut XTPQueryTradeRsp,
        error_info: *mut XTPRI,
        request_id: ::std::os::raw::c_int,
        is_last: bool,
        session_id: u64,
    );
}
extern "C" {
    #[doc = "分页请求查询成交响应"]
    #[doc = "@param trade_info 查询到的一个成交信息"]
    #[doc = "@param req_count 分页请求的最大数量"]
    #[doc = "@param trade_sequence 分页请求的当前回报数量"]
    #[doc = "@param query_reference 当前报单信息所对应的查询索引，需要记录下来，在进行下一次分页查询的时候需要用到"]
    #[doc = "@param request_id 此消息响应函数对应的请求ID"]
    #[doc = "@param is_last 此消息响应函数是否为request_id这条请求所对应的最后一个响应，当为最后一个的时候为true，如果为false，表示还有其他后续消息响应"]
    #[doc = "@param session_id 资金账户对应的session_id，登录时得到"]
    #[doc = "@remark 当trade_sequence为0，表明当次查询没有查到任何记录，当is_last为true时，如果trade_sequence等于req_count，那么表示还有回报，可以进行下一次分页查询，如果不等，表示所有回报已经查询完毕。一个查询请求可能对应多个响应，需要快速返回，否则会堵塞后续消息，当堵塞严重时，会触发断线。"]
    #[link_name = "_ZN3XTP3API9TraderSpi18OnQueryTradeByPageEP14XTPTradeReportlllibm"]
    pub fn XTP_API_TraderSpi_OnQueryTradeByPage(
        this: *mut ::std::os::raw::c_void,
        trade_info: *mut XTPQueryTradeRsp,
        req_count: i64,
        trade_sequence: i64,
        query_reference: i64,
        request_id: ::std::os::raw::c_int,
        is_last: bool,
        session_id: u64,
    );
}
extern "C" {
    #[doc = "请求查询投资者持仓响应"]
    #[doc = "@param position 查询到的一只股票的持仓情况"]
    #[doc = "@param error_info 查询账户持仓发生错误时返回的错误信息，当error_info为空，或者error_info.error_id为0时，表明没有错误"]
    #[doc = "@param request_id 此消息响应函数对应的请求ID"]
    #[doc = "@param is_last 此消息响应函数是否为request_id这条请求所对应的最后一个响应，当为最后一个的时候为true，如果为false，表示还有其他后续消息响应"]
    #[doc = "@param session_id 资金账户对应的session_id，登录时得到"]
    #[doc = "@remark 由于用户可能持有多个股票，一个查询请求可能对应多个响应，需要快速返回，否则会堵塞后续消息，当堵塞严重时，会触发断线"]
    #[link_name = "_ZN3XTP3API9TraderSpi15OnQueryPositionEP22XTPQueryStkPositionRspP16XTPRspInfoStructibm"]
    pub fn XTP_API_TraderSpi_OnQueryPosition(
        this: *mut ::std::os::raw::c_void,
        position: *mut XTPQueryStkPositionRsp,
        error_info: *mut XTPRI,
        request_id: ::std::os::raw::c_int,
        is_last: bool,
        session_id: u64,
    );
}
extern "C" {
    #[doc = "请求查询资金账户响应，需要快速返回，否则会堵塞后续消息，当堵塞严重时，会触发断线"]
    #[doc = "@param asset 查询到的资金账户情况"]
    #[doc = "@param error_info 查询资金账户发生错误时返回的错误信息，当error_info为空，或者error_info.error_id为0时，表明没有错误"]
    #[doc = "@param request_id 此消息响应函数对应的请求ID"]
    #[doc = "@param is_last 此消息响应函数是否为request_id这条请求所对应的最后一个响应，当为最后一个的时候为true，如果为false，表示还有其他后续消息响应"]
    #[doc = "@param session_id 资金账户对应的session_id，登录时得到"]
    #[doc = "@remark 需要快速返回，否则会堵塞后续消息，当堵塞严重时，会触发断线"]
    #[link_name = "_ZN3XTP3API9TraderSpi12OnQueryAssetEP16XTPQueryAssetRspP16XTPRspInfoStructibm"]
    pub fn XTP_API_TraderSpi_OnQueryAsset(
        this: *mut ::std::os::raw::c_void,
        asset: *mut XTPQueryAssetRsp,
        error_info: *mut XTPRI,
        request_id: ::std::os::raw::c_int,
        is_last: bool,
        session_id: u64,
    );
}
extern "C" {
    #[doc = "请求查询分级基金信息响应，需要快速返回，否则会堵塞后续消息，当堵塞严重时，会触发断线"]
    #[doc = "@param fund_info 查询到的分级基金情况"]
    #[doc = "@param error_info 查询分级基金发生错误时返回的错误信息，当error_info为空，或者error_info.error_id为0时，表明没有错误"]
    #[doc = "@param request_id 此消息响应函数对应的请求ID"]
    #[doc = "@param is_last 此消息响应函数是否为request_id这条请求所对应的最后一个响应，当为最后一个的时候为true，如果为false，表示还有其他后续消息响应"]
    #[doc = "@param session_id 资金账户对应的session_id，登录时得到"]
    #[doc = "@remark 需要快速返回，否则会堵塞后续消息，当堵塞严重时，会触发断线"]
    #[link_name = "_ZN3XTP3API9TraderSpi21OnQueryStructuredFundEP21XTPStructuredFundInfoP16XTPRspInfoStructibm"]
    pub fn XTP_API_TraderSpi_OnQueryStructuredFund(
        this: *mut ::std::os::raw::c_void,
        fund_info: *mut XTPStructuredFundInfo,
        error_info: *mut XTPRI,
        request_id: ::std::os::raw::c_int,
        is_last: bool,
        session_id: u64,
    );
}
extern "C" {
    #[doc = "请求查询资金划拨订单响应，需要快速返回，否则会堵塞后续消息，当堵塞严重时，会触发断线"]
    #[doc = "@param fund_transfer_info 查询到的资金账户情况"]
    #[doc = "@param error_info 查询资金账户发生错误时返回的错误信息，当error_info为空，或者error_info.error_id为0时，表明没有错误"]
    #[doc = "@param request_id 此消息响应函数对应的请求ID"]
    #[doc = "@param is_last 此消息响应函数是否为request_id这条请求所对应的最后一个响应，当为最后一个的时候为true，如果为false，表示还有其他后续消息响应"]
    #[doc = "@param session_id 资金账户对应的session_id，登录时得到"]
    #[doc = "@remark 需要快速返回，否则会堵塞后续消息，当堵塞严重时，会触发断线"]
    #[link_name = "_ZN3XTP3API9TraderSpi19OnQueryFundTransferEP21XTPFundTransferNoticeP16XTPRspInfoStructibm"]
    pub fn XTP_API_TraderSpi_OnQueryFundTransfer(
        this: *mut ::std::os::raw::c_void,
        fund_transfer_info: *mut XTPFundTransferNotice,
        error_info: *mut XTPRI,
        request_id: ::std::os::raw::c_int,
        is_last: bool,
        session_id: u64,
    );
}
extern "C" {
    #[doc = "资金划拨通知"]
    #[doc = "@param fund_transfer_info 资金划拨通知的具体信息，用户可以通过fund_transfer_info.serial_id来管理订单，通过GetClientIDByXTPID() == client_id来过滤自己的订单。"]
    #[doc = "@param error_info 资金划拨订单被拒绝或者发生错误时错误代码和错误信息，当error_info为空，或者error_info.error_id为0时，表明没有错误。当资金划拨方向为一号两中心节点之间划拨，且error_info.error_id=11000382时，error_info.error_msg为结点中可用于划拨的资金（以整数为准），用户需进行stringToInt的转化，可据此填写合适的资金，再次发起划拨请求"]
    #[doc = "@param session_id 资金账户对应的session_id，登录时得到"]
    #[doc = "@remark 当资金划拨订单有状态变化的时候，会被调用，需要快速返回，否则会堵塞后续消息，当堵塞严重时，会触发断线。所有登录了此用户的客户端都将收到此用户的资金划拨通知。"]
    #[link_name = "_ZN3XTP3API9TraderSpi14OnFundTransferEP21XTPFundTransferNoticeP16XTPRspInfoStructm"]
    pub fn XTP_API_TraderSpi_OnFundTransfer(
        this: *mut ::std::os::raw::c_void,
        fund_transfer_info: *mut XTPFundTransferNotice,
        error_info: *mut XTPRI,
        session_id: u64,
    );
}
extern "C" {
    #[doc = "请求查询ETF清单文件的响应，需要快速返回，否则会堵塞后续消息，当堵塞严重时，会触发断线"]
    #[doc = "@param etf_info 查询到的ETF清单文件情况"]
    #[doc = "@param error_info 查询ETF清单文件发生错误时返回的错误信息，当error_info为空，或者error_info.error_id为0时，表明没有错误"]
    #[doc = "@param request_id 此消息响应函数对应的请求ID"]
    #[doc = "@param is_last 此消息响应函数是否为request_id这条请求所对应的最后一个响应，当为最后一个的时候为true，如果为false，表示还有其他后续消息响应"]
    #[doc = "@param session_id 资金账户对应的session_id，登录时得到"]
    #[doc = "@remark 需要快速返回，否则会堵塞后续消息，当堵塞严重时，会触发断线"]
    #[link_name = "_ZN3XTP3API9TraderSpi10OnQueryETFEP18XTPQueryETFBaseRspP16XTPRspInfoStructibm"]
    pub fn XTP_API_TraderSpi_OnQueryETF(
        this: *mut ::std::os::raw::c_void,
        etf_info: *mut XTPQueryETFBaseRsp,
        error_info: *mut XTPRI,
        request_id: ::std::os::raw::c_int,
        is_last: bool,
        session_id: u64,
    );
}
extern "C" {
    #[doc = "请求查询ETF股票篮的响应，需要快速返回，否则会堵塞后续消息，当堵塞严重时，会触发断线"]
    #[doc = "@param etf_component_info 查询到的ETF合约的相关成分股信息"]
    #[doc = "@param error_info 查询ETF股票篮发生错误时返回的错误信息，当error_info为空，或者error_info.error_id为0时，表明没有错误"]
    #[doc = "@param request_id 此消息响应函数对应的请求ID"]
    #[doc = "@param is_last 此消息响应函数是否为request_id这条请求所对应的最后一个响应，当为最后一个的时候为true，如果为false，表示还有其他后续消息响应"]
    #[doc = "@param session_id 资金账户对应的session_id，登录时得到"]
    #[doc = "@remark 需要快速返回，否则会堵塞后续消息，当堵塞严重时，会触发断线"]
    #[link_name = "_ZN3XTP3API9TraderSpi16OnQueryETFBasketEP23XTPQueryETFComponentRspP16XTPRspInfoStructibm"]
    pub fn XTP_API_TraderSpi_OnQueryETFBasket(
        this: *mut ::std::os::raw::c_void,
        etf_component_info: *mut XTPQueryETFComponentRsp,
        error_info: *mut XTPRI,
        request_id: ::std::os::raw::c_int,
        is_last: bool,
        session_id: u64,
    );
}
extern "C" {
    #[doc = "请求查询今日新股申购信息列表的响应，需要快速返回，否则会堵塞后续消息，当堵塞严重时，会触发断线"]
    #[doc = "@param ipo_info 查询到的今日新股申购的一只股票信息"]
    #[doc = "@param error_info 查询今日新股申购信息列表发生错误时返回的错误信息，当error_info为空，或者error_info.error_id为0时，表明没有错误"]
    #[doc = "@param request_id 此消息响应函数对应的请求ID"]
    #[doc = "@param is_last 此消息响应函数是否为request_id这条请求所对应的最后一个响应，当为最后一个的时候为true，如果为false，表示还有其他后续消息响应"]
    #[doc = "@param session_id 资金账户对应的session_id，登录时得到"]
    #[doc = "@remark 需要快速返回，否则会堵塞后续消息，当堵塞严重时，会触发断线"]
    #[link_name = "_ZN3XTP3API9TraderSpi18OnQueryIPOInfoListEP20XTPQueryIPOTickerRspP16XTPRspInfoStructibm"]
    pub fn XTP_API_TraderSpi_OnQueryIPOInfoList(
        this: *mut ::std::os::raw::c_void,
        ipo_info: *mut XTPQueryIPOTickerRsp,
        error_info: *mut XTPRI,
        request_id: ::std::os::raw::c_int,
        is_last: bool,
        session_id: u64,
    );
}
extern "C" {
    #[doc = "请求查询用户新股申购额度信息的响应，需要快速返回，否则会堵塞后续消息，当堵塞严重时，会触发断线"]
    #[doc = "@param quota_info 查询到的用户某个市场的今日新股申购额度信息"]
    #[doc = "@param error_info 查查询用户新股申购额度信息发生错误时返回的错误信息，当error_info为空，或者error_info.error_id为0时，表明没有错误"]
    #[doc = "@param request_id 此消息响应函数对应的请求ID"]
    #[doc = "@param is_last 此消息响应函数是否为request_id这条请求所对应的最后一个响应，当为最后一个的时候为true，如果为false，表示还有其他后续消息响应"]
    #[doc = "@param session_id 资金账户对应的session_id，登录时得到"]
    #[doc = "@remark 需要快速返回，否则会堵塞后续消息，当堵塞严重时，会触发断线"]
    #[link_name = "_ZN3XTP3API9TraderSpi19OnQueryIPOQuotaInfoEP19XTPQueryIPOQuotaRspP16XTPRspInfoStructibm"]
    pub fn XTP_API_TraderSpi_OnQueryIPOQuotaInfo(
        this: *mut ::std::os::raw::c_void,
        quota_info: *mut XTPQueryIPOQuotaRsp,
        error_info: *mut XTPRI,
        request_id: ::std::os::raw::c_int,
        is_last: bool,
        session_id: u64,
    );
}
extern "C" {
    #[doc = "请求查询期权合约的响应，需要快速返回，否则会堵塞后续消息，当堵塞严重时，会触发断线"]
    #[doc = "@param option_info 查询到的期权合约情况"]
    #[doc = "@param error_info 查询期权合约发生错误时返回的错误信息，当error_info为空，或者error_info.error_id为0时，表明没有错误"]
    #[doc = "@param request_id 此消息响应函数对应的请求ID"]
    #[doc = "@param is_last 此消息响应函数是否为request_id这条请求所对应的最后一个响应，当为最后一个的时候为true，如果为false，表示还有其他后续消息响应"]
    #[doc = "@param session_id 资金账户对应的session_id，登录时得到"]
    #[doc = "@remark 需要快速返回，否则会堵塞后续消息，当堵塞严重时，会触发断线"]
    #[link_name = "_ZN3XTP3API9TraderSpi24OnQueryOptionAuctionInfoEP28XTPQueryOptionAuctionInfoRspP16XTPRspInfoStructibm"]
    pub fn XTP_API_TraderSpi_OnQueryOptionAuctionInfo(
        this: *mut ::std::os::raw::c_void,
        option_info: *mut XTPQueryOptionAuctionInfoRsp,
        error_info: *mut XTPRI,
        request_id: ::std::os::raw::c_int,
        is_last: bool,
        session_id: u64,
    );
}
#[repr(C)]
pub struct XTP_API_TraderApi__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct XTP_API_TraderApi {
    pub vtable_: *const XTP_API_TraderApi__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_XTP_API_TraderApi() {
    assert_eq!(
        ::std::mem::size_of::<XTP_API_TraderApi>(),
        8usize,
        concat!("Size of: ", stringify!(XTP_API_TraderApi))
    );
    assert_eq!(
        ::std::mem::align_of::<XTP_API_TraderApi>(),
        8usize,
        concat!("Alignment of ", stringify!(XTP_API_TraderApi))
    );
}
extern "C" {
    #[doc = "创建TraderApi"]
    #[doc = "@param client_id （必须输入）客户端id，用于区分同一用户的不同客户端，由用户自定义"]
    #[doc = "@param save_file_path （必须输入）存贮订阅信息文件的目录，请设定一个真实存在的有可写权限的路径"]
    #[doc = "@param log_level 日志输出级别"]
    #[doc = "@return 创建出的UserApi"]
    #[doc = "@remark 如果一个账户需要在多个客户端登录，请使用不同的client_id，系统允许一个账户同时登录多个客户端，但是对于同一账户，相同的client_id只能保持一个session连接，后面的登录在前一个session存续期间，无法连接。系统不支持过夜，请确保每天开盘前重新启动"]
    #[link_name = "_ZN3XTP3API9TraderApi15CreateTraderApiEhPKc13XTP_LOG_LEVEL"]
    pub fn XTP_API_TraderApi_CreateTraderApi(
        client_id: u8,
        save_file_path: *const ::std::os::raw::c_char,
        log_level: XTP_LOG_LEVEL,
    ) -> *mut XTP_API_TraderApi;
}
extern "C" {
    #[link_name = "_ZN3XTP3API9TraderApiD1Ev"]
    pub fn XTP_API_TraderApi_TraderApi_destructor(this: *mut XTP_API_TraderApi);
}
impl XTP_API_TraderApi {
    #[inline]
    pub unsafe fn CreateTraderApi(
        client_id: u8,
        save_file_path: *const ::std::os::raw::c_char,
        log_level: XTP_LOG_LEVEL,
    ) -> *mut XTP_API_TraderApi {
        XTP_API_TraderApi_CreateTraderApi(client_id, save_file_path, log_level)
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        XTP_API_TraderApi_TraderApi_destructor(self)
    }
}
#[repr(C)]
pub struct XTP_API_QuoteSpi__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XTP_API_QuoteSpi {
    pub vtable_: *const XTP_API_QuoteSpi__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_XTP_API_QuoteSpi() {
    assert_eq!(
        ::std::mem::size_of::<XTP_API_QuoteSpi>(),
        8usize,
        concat!("Size of: ", stringify!(XTP_API_QuoteSpi))
    );
    assert_eq!(
        ::std::mem::align_of::<XTP_API_QuoteSpi>(),
        8usize,
        concat!("Alignment of ", stringify!(XTP_API_QuoteSpi))
    );
}
extern "C" {
    #[doc = "当客户端与行情后台通信连接断开时，该方法被调用。"]
    #[doc = "@param reason 错误原因，请与错误代码表对应"]
    #[doc = "@remark api不会自动重连，当断线发生时，请用户自行选择后续操作。可以在此函数中调用Login重新登录。注意用户重新登录后，需要重新订阅行情"]
    #[link_name = "_ZN3XTP3API8QuoteSpi14OnDisconnectedEi"]
    pub fn XTP_API_QuoteSpi_OnDisconnected(
        this: *mut ::std::os::raw::c_void,
        reason: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[doc = "错误应答"]
    #[doc = "@param error_info 当服务器响应发生错误时的具体的错误代码和错误信息，当error_info为空，或者error_info.error_id为0时，表明没有错误"]
    #[doc = "@remark 此函数只有在服务器发生错误时才会调用，一般无需用户处理"]
    #[link_name = "_ZN3XTP3API8QuoteSpi7OnErrorEP16XTPRspInfoStruct"]
    pub fn XTP_API_QuoteSpi_OnError(this: *mut ::std::os::raw::c_void, error_info: *mut XTPRI);
}
extern "C" {
    #[doc = "订阅行情应答，包括股票、指数和期权"]
    #[doc = "@param ticker 详细的合约订阅情况"]
    #[doc = "@param error_info 订阅合约发生错误时的错误信息，当error_info为空，或者error_info.error_id为0时，表明没有错误"]
    #[doc = "@param is_last 是否此次订阅的最后一个应答，当为最后一个的时候为true，如果为false，表示还有其他后续消息响应"]
    #[doc = "@remark 每条订阅的合约均对应一条订阅应答，需要快速返回，否则会堵塞后续消息，当堵塞严重时，会触发断线"]
    #[link_name = "_ZN3XTP3API8QuoteSpi15OnSubMarketDataEP23XTPSpecificTickerStructP16XTPRspInfoStructb"]
    pub fn XTP_API_QuoteSpi_OnSubMarketData(
        this: *mut ::std::os::raw::c_void,
        ticker: *mut XTPST,
        error_info: *mut XTPRI,
        is_last: bool,
    );
}
extern "C" {
    #[doc = "退订行情应答，包括股票、指数和期权"]
    #[doc = "@param ticker 详细的合约取消订阅情况"]
    #[doc = "@param error_info 取消订阅合约时发生错误时返回的错误信息，当error_info为空，或者error_info.error_id为0时，表明没有错误"]
    #[doc = "@param is_last 是否此次取消订阅的最后一个应答，当为最后一个的时候为true，如果为false，表示还有其他后续消息响应"]
    #[doc = "@remark 每条取消订阅的合约均对应一条取消订阅应答，需要快速返回，否则会堵塞后续消息，当堵塞严重时，会触发断线"]
    #[link_name = "_ZN3XTP3API8QuoteSpi17OnUnSubMarketDataEP23XTPSpecificTickerStructP16XTPRspInfoStructb"]
    pub fn XTP_API_QuoteSpi_OnUnSubMarketData(
        this: *mut ::std::os::raw::c_void,
        ticker: *mut XTPST,
        error_info: *mut XTPRI,
        is_last: bool,
    );
}
extern "C" {
    #[doc = "深度行情通知，包含买一卖一队列"]
    #[doc = "@param market_data 行情数据"]
    #[doc = "@param bid1_qty 买一队列数据"]
    #[doc = "@param bid1_count 买一队列的有效委托笔数"]
    #[doc = "@param max_bid1_count 买一队列总委托笔数"]
    #[doc = "@param ask1_qty 卖一队列数据"]
    #[doc = "@param ask1_count 卖一队列的有效委托笔数"]
    #[doc = "@param max_ask1_count 卖一队列总委托笔数"]
    #[doc = "@remark 需要快速返回，否则会堵塞后续消息，当堵塞严重时，会触发断线"]
    #[link_name = "_ZN3XTP3API8QuoteSpi17OnDepthMarketDataEP19XTPMarketDataStructPliiS4_ii"]
    pub fn XTP_API_QuoteSpi_OnDepthMarketData(
        this: *mut ::std::os::raw::c_void,
        market_data: *mut XTPMD,
        bid1_qty: *mut i64,
        bid1_count: i32,
        max_bid1_count: i32,
        ask1_qty: *mut i64,
        ask1_count: i32,
        max_ask1_count: i32,
    );
}
extern "C" {
    #[doc = "订阅行情订单簿应答，包括股票、指数和期权"]
    #[doc = "@param ticker 详细的合约订阅情况"]
    #[doc = "@param error_info 订阅合约发生错误时的错误信息，当error_info为空，或者error_info.error_id为0时，表明没有错误"]
    #[doc = "@param is_last 是否此次订阅的最后一个应答，当为最后一个的时候为true，如果为false，表示还有其他后续消息响应"]
    #[doc = "@remark 每条订阅的合约均对应一条订阅应答，需要快速返回，否则会堵塞后续消息，当堵塞严重时，会触发断线"]
    #[link_name = "_ZN3XTP3API8QuoteSpi14OnSubOrderBookEP23XTPSpecificTickerStructP16XTPRspInfoStructb"]
    pub fn XTP_API_QuoteSpi_OnSubOrderBook(
        this: *mut ::std::os::raw::c_void,
        ticker: *mut XTPST,
        error_info: *mut XTPRI,
        is_last: bool,
    );
}
extern "C" {
    #[doc = "退订行情订单簿应答，包括股票、指数和期权"]
    #[doc = "@param ticker 详细的合约取消订阅情况"]
    #[doc = "@param error_info 取消订阅合约时发生错误时返回的错误信息，当error_info为空，或者error_info.error_id为0时，表明没有错误"]
    #[doc = "@param is_last 是否此次取消订阅的最后一个应答，当为最后一个的时候为true，如果为false，表示还有其他后续消息响应"]
    #[doc = "@remark 每条取消订阅的合约均对应一条取消订阅应答，需要快速返回，否则会堵塞后续消息，当堵塞严重时，会触发断线"]
    #[link_name = "_ZN3XTP3API8QuoteSpi16OnUnSubOrderBookEP23XTPSpecificTickerStructP16XTPRspInfoStructb"]
    pub fn XTP_API_QuoteSpi_OnUnSubOrderBook(
        this: *mut ::std::os::raw::c_void,
        ticker: *mut XTPST,
        error_info: *mut XTPRI,
        is_last: bool,
    );
}
extern "C" {
    #[doc = "行情订单簿通知，包括股票、指数和期权"]
    #[doc = "@param order_book 行情订单簿数据，需要快速返回，否则会堵塞后续消息，当堵塞严重时，会触发断线"]
    #[link_name = "_ZN3XTP3API8QuoteSpi11OnOrderBookEP15OrderBookStruct"]
    pub fn XTP_API_QuoteSpi_OnOrderBook(this: *mut ::std::os::raw::c_void, order_book: *mut XTPOB);
}
extern "C" {
    #[doc = "订阅逐笔行情应答，包括股票、指数和期权"]
    #[doc = "@param ticker 详细的合约订阅情况"]
    #[doc = "@param error_info 订阅合约发生错误时的错误信息，当error_info为空，或者error_info.error_id为0时，表明没有错误"]
    #[doc = "@param is_last 是否此次订阅的最后一个应答，当为最后一个的时候为true，如果为false，表示还有其他后续消息响应"]
    #[doc = "@remark 每条订阅的合约均对应一条订阅应答，需要快速返回，否则会堵塞后续消息，当堵塞严重时，会触发断线"]
    #[link_name = "_ZN3XTP3API8QuoteSpi15OnSubTickByTickEP23XTPSpecificTickerStructP16XTPRspInfoStructb"]
    pub fn XTP_API_QuoteSpi_OnSubTickByTick(
        this: *mut ::std::os::raw::c_void,
        ticker: *mut XTPST,
        error_info: *mut XTPRI,
        is_last: bool,
    );
}
extern "C" {
    #[doc = "退订逐笔行情应答，包括股票、指数和期权"]
    #[doc = "@param ticker 详细的合约取消订阅情况"]
    #[doc = "@param error_info 取消订阅合约时发生错误时返回的错误信息，当error_info为空，或者error_info.error_id为0时，表明没有错误"]
    #[doc = "@param is_last 是否此次取消订阅的最后一个应答，当为最后一个的时候为true，如果为false，表示还有其他后续消息响应"]
    #[doc = "@remark 每条取消订阅的合约均对应一条取消订阅应答，需要快速返回，否则会堵塞后续消息，当堵塞严重时，会触发断线"]
    #[link_name = "_ZN3XTP3API8QuoteSpi17OnUnSubTickByTickEP23XTPSpecificTickerStructP16XTPRspInfoStructb"]
    pub fn XTP_API_QuoteSpi_OnUnSubTickByTick(
        this: *mut ::std::os::raw::c_void,
        ticker: *mut XTPST,
        error_info: *mut XTPRI,
        is_last: bool,
    );
}
extern "C" {
    #[doc = "逐笔行情通知，包括股票、指数和期权"]
    #[doc = "@param tbt_data 逐笔行情数据，包括逐笔委托和逐笔成交，此为共用结构体，需要根据type来区分是逐笔委托还是逐笔成交，需要快速返回，否则会堵塞后续消息，当堵塞严重时，会触发断线"]
    #[link_name = "_ZN3XTP3API8QuoteSpi12OnTickByTickEP19XTPTickByTickStruct"]
    pub fn XTP_API_QuoteSpi_OnTickByTick(this: *mut ::std::os::raw::c_void, tbt_data: *mut XTPTBT);
}
extern "C" {
    #[doc = "订阅全市场的股票行情应答"]
    #[doc = "@param exchange_id 表示当前全订阅的市场，如果为XTP_EXCHANGE_UNKNOWN，表示沪深全市场，XTP_EXCHANGE_SH表示为上海全市场，XTP_EXCHANGE_SZ表示为深圳全市场"]
    #[doc = "@param error_info 取消订阅合约时发生错误时返回的错误信息，当error_info为空，或者error_info.error_id为0时，表明没有错误"]
    #[doc = "@remark 需要快速返回"]
    #[link_name = "_ZN3XTP3API8QuoteSpi24OnSubscribeAllMarketDataE17XTP_EXCHANGE_TYPEP16XTPRspInfoStruct"]
    pub fn XTP_API_QuoteSpi_OnSubscribeAllMarketData(
        this: *mut ::std::os::raw::c_void,
        exchange_id: XTP_EXCHANGE_TYPE,
        error_info: *mut XTPRI,
    );
}
extern "C" {
    #[doc = "退订全市场的股票行情应答"]
    #[doc = "@param exchange_id 表示当前退订的市场，如果为XTP_EXCHANGE_UNKNOWN，表示沪深全市场，XTP_EXCHANGE_SH表示为上海全市场，XTP_EXCHANGE_SZ表示为深圳全市场"]
    #[doc = "@param error_info 取消订阅合约时发生错误时返回的错误信息，当error_info为空，或者error_info.error_id为0时，表明没有错误"]
    #[doc = "@remark 需要快速返回"]
    #[link_name = "_ZN3XTP3API8QuoteSpi26OnUnSubscribeAllMarketDataE17XTP_EXCHANGE_TYPEP16XTPRspInfoStruct"]
    pub fn XTP_API_QuoteSpi_OnUnSubscribeAllMarketData(
        this: *mut ::std::os::raw::c_void,
        exchange_id: XTP_EXCHANGE_TYPE,
        error_info: *mut XTPRI,
    );
}
extern "C" {
    #[doc = "订阅全市场的股票行情订单簿应答"]
    #[doc = "@param exchange_id 表示当前全订阅的市场，如果为XTP_EXCHANGE_UNKNOWN，表示沪深全市场，XTP_EXCHANGE_SH表示为上海全市场，XTP_EXCHANGE_SZ表示为深圳全市场"]
    #[doc = "@param error_info 取消订阅合约时发生错误时返回的错误信息，当error_info为空，或者error_info.error_id为0时，表明没有错误"]
    #[doc = "@remark 需要快速返回"]
    #[link_name = "_ZN3XTP3API8QuoteSpi23OnSubscribeAllOrderBookE17XTP_EXCHANGE_TYPEP16XTPRspInfoStruct"]
    pub fn XTP_API_QuoteSpi_OnSubscribeAllOrderBook(
        this: *mut ::std::os::raw::c_void,
        exchange_id: XTP_EXCHANGE_TYPE,
        error_info: *mut XTPRI,
    );
}
extern "C" {
    #[doc = "退订全市场的股票行情订单簿应答"]
    #[doc = "@param exchange_id 表示当前退订的市场，如果为XTP_EXCHANGE_UNKNOWN，表示沪深全市场，XTP_EXCHANGE_SH表示为上海全市场，XTP_EXCHANGE_SZ表示为深圳全市场"]
    #[doc = "@param error_info 取消订阅合约时发生错误时返回的错误信息，当error_info为空，或者error_info.error_id为0时，表明没有错误"]
    #[doc = "@remark 需要快速返回"]
    #[link_name = "_ZN3XTP3API8QuoteSpi25OnUnSubscribeAllOrderBookE17XTP_EXCHANGE_TYPEP16XTPRspInfoStruct"]
    pub fn XTP_API_QuoteSpi_OnUnSubscribeAllOrderBook(
        this: *mut ::std::os::raw::c_void,
        exchange_id: XTP_EXCHANGE_TYPE,
        error_info: *mut XTPRI,
    );
}
extern "C" {
    #[doc = "订阅全市场的股票逐笔行情应答"]
    #[doc = "@param exchange_id 表示当前全订阅的市场，如果为XTP_EXCHANGE_UNKNOWN，表示沪深全市场，XTP_EXCHANGE_SH表示为上海全市场，XTP_EXCHANGE_SZ表示为深圳全市场"]
    #[doc = "@param error_info 取消订阅合约时发生错误时返回的错误信息，当error_info为空，或者error_info.error_id为0时，表明没有错误"]
    #[doc = "@remark 需要快速返回"]
    #[link_name = "_ZN3XTP3API8QuoteSpi24OnSubscribeAllTickByTickE17XTP_EXCHANGE_TYPEP16XTPRspInfoStruct"]
    pub fn XTP_API_QuoteSpi_OnSubscribeAllTickByTick(
        this: *mut ::std::os::raw::c_void,
        exchange_id: XTP_EXCHANGE_TYPE,
        error_info: *mut XTPRI,
    );
}
extern "C" {
    #[doc = "退订全市场的股票逐笔行情应答"]
    #[doc = "@param exchange_id 表示当前退订的市场，如果为XTP_EXCHANGE_UNKNOWN，表示沪深全市场，XTP_EXCHANGE_SH表示为上海全市场，XTP_EXCHANGE_SZ表示为深圳全市场"]
    #[doc = "@param error_info 取消订阅合约时发生错误时返回的错误信息，当error_info为空，或者error_info.error_id为0时，表明没有错误"]
    #[doc = "@remark 需要快速返回"]
    #[link_name = "_ZN3XTP3API8QuoteSpi26OnUnSubscribeAllTickByTickE17XTP_EXCHANGE_TYPEP16XTPRspInfoStruct"]
    pub fn XTP_API_QuoteSpi_OnUnSubscribeAllTickByTick(
        this: *mut ::std::os::raw::c_void,
        exchange_id: XTP_EXCHANGE_TYPE,
        error_info: *mut XTPRI,
    );
}
extern "C" {
    #[doc = "查询可交易合约的应答"]
    #[doc = "@param ticker_info 可交易合约信息"]
    #[doc = "@param error_info 查询可交易合约时发生错误时返回的错误信息，当error_info为空，或者error_info.error_id为0时，表明没有错误"]
    #[doc = "@param is_last 是否此次查询可交易合约的最后一个应答，当为最后一个的时候为true，如果为false，表示还有其他后续消息响应"]
    #[link_name = "_ZN3XTP3API8QuoteSpi17OnQueryAllTickersEP18XTPQuoteStaticInfoP16XTPRspInfoStructb"]
    pub fn XTP_API_QuoteSpi_OnQueryAllTickers(
        this: *mut ::std::os::raw::c_void,
        ticker_info: *mut XTPQSI,
        error_info: *mut XTPRI,
        is_last: bool,
    );
}
extern "C" {
    #[doc = "查询合约的最新价格信息应答"]
    #[doc = "@param ticker_info 合约的最新价格信息"]
    #[doc = "@param error_info 查询合约的最新价格信息时发生错误时返回的错误信息，当error_info为空，或者error_info.error_id为0时，表明没有错误"]
    #[doc = "@param is_last 是否此次查询的最后一个应答，当为最后一个的时候为true，如果为false，表示还有其他后续消息响应"]
    #[link_name = "_ZN3XTP3API8QuoteSpi23OnQueryTickersPriceInfoEP18XTPTickerPriceInfoP16XTPRspInfoStructb"]
    pub fn XTP_API_QuoteSpi_OnQueryTickersPriceInfo(
        this: *mut ::std::os::raw::c_void,
        ticker_info: *mut XTPTPI,
        error_info: *mut XTPRI,
        is_last: bool,
    );
}
extern "C" {
    #[doc = "订阅全市场的期权行情应答"]
    #[doc = "@param exchange_id 表示当前全订阅的市场，如果为XTP_EXCHANGE_UNKNOWN，表示沪深全市场，XTP_EXCHANGE_SH表示为上海全市场，XTP_EXCHANGE_SZ表示为深圳全市场"]
    #[doc = "@param error_info 取消订阅合约时发生错误时返回的错误信息，当error_info为空，或者error_info.error_id为0时，表明没有错误"]
    #[doc = "@remark 需要快速返回"]
    #[link_name = "_ZN3XTP3API8QuoteSpi30OnSubscribeAllOptionMarketDataE17XTP_EXCHANGE_TYPEP16XTPRspInfoStruct"]
    pub fn XTP_API_QuoteSpi_OnSubscribeAllOptionMarketData(
        this: *mut ::std::os::raw::c_void,
        exchange_id: XTP_EXCHANGE_TYPE,
        error_info: *mut XTPRI,
    );
}
extern "C" {
    #[doc = "退订全市场的期权行情应答"]
    #[doc = "@param exchange_id 表示当前退订的市场，如果为XTP_EXCHANGE_UNKNOWN，表示沪深全市场，XTP_EXCHANGE_SH表示为上海全市场，XTP_EXCHANGE_SZ表示为深圳全市场"]
    #[doc = "@param error_info 取消订阅合约时发生错误时返回的错误信息，当error_info为空，或者error_info.error_id为0时，表明没有错误"]
    #[doc = "@remark 需要快速返回"]
    #[link_name = "_ZN3XTP3API8QuoteSpi32OnUnSubscribeAllOptionMarketDataE17XTP_EXCHANGE_TYPEP16XTPRspInfoStruct"]
    pub fn XTP_API_QuoteSpi_OnUnSubscribeAllOptionMarketData(
        this: *mut ::std::os::raw::c_void,
        exchange_id: XTP_EXCHANGE_TYPE,
        error_info: *mut XTPRI,
    );
}
extern "C" {
    #[doc = "订阅全市场的期权行情订单簿应答"]
    #[doc = "@param exchange_id 表示当前全订阅的市场，如果为XTP_EXCHANGE_UNKNOWN，表示沪深全市场，XTP_EXCHANGE_SH表示为上海全市场，XTP_EXCHANGE_SZ表示为深圳全市场"]
    #[doc = "@param error_info 取消订阅合约时发生错误时返回的错误信息，当error_info为空，或者error_info.error_id为0时，表明没有错误"]
    #[doc = "@remark 需要快速返回"]
    #[link_name = "_ZN3XTP3API8QuoteSpi29OnSubscribeAllOptionOrderBookE17XTP_EXCHANGE_TYPEP16XTPRspInfoStruct"]
    pub fn XTP_API_QuoteSpi_OnSubscribeAllOptionOrderBook(
        this: *mut ::std::os::raw::c_void,
        exchange_id: XTP_EXCHANGE_TYPE,
        error_info: *mut XTPRI,
    );
}
extern "C" {
    #[doc = "退订全市场的期权行情订单簿应答"]
    #[doc = "@param exchange_id 表示当前退订的市场，如果为XTP_EXCHANGE_UNKNOWN，表示沪深全市场，XTP_EXCHANGE_SH表示为上海全市场，XTP_EXCHANGE_SZ表示为深圳全市场"]
    #[doc = "@param error_info 取消订阅合约时发生错误时返回的错误信息，当error_info为空，或者error_info.error_id为0时，表明没有错误"]
    #[doc = "@remark 需要快速返回"]
    #[link_name = "_ZN3XTP3API8QuoteSpi31OnUnSubscribeAllOptionOrderBookE17XTP_EXCHANGE_TYPEP16XTPRspInfoStruct"]
    pub fn XTP_API_QuoteSpi_OnUnSubscribeAllOptionOrderBook(
        this: *mut ::std::os::raw::c_void,
        exchange_id: XTP_EXCHANGE_TYPE,
        error_info: *mut XTPRI,
    );
}
extern "C" {
    #[doc = "订阅全市场的期权逐笔行情应答"]
    #[doc = "@param exchange_id 表示当前全订阅的市场，如果为XTP_EXCHANGE_UNKNOWN，表示沪深全市场，XTP_EXCHANGE_SH表示为上海全市场，XTP_EXCHANGE_SZ表示为深圳全市场"]
    #[doc = "@param error_info 取消订阅合约时发生错误时返回的错误信息，当error_info为空，或者error_info.error_id为0时，表明没有错误"]
    #[doc = "@remark 需要快速返回"]
    #[link_name = "_ZN3XTP3API8QuoteSpi30OnSubscribeAllOptionTickByTickE17XTP_EXCHANGE_TYPEP16XTPRspInfoStruct"]
    pub fn XTP_API_QuoteSpi_OnSubscribeAllOptionTickByTick(
        this: *mut ::std::os::raw::c_void,
        exchange_id: XTP_EXCHANGE_TYPE,
        error_info: *mut XTPRI,
    );
}
extern "C" {
    #[doc = "退订全市场的期权逐笔行情应答"]
    #[doc = "@param exchange_id 表示当前退订的市场，如果为XTP_EXCHANGE_UNKNOWN，表示沪深全市场，XTP_EXCHANGE_SH表示为上海全市场，XTP_EXCHANGE_SZ表示为深圳全市场"]
    #[doc = "@param error_info 取消订阅合约时发生错误时返回的错误信息，当error_info为空，或者error_info.error_id为0时，表明没有错误"]
    #[doc = "@remark 需要快速返回"]
    #[link_name = "_ZN3XTP3API8QuoteSpi32OnUnSubscribeAllOptionTickByTickE17XTP_EXCHANGE_TYPEP16XTPRspInfoStruct"]
    pub fn XTP_API_QuoteSpi_OnUnSubscribeAllOptionTickByTick(
        this: *mut ::std::os::raw::c_void,
        exchange_id: XTP_EXCHANGE_TYPE,
        error_info: *mut XTPRI,
    );
}
#[repr(C)]
pub struct XTP_API_QuoteApi__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct XTP_API_QuoteApi {
    pub vtable_: *const XTP_API_QuoteApi__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_XTP_API_QuoteApi() {
    assert_eq!(
        ::std::mem::size_of::<XTP_API_QuoteApi>(),
        8usize,
        concat!("Size of: ", stringify!(XTP_API_QuoteApi))
    );
    assert_eq!(
        ::std::mem::align_of::<XTP_API_QuoteApi>(),
        8usize,
        concat!("Alignment of ", stringify!(XTP_API_QuoteApi))
    );
}
extern "C" {
    #[doc = "创建QuoteApi"]
    #[doc = "@param client_id （必须输入）用于区分同一用户的不同客户端，由用户自定义"]
    #[doc = "@param save_file_path （必须输入）存贮订阅信息文件的目录，请设定一个有可写权限的真实存在的路径"]
    #[doc = "@param log_level 日志输出级别"]
    #[doc = "@return 创建出的UserApi"]
    #[doc = "@remark 如果一个账户需要在多个客户端登录，请使用不同的client_id，系统允许一个账户同时登录多个客户端，但是对于同一账户，相同的client_id只能保持一个session连接，后面的登录在前一个session存续期间，无法连接"]
    #[link_name = "_ZN3XTP3API8QuoteApi14CreateQuoteApiEhPKc13XTP_LOG_LEVEL"]
    pub fn XTP_API_QuoteApi_CreateQuoteApi(
        client_id: u8,
        save_file_path: *const ::std::os::raw::c_char,
        log_level: XTP_LOG_LEVEL,
    ) -> *mut XTP_API_QuoteApi;
}
extern "C" {
    #[link_name = "_ZN3XTP3API8QuoteApiD1Ev"]
    pub fn XTP_API_QuoteApi_QuoteApi_destructor(this: *mut XTP_API_QuoteApi);
}
impl XTP_API_QuoteApi {
    #[inline]
    pub unsafe fn CreateQuoteApi(
        client_id: u8,
        save_file_path: *const ::std::os::raw::c_char,
        log_level: XTP_LOG_LEVEL,
    ) -> *mut XTP_API_QuoteApi {
        XTP_API_QuoteApi_CreateQuoteApi(client_id, save_file_path, log_level)
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        XTP_API_QuoteApi_QuoteApi_destructor(self)
    }
}
